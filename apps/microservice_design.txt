1. **Core Service**:
   - **Purpose**: Centralizes core business logic, configuration management, and inter-service coordination, including global settings, plan enforcement (freemium-to-Plus funnel), and usage thresholds.
   - **Endpoints**: `/v1/api/core/settings`, `/v1/api/core/usage`, `/v1/api/core/plan`.
   - **Tech**: NestJS, PostgreSQL (`program_settings`, `merchant_plans`), Redis Cluster (`config:{merchant_id}`, `usage:{merchant_id}`), Kafka (event publishing).
   - **Interactions**: Provides centralized configuration to all services, publishes `plan_limit_warning` to Kafka, and coordinates upgrade nudges via WebSocket.
2. **Auth Service**:
   - **Purpose**: Manages Shopify OAuth, JWT authentication (15-minute expiry, revocation list in Redis), MFA via Auth0, and RBAC (`admin:full`, `admin:analytics`, `admin:support`, `admin:points`).
   - **Endpoints**: `/v1/api/auth/login`, `/v1/api/auth/refresh`, `/v1/api/auth/roles`, `/v1/api/auth/mfa`, `/admin/v1/auth/revoke`.
   - **Tech**: NestJS, `@shopify/shopify-app-express`, Redis Cluster (`jwt:{merchant_id}`, `revoked_jti:{token_id}`), PostgreSQL (`merchants.staff_roles: JSONB`).
   - **Interactions**: Validates tokens for dashboard and admin module, uses gRPC to fetch roles from Core Service, supports MFA and revocation for Shopify Plus.
3. **Points Service**:
   - **Purpose**: Manages points earning/redemption, Shopify POS with offline mode, checkout extensions, campaign discounts, and real-time streaming.
   - **Endpoints**: `/v1/api/points/earn`, `/v1/api/points/redeem`, `/v1/api/points/adjust`, `/v1/api/rewards`, `/v1/api/points/sync`, `/api/points/stream` (WebSocket).
   - **Tech**: NestJS, Rust/Wasm (Shopify Functions for discounts), PostgreSQL (`points_transactions`, `reward_redemptions`), Redis Cluster (`points:customer:{id}`), `socket.io`/`ws`.
   - **Interactions**: Processes `orders/create` webhooks, syncs POS data via SQLite queue, applies checkout extensions, streams updates, and publishes `points.earned` to Kafka.
4. **Referrals Service**:
   - **Purpose**: Manages SMS/email referrals, referral status with progress bar, and error handling with fallback to AWS SES.
   - **Endpoints**: `/v1/api/referrals/create`, `/v1/api/referrals/complete`, `/v1/api/referrals/status`, `/v1/api/referrals/progress`.
   - **Tech**: NestJS, Klaviyo/Postscript (SMS/email, 5s timeout, 3 retries), AWS SES (fallback), Bull queues, PostgreSQL (`referrals`), Redis Streams (`referral:{code}`, `referral:status:{id}`).
   - **Interactions**: Generates referral links, sends notifications, tracks conversion (7%+ target), handles errors, logs fallback events to PostHog, and publishes `referral.created` to Kafka.
5. **RFM Analytics Service**:
   - **Purpose**: Provides basic RFM analytics with time-weighted recency, lifecycle stages, and visualizations (e.g., Recency vs. Monetary scatter plot).
   - **Endpoints**: `/v1/api/rfm/segments`, `/v1/api/rfm/segments/preview`, `/v1/api/rfm/nudges`, `/api/rfm/visualizations`, gRPC (`/analytics.v1/GetSegments`, `/analytics.v1/PreviewRFMSegments`, `/analytics.v1/GetNudges`).
   - **Tech**: NestJS, Rust/Wasm (real-time RFM updates), PostgreSQL (`customers.rfm_score: JSONB`, `rfm_segment_counts`, `rfm_segment_deltas`, `rfm_score_history`), Redis Streams (`rfm:customer:{id}`, `rfm:preview:{merchant_id}`).
   - **Interactions**: Calculates RFM scores, refreshes daily (`0 1 * * *`) and incrementally on `orders/create`, caches in Redis Streams.
6. **Event Tracking Service**:
   - **Purpose**: Tracks feature usage and events for analytics and merchant engagement.
   - **Endpoints**: `/v1/api/events`.
   - **Tech**: NestJS, PostHog, Kafka.
   - **Interactions**: Captures events (e.g., `points_earned`, `referral_clicked`, `gdpr_request_submitted`) and sends to PostHog via Kafka.
7. **AdminCore Service**:
   - **Purpose**: Manages merchant accounts, GDPR requests, and audit logs.
   - **Endpoints**: `/admin/merchants`, `/admin/logs`, gRPC (`/admin.v1/GetMerchants`, `/admin.v1/GetAuditLogs`, `/admin.v1/HandleGDPRRequest`).
   - **Tech**: NestJS, PostgreSQL (`gdpr_requests`, `audit_logs`, `merchants`), Redis Streams (logs, `audit_logs:{merchant_id}`), Kafka (async logging), `socket.io`/`ws`, Nginx (IP allowlisting, HMAC).
   - **Interactions**: Handles GDPR webhooks with retries, RBAC with IP allowlisting, real-time log streaming, and Typeform feedback integration.
8. **AdminFeatures Service**:
   - **Purpose**: Manages points adjustments, referrals, RFM segments, customer imports, notification templates, rate limits, integration health, onboarding, multi-currency settings, and feedback.
   - **Endpoints**: `/admin/points/adjust`, `/admin/referrals`, `/admin/rfm-segments`, `/admin/rfm/export`, `/admin/notifications/template`, `/admin/rate-limits`, `/admin/customers/import`, `/v1/api/plan/usage`, `/admin/setup/stream`, `/admin/settings/currency`, `/admin/integrations/square/sync`, `/admin/v1/feedback`, gRPC (`/admin.v1/UpdateNotificationTemplate`, `/admin.v1/GetRateLimits`, `/admin.v1/ImportCustomers`, `/admin.v1/SyncSquarePOS`).
   - **Tech**: NestJS, PostgreSQL (`email_templates: JSONB`, `integrations`, `setup_tasks`, `merchant_settings`), Redis Streams (rate limits, `setup_tasks:{merchant_id}`), Bull queues (imports, exports, rate limit throttling), `socket.io`/`ws`, Nginx (IP allowlisting, HMAC).
   - **Interactions**: Manages rate limit queues, async CSV imports, notification templates, integration health, onboarding progress, and SLO dashboard.
9. **Campaign Service**:
   - **Purpose**: Manages Shopify Discounts API campaigns.
   - **Endpoints**: `/api/campaigns`, `/api/campaigns/{id}`, gRPC (`/campaign.v1/CreateCampaign`, `/campaign.v1/GetCampaign`).
   - **Tech**: NestJS, Rust/Wasm (Shopify Functions), PostgreSQL (`campaigns: JSONB`), Redis Cluster (`campaign:{campaign_id}`).
   - **Interactions**: Creates/applies campaign discounts and publishes `campaign_created` to Kafka.
10. **Gamification Service**:
    - **Purpose**: Manages badge awards and leaderboards (Phase 6).
    - **Endpoints**: `/api/gamification/badges`, `/api/gamification/leaderboard`, gRPC (`/gamification.v1/AwardBadge`, `/gamification.v1/GetLeaderboard`).
    - **Tech**: NestJS, PostgreSQL (`customer_badges`, `leaderboard_rankings`), Redis Cluster (`badge:{customer_id}:{badge_id}`, `leaderboard:{merchant_id}:{page}`).
    - **Interactions**: Awards badges, ranks customers, caches data in Redis, and publishes `badge_awarded` to Kafka.
11. **Frontend Service**:
    - **Purpose**: Hosts the merchant dashboard, customer widget, and admin module as a single-page app, ensuring Shopify compliance and accessibility.
    - **Endpoints**: `/`, `/customer`, `/admin`, WebSocket (`/admin/v1/setup/stream`).
    - **Tech**: Vite + React, Polaris, Tailwind CSS, App Bridge, `i18next` (multilingual with RTL for Arabic and Hebrew, fallback: English).
    - **Interactions**: Communicates with Core, Auth, Points, Referrals, RFM Analytics, and AdminFeatures via REST and WebSocket for real-time updates (e.g., onboarding progress, referral status).
12. **Products Service**:
    - **Purpose**: Manages product-related data, including product-level RFM analytics (Phase 6), campaign eligibility, and integration with Shopify Product API for dynamic discounts.
    - **Endpoints**: `/v1/api/products`, `/v1/api/products/rfm`, `/v1/api/products/campaigns`, gRPC (`/products.v1/GetProductRFM`, `/products.v1/ApplyCampaign`).
    - **Tech**: NestJS, PostgreSQL (`products`, `product_rfm_scores`), Redis Cluster (`product:{product_id}:rfm`), Shopify Product API.
    - **Interactions**: Fetches product data, calculates product-level RFM scores, integrates with Campaign Service for discounts, and publishes `product_rfm_updated` to Kafka.
