```mermaid
%% Sequence Diagrams for LoyalNest App
%% Aligned with schema.sql (artifact_id: 3525b638-7e8e-4252-8aab-95823188cc26), erd.mmd (artifact_id: a6df1e75-4604-4604-bb66-1d4d7bb729cf), Flow Diagram.txt, RFM.txt, feature_analytics.txt, user_stories.markdown
%% Covers Customer Widget, Merchant Dashboard, Admin Module, Backend Integrations
%% Supports Phases 1-3, scalability (50,000+ customers, 1,000 orders/hour), GDPR/CCPA, multilingual (en, es, fr)
%% Docker services: points-service, referrals-service, analytics-service, admin-service, frontend-service
%% PostHog events aligned with wireframes (e.g., points_history_viewed, gdpr_request_submitted)

%% Customer Widget: Points Earning (Phase 1, US-CW2)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget (React)
    participant PointsService as points-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant Shopify
    participant PostHog
    Customer->>Widget: Make Purchase
    Widget->>PointsService: gRPC /points.v1/EarnPoints (customer_id, order_id, merchant_id, Accept-Language)
    PointsService->>Shopify: Validate Order Webhook HMAC (GraphQL, 50 points/s)
    Shopify-->>PointsService: Order Confirmed (total_price)
    PointsService->>Cache: Check points:{customer_id}
    Cache-->>PointsService: Return points_balance
    alt Valid Order
        PointsService->>DB: INSERT points_transactions (customer_id, merchant_id, type="earn", points)
        DB-->>PointsService: Transaction ID
        PointsService->>DB: UPDATE customers SET points_balance = points_balance + points
        DB-->>PointsService: Updated
        PointsService->>Cache: Update points:{customer_id}
        PointsService->>PostHog: Log points_earned
        PointsService-->>Widget: Points Earned (OK)
        Widget-->>Customer: Display Updated Balance (i18next, PointsHistory.tsx)
    else Invalid Order
        PointsService-->>Widget: Error (Invalid HMAC, 400)
        Widget-->>Customer: Display Error (i18next, ErrorModal.tsx)
    else Rate Limit Exceeded
        PointsService-->>Widget: Error (429, Exponential Backoff)
        Widget-->>Customer: Display Rate Limit Error (i18next, ErrorModal.tsx)
    end
    Note right of DB: Partitioned points_transactions (I3a)
    Note right of PointsService: Uses TypeORM transaction, AES-256 encryption

%% Customer Widget: Points Redemption (Phase 1, US-CW3)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget (React)
    participant PointsService as points-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant Shopify
    participant PostHog
    Customer->>Widget: Select Reward (e.g., 10% Discount, Rewards.tsx)
    Widget->>PointsService: gRPC /points.v1/RedeemReward (customer_id, reward_id, merchant_id, Accept-Language)
    PointsService->>Shopify: Validate OAuth Token (GraphQL, 50 points/s)
    Shopify-->>PointsService: Token Valid
    PointsService->>Cache: Check points:{customer_id}
    Cache-->>PointsService: Return points_balance
    alt Sufficient Points
        PointsService->>DB: SELECT rewards WHERE reward_id, merchant_id
        DB-->>PointsService: Reward Details (points_cost, type, value)
        PointsService->>Shopify: Create Discount Code (Rust/Wasm)
        Shopify-->>PointsService: Discount Code
        PointsService->>DB: INSERT reward_redemptions (customer_id, reward_id, merchant_id, campaign_id, discount_code, points_spent)
        DB-->>PointsService: Redemption ID
        PointsService->>DB: UPDATE customers SET points_balance = points_balance - points_cost
        DB-->>PointsService: Updated
        PointsService->>Cache: Update points:{customer_id}
        PointsService->>PostHog: Log points_redeemed
        PointsService-->>Widget: Discount Code Issued (OK)
        Widget-->>Customer: Display Discount Code (i18next, RewardSuccess.tsx)
    else Insufficient Points
        PointsService-->>Widget: Error (Insufficient Points, 400)
        Widget-->>Customer: Display Error (i18next, ErrorModal.tsx)
    else Rate Limit Exceeded
        PointsService-->>Widget: Error (429, Exponential Backoff)
        Widget-->>Customer: Display Rate Limit Error (i18next, ErrorModal.tsx)
    end
    Note right of DB: Partitioned reward_redemptions (I6a), AES-256 discount_code
    Note right of PointsService: Uses TypeORM transaction

%% Customer Widget: Referral Creation and Reward (Phase 1, US-CW4, US-CW5, US-CW7)
sequenceDiagram
    participant Customer as Advocate
    participant Widget as Customer Widget (React)
    participant ReferralsService as referrals-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant Klaviyo
    participant PostHog
    Customer->>Widget: Share Referral Link (ReferralShare.tsx)
    Widget->>ReferralsService: gRPC /referrals.v1/CreateReferral (advocate_customer_id, merchant_id, Accept-Language)
    ReferralsService->>Shopify: Validate OAuth Token (GraphQL, 50 points/s)
    Shopify-->>ReferralsService: Token Valid
    ReferralsService->>DB: INSERT referral_links (advocate_customer_id, merchant_id, referral_code)
    DB-->>ReferralsService: Referral Link ID
    ReferralsService->>Klaviyo: Queue Notification (Bull, JSONB body, metadata: {"channel": "email"})
    Klaviyo-->>Customer: Referral Link Sent
    ReferralsService->>Cache: Update referral:{referral_code}
    ReferralsService->>PostHog: Log referral_created
    ReferralsService-->>Widget: Referral Code (OK)
    Widget-->>Customer: Display Referral Code (i18next, ReferralShare.tsx)
    Note right of API: Friend uses referral link
    participant Friend
    Friend->>Widget: Sign Up via Referral Link (ReferralSignup.tsx)
    Widget->>ReferralsService: gRPC /referrals.v1/CompleteReferral (referral_code, friend_customer_id, merchant_id)
    ReferralsService->>DB: INSERT referrals (advocate_customer_id, friend_customer_id, referral_link_id, reward_id, merchant_id, metadata)
    DB-->>ReferralsService: Referral ID
    ReferralsService->>DB: INSERT points_transactions (advocate_customer_id, merchant_id, type="referral", points)
    DB-->>ReferralsService: Transaction ID
    ReferralsService->>DB: UPDATE customers SET points_balance = points_balance + points
    DB-->>ReferralsService: Updated
    ReferralsService->>Cache: Update points:{advocate_customer_id}
    ReferralsService->>Klaviyo: Queue Reward Notification (Bull, metadata: {"channel": "email"})
    Klaviyo-->>Customer: Reward Notification
    ReferralsService->>PostHog: Log referral_completed
    ReferralsService-->>Widget: Referral Success (OK)
    Widget-->>Friend: Display Welcome Points (i18next, ReferralSuccess.tsx)
    Note right of DB: Partitioned referrals (I4a), points_transactions (I3a)
    Note right of ReferralsService: Uses idx_referrals_notification_status, AES-256 referral_code

%% Customer Widget: Viewing Referral Status (Phase 1, US-CW7)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget (React)
    participant ReferralsService as referrals-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Customer->>Widget: View Referral Status (ReferralStatus.tsx)
    Widget->>ReferralsService: gRPC /api/referral/status (customer_id, merchant_id, Accept-Language)
    ReferralsService->>Shopify: Validate OAuth Token (GraphQL, 50 points/s)
    Shopify-->>ReferralsService: Token Valid
    ReferralsService->>Cache: Check referral_status:{customer_id}
    Cache-->>ReferralsService: Return referral_data
    alt Cache Miss
        ReferralsService->>DB: SELECT referrals, referral_links WHERE advocate_customer_id
        DB-->>ReferralsService: Referral Status (pending/completed, metadata)
        ReferralsService->>DB: UPDATE referral_links SET last_viewed_at = CURRENT_TIMESTAMP
        DB-->>ReferralsService: Updated
    end
    ReferralsService->>Cache: Update referral_status:{customer_id}
    ReferralsService->>PostHog: Log referral_status_viewed
    ReferralsService-->>Widget: Referral Status (OK)
    Widget-->>Customer: Display Status (i18next, ReferralStatus.tsx)
    Note right of DB: Queries referrals (I4a), referral_links (I23), last_viewed_at
    Note right of ReferralsService: Uses idx_referrals_notification_status

%% Customer Widget: GDPR Data Request (Phase 1, US-CW8)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget (React)
    participant AdminService as admin-service
    participant DB as PostgreSQL
    participant Klaviyo
    participant PostHog
    Customer->>Widget: Submit GDPR Form (GDPRForm.tsx, request_type: data_request/redact)
    Widget->>AdminService: gRPC /api/gdpr/request (customer_id, merchant_id, request_type, Accept-Language)
    AdminService->>Shopify: Validate OAuth Token (GraphQL, 50 points/s)
    Shopify-->>AdminService: Token Valid
    AdminService->>DB: INSERT gdpr_requests (customer_id, merchant_id, request_type, retention_expires_at, metadata: {"origin": "widget"})
    DB-->>AdminService: Request ID
    AdminService->>DB: SELECT customers, points_transactions, reward_redemptions WHERE customer_id
    DB-->>AdminService: Customer Data (AES-256 decrypted email)
    AdminService->>Klaviyo: Queue Data Email (Bull, JSONB body, metadata: {"channel": "email"})
    Klaviyo-->>Customer: Data Sent/Redaction Confirmation
    AdminService->>PostHog: Log gdpr_request_submitted
    AdminService-->>Widget: Request Submitted (OK)
    Widget-->>Customer: Display Confirmation (i18next, GDPRSuccess.tsx)
    Note right of DB: Updates gdpr_requests (I21a, partitioned, 90-day retention)
    Note right of AdminService: AES-256 encryption for email, discount_code

%% Customer Widget: Viewing VIP Tier Status (Phase 2, US-CW9)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget (React)
    participant PointsService as points-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Customer->>Widget: View VIP Status (VIPTier.tsx)
    Widget->>PointsService: gRPC /points.v1/GetVIPStatus (customer_id, merchant_id, Accept-Language)
    PointsService->>Shopify: Validate OAuth Token (GraphQL, 50 points/s)
    Shopify-->>PointsService: Token Valid
    PointsService->>Cache: Check tier:{customer_id}
    Cache-->>PointsService: Return tier_data
    alt Cache Miss
        PointsService->>DB: SELECT customers.vip_tier_id, points_balance, vip_tiers (threshold_value, perks)
        DB-->>PointsService: Tier Details
    end
    PointsService->>Cache: Update tier:{customer_id}
    PointsService->>PostHog: Log vip_status_viewed
    PointsService-->>Widget: Current Tier, Progress, Perks (OK)
    Widget-->>Customer: Display VIP Tier (e.g., Silver, $100/$500, i18next, VIPTier.tsx)
    Note right of DB: Queries customers (I2), vip_tiers (I13)
    Note right of PointsService: Multilingual perks via JSONB, CHECK: en, es, fr

%% Customer Widget: Gamification Interaction (Phase 3, US-CW12)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget (React)
    participant AnalyticsService as analytics-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Customer->>Widget: Complete Action (e.g., Purchase, Gamification.tsx)
    Widget->>AnalyticsService: gRPC /analytics.v1/RecordGamificationAction (customer_id, action_type, merchant_id, Accept-Language)
    AnalyticsService->>Shopify: Validate OAuth Token (GraphQL, 50 points/s)
    Shopify-->>AnalyticsService: Token Valid
    AnalyticsService->>DB: INSERT gamification_achievements (customer_id, merchant_id, badge)
    DB-->>AnalyticsService: Achievement ID
    AnalyticsService->>Cache: Update leaderboard:{merchant_id} (Sorted Set)
    AnalyticsService->>DB: SELECT customers.points_balance, gamification_achievements
    DB-->>AnalyticsService: Achievements List
    AnalyticsService->>PostHog: Log badge_earned
    AnalyticsService-->>Widget: Badge Earned, Leaderboard Rank (OK)
    Widget-->>Customer: Display Badge, Leaderboard (i18next, Gamification.tsx)
    Note right of DB: Updates gamification_achievements (I18)
    Note right of AnalyticsService: Uses JSONB for badge metadata

%% Customer Widget: Nudge Interaction (Phase 2, US-CW10)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget (React)
    participant AnalyticsService as analytics-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant Klaviyo
    participant PostHog
    Customer->>Widget: Trigger Nudge (e.g., Click Banner, NudgeBanner.tsx)
    Widget->>AnalyticsService: gRPC /analytics.v1/GetNudges (customer_id, nudge_id, merchant_id, Accept-Language)
    AnalyticsService->>Shopify: Validate OAuth Token (GraphQL, 50 points/s)
    Shopify-->>AnalyticsService: Token Valid
    AnalyticsService->>Cache: Check nudge:{customer_id}
    Cache-->>AnalyticsService: Return nudge_data
    alt Cache Miss
        AnalyticsService->>DB: SELECT nudges (type, title->>'en', description->>'en')
        DB-->>AnalyticsService: Nudge Details
    end
    AnalyticsService->>DB: INSERT nudge_events (customer_id, nudge_id, merchant_id, action)
    DB-->>AnalyticsService: Event ID
    AnalyticsService->>Klaviyo: Queue Email Notification (Bull, JSONB body, metadata: {"channel": "email"})
    Klaviyo-->>Customer: Nudge Email
    AnalyticsService->>Cache: Update nudge:{customer_id}
    AnalyticsService->>PostHog: Log nudge_action
    AnalyticsService-->>Widget: Action Recorded (OK)
    Widget-->>Customer: Display Confirmation (i18next, NudgeBanner.tsx)
    Note right of DB: Partitioned nudge_events (I20), AES-256 customer_id
    Note right of AnalyticsService: Multilingual title, description (CHECK: en, es, fr)

%% Customer Widget: RFM Segment Preview (Phase 2, US-MD12)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget (React)
    participant AnalyticsService as analytics-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Customer->>Widget: View RFM Segment Preview (RFMPreview.tsx)
    Widget->>AnalyticsService: gRPC /analytics.v1/PreviewRFMSegments (customer_id, merchant_id, Accept-Language)
    AnalyticsService->>Shopify: Validate OAuth Token (GraphQL, 50 points/s)
    Shopify-->>AnalyticsService: Token Valid
    AnalyticsService->>Cache: Check rfm:preview:{merchant_id} (Redis Stream)
    Cache-->>AnalyticsService: Return segment_data
    alt Cache Miss
        AnalyticsService->>DB: SELECT rfm_segment_counts, customers.rfm_score
        DB-->>AnalyticsService: Segment Counts
    end
    AnalyticsService->>Cache: Update rfm:preview:{merchant_id}
    AnalyticsService->>PostHog: Log rfm_preview_viewed
    AnalyticsService-->>Widget: Segment Preview Data (OK)
    Widget-->>Customer: Display Preview (Chart.js, i18next, RFMPreview.tsx)
    Note right of DB: Queries rfm_segment_counts (I24a, Materialized View)
    Note right of AnalyticsService: Uses idx_rfm_segment_counts_merchant_id_segment_name

%% Customer Widget: Campaign Discount Redemption (Phase 3, US-BI4)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget (React)
    participant PointsService as points-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant Shopify
    participant Klaviyo
    participant PostHog
    Customer->>Widget: Redeem Campaign Discount (CampaignDiscount.tsx)
    Widget->>PointsService: gRPC /points.v1/RedeemReward (customer_id, campaign_id, merchant_id, Accept-Language)
    PointsService->>Shopify: Validate OAuth Token (GraphQL, 50 points/s)
    Shopify-->>PointsService: Token Valid
    PointsService->>Cache: Check campaign:{campaign_id}
    Cache-->>PointsService: Return campaign_data
    alt Cache Miss
        PointsService->>DB: SELECT bonus_campaigns WHERE campaign_id, merchant_id
        DB-->>PointsService: Campaign Details (multiplier, conditions, status)
    end
    PointsService->>DB: SELECT customers.rfm_score WHERE customer_id
    DB-->>PointsService: RFM Score
    alt RFM Conditions Met and Campaign Active
        PointsService->>Shopify: Create Discount Code (Rust/Wasm)
        Shopify-->>PointsService: Discount Code
        PointsService->>DB: INSERT reward_redemptions (customer_id, merchant_id, campaign_id, discount_code, points_spent)
        DB-->>PointsService: Redemption ID
        PointsService->>DB: UPDATE customers SET points_balance = points_balance - points_spent
        DB-->>PointsService: Updated
        PointsService->>Cache: Update points:{customer_id}
        PointsService->>Klaviyo: Queue Notification (Bull, JSONB body, metadata: {"channel": "email"})
        Klaviyo-->>Customer: Discount Notification
        PointsService->>PostHog: Log campaign_discount_redeemed
        PointsService-->>Widget: Discount Code Issued (OK)
        Widget-->>Customer: Display Discount Code (i18next, CampaignDiscount.tsx)
    else Conditions Not Met
        PointsService-->>Widget: Error (Invalid RFM/Status, 400)
        Widget-->>Customer: Display Error (i18next, ErrorModal.tsx)
    else Rate Limit Exceeded
        PointsService-->>Widget: Error (429, Exponential Backoff)
        Widget-->>Customer: Display Rate Limit Error (i18next, ErrorModal.tsx)
    end
    Note right of DB: Partitioned reward_redemptions (I6a), bonus_campaigns (I17a)
    Note right of PointsService: Uses idx_bonus_campaigns_merchant_id_type

%% Merchant Dashboard: Configuring Points Program (Phase 1, US-MD2)
sequenceDiagram
    participant Merchant
    participant Dashboard as Merchant Dashboard (React)
    participant FrontendService as frontend-service
    participant PointsService as points-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Merchant->>Dashboard: Update Points Rules (e.g., 10 points/$, PointsConfig.tsx)
    Dashboard->>FrontendService: gRPC /frontend.v1/UpdateContent (merchant_id, config, language, Accept-Language)
    FrontendService->>Shopify: Validate OAuth Token, Check staff_roles (GraphQL, 50 points/s)
    Shopify-->>FrontendService: Token Valid, Role Authorized
    FrontendService->>PointsService: gRPC /points.v1/UpdateProgramSettings (merchant_id, config)
    PointsService->>DB: UPDATE program_settings SET config = jsonb_set(config, '{points_per_dollar}', $1)
    DB-->>PointsService: Updated
    PointsService->>DB: UPDATE merchants SET language = $1 (CHECK: en, es, fr)
    DB-->>PointsService: Updated
    PointsService->>Cache: Update config:{merchant_id}
    PointsService->>PostHog: Log settings_updated
    PointsService-->>FrontendService: Config Saved (OK)
    FrontendService-->>Dashboard: Config Saved (OK)
    Dashboard-->>Merchant: Display Success Message (i18next, SuccessModal.tsx)
    Note right of DB: Updates program_settings (I7), merchants (I1)
    Note right of PointsService: Multilingual config via JSONB

%% Merchant Dashboard: Viewing Analytics (Phase 1, 2, US-MD5)
sequenceDiagram
    participant Merchant
    participant Dashboard as Merchant Dashboard (React)
    participant AnalyticsService as analytics-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Merchant->>Dashboard: View RFM Analytics (AnalyticsDashboard.tsx)
    Dashboard->>AnalyticsService: gRPC /analytics.v1/GetAnalytics (merchant_id, start_date, end_date, Accept-Language)
    AnalyticsService->>Shopify: Validate OAuth Token, Check staff_roles (GraphQL, 50 points/s)
    Shopify-->>AnalyticsService: Token Valid, Role Authorized
    AnalyticsService->>Cache: Check analytics:{merchant_id}
    Cache-->>AnalyticsService: Return analytics_data
    alt Cache Miss
        AnalyticsService->>DB: SELECT customer_segments, customers.rfm_score, rfm_segment_counts
        DB-->>AnalyticsService: Segment Data (language->>'en')
    end
    AnalyticsService->>Cache: Update analytics:{merchant_id}
    AnalyticsService->>PostHog: Log analytics_viewed
    AnalyticsService-->>Dashboard: RFM Chart Data (OK)
    Dashboard-->>Merchant: Display Chart.js RFM Chart (i18next, AnalyticsDashboard.tsx)
    Note right of DB: Queries customer_segments (I9), rfm_segment_counts (I24a)
    Note right of AnalyticsService: Uses idx_rfm_segment_counts_merchant_id_segment_name

%% Merchant Dashboard: Managing Referrals Program (Phase 1, US-MD3)
sequenceDiagram
    participant Merchant
    participant Dashboard as Merchant Dashboard (React)
    participant FrontendService as frontend-service
    participant ReferralsService as referrals-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Merchant->>Dashboard: Configure Referral Settings (ReferralConfig.tsx)
    Dashboard->>FrontendService: gRPC /frontend.v1/UpdateContent (merchant_id, sms_config, Accept-Language)
    FrontendService->>Shopify: Validate OAuth Token, Check staff_roles (GraphQL, 50 points/s)
    Shopify-->>FrontendService: Token Valid, Role Authorized
    FrontendService->>ReferralsService: gRPC /referrals.v1/UpdateReferralConfig (merchant_id, sms_config)
    ReferralsService->>DB: UPDATE program_settings SET config = jsonb_set(config, '{sms_config}', $1)
    DB-->>ReferralsService: Updated
    ReferralsService->>Cache: Update config:{merchant_id}
    ReferralsService->>PostHog: Log referral_config_updated
    ReferralsService-->>FrontendService: Config Saved (OK)
    FrontendService-->>Dashboard: Config Saved (OK)
    Dashboard-->>Merchant: Display Success Message (i18next, SuccessModal.tsx)
    Note right of DB: Updates program_settings (I7)
    Note right of ReferralsService: Uses JSONB for config

%% Merchant Dashboard: Setting Up VIP Tiers (Phase 2, US-MD7)
sequenceDiagram
    participant Merchant
    participant Dashboard as Merchant Dashboard (React)
    participant PointsService as points-service
    participant DB as PostgreSQL
    participant PostHog
    Merchant->>Dashboard: Create VIP Tier (e.g., Gold, $500, VIPTierConfig.tsx)
    Dashboard->>PointsService: gRPC /points.v1/CreateVIPTier (merchant_id, threshold_value, perks, Accept-Language)
    PointsService->>Shopify: Validate OAuth Token, Check staff_roles (GraphQL, 50 points/s)
    Shopify-->>PointsService: Token Valid, Role Authorized
    PointsService->>DB: INSERT vip_tiers (merchant_id, name, threshold_value, perks)
    DB-->>PointsService: Tier ID
    PointsService->>PostHog: Log vip_tier_created
    PointsService-->>Dashboard: Tier Created (OK)
    Dashboard-->>Merchant: Display Tier Details (i18next, VIPTierConfig.tsx)
    Note right of DB: Updates vip_tiers (I13)
    Note right of PointsService: Multilingual perks via JSONB, CHECK: en, es, fr

%% Merchant Dashboard: Creating Bonus Campaigns (Phase 3, US-MD10)
sequenceDiagram
    participant Merchant
    participant Dashboard as Merchant Dashboard (React)
    participant PointsService as points-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Merchant->>Dashboard: Create Campaign (e.g., Double Points, CampaignConfig.tsx)
    Dashboard->>PointsService: gRPC /points.v1/CreateCampaign (merchant_id, multiplier, dates, conditions, status, Accept-Language)
    PointsService->>Shopify: Validate OAuth Token, Check staff_roles (GraphQL, 50 points/s)
    Shopify-->>PointsService: Token Valid, Role Authorized
    PointsService->>DB: INSERT bonus_campaigns (merchant_id, name, type, multiplier, start_date, end_date, conditions, status)
    DB-->>PointsService: Campaign ID
    PointsService->>Cache: Update campaign:{campaign_id}
    PointsService->>PostHog: Log campaign_created
    PointsService-->>Dashboard: Campaign Created (OK)
    Dashboard-->>Merchant: Display Campaign Details (i18next, CampaignConfig.tsx)
    Note right of DB: Partitioned bonus_campaigns (I17a)
    Note right of PointsService: Uses idx_bonus_campaigns_merchant_id_type

%% Merchant Dashboard: Configuring Notification Templates (Phase 2, US-MD8)
sequenceDiagram
    participant Merchant
    participant Dashboard as Merchant Dashboard (React)
    participant FrontendService as frontend-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Merchant->>Dashboard: Configure Notification Template (e.g., Referral Email, TemplateConfig.tsx)
    Dashboard->>FrontendService: gRPC /frontend.v1/UpdateContent (merchant_id, template_type, body, Accept-Language)
    FrontendService->>Shopify: Validate OAuth Token, Check staff_roles (GraphQL, 50 points/s)
    Shopify-->>FrontendService: Token Valid, Role Authorized
    FrontendService->>DB: UPDATE email_templates SET body = $1 (CHECK: en, es, fr)
    DB-->>FrontendService: Updated
    FrontendService->>Cache: Update template:{merchant_id}:{template_type}
    FrontendService->>PostHog: Log template_updated
    FrontendService-->>Dashboard: Template Saved (OK)
    Dashboard-->>Merchant: Display Success Message (i18next, SuccessModal.tsx)
    Note right of DB: Updates email_templates (I14)
    Note right of FrontendService: Multilingual body via JSONB

%% Merchant Dashboard: Customer Import (Phase 3, US-BI3)
sequenceDiagram
    participant Merchant
    participant Dashboard as Merchant Dashboard (React)
    participant AdminService as admin-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Merchant->>Dashboard: Upload Customer CSV (CustomerImport.tsx)
    Dashboard->>AdminService: gRPC /api/customers/import (merchant_id, csv_data, Accept-Language)
    AdminService->>Shopify: Validate OAuth Token, Check staff_roles (GraphQL, 50 points/s)
    Shopify-->>AdminService: Token Valid, Role Authorized
    AdminService->>DB: INSERT customers (merchant_id, email, points_balance)
    DB-->>AdminService: Customer IDs
    AdminService->>DB: INSERT points_transactions (customer_id, merchant_id, type="import", points)
    DB-->>AdminService: Transaction IDs
    AdminService->>DB: INSERT import_logs (merchant_id, success_count, fail_count, fail_reason)
    DB-->>AdminService: Log ID
    AdminService->>DB: INSERT audit_logs (admin_user_id, action="customer_import", metadata)
    DB-->>AdminService: Log ID
    AdminService->>Cache: Update import:{merchant_id}
    AdminService->>PostHog: Log customer_import_completed
    AdminService-->>Dashboard: Import Success (OK)
    Dashboard-->>Merchant: Display Import Summary (i18next, CustomerImport.tsx)
    Note right of DB: Updates customers (I2), points_transactions (I3a), import_logs (I19a, partitioned), audit_logs (I12)
    Note right of AdminService: Uses TypeORM transaction

%% Admin Module: Viewing Merchant Overview (Phase 1, US-AM1)
sequenceDiagram
    participant Admin
    participant AdminModule as Admin Module (React)
    participant AdminService as admin-service
    participant DB as PostgreSQL
    participant PostHog
    Admin->>AdminModule: View Overview (MerchantOverview.tsx)
    AdminModule->>AdminService: gRPC /admin.v1/GetOverview (admin_id, Accept-Language)
    AdminService->>DB: SELECT admin_users.metadata WHERE id = admin_id
    DB-->>AdminService: Role (e.g., superadmin)
    alt Role Authorized
        AdminService->>DB: SELECT merchants, usage_records, points_transactions
        DB-->>AdminService: Metrics (merchant_count, points_issued)
        AdminService->>PostHog: Log overview_viewed
        AdminService-->>AdminModule: Overview Data (OK)
        AdminModule-->>Admin: Display Metrics (i18next, MerchantOverview.tsx)
    else Unauthorized
        AdminService-->>AdminModule: Error (401 Unauthorized)
        AdminModule-->>Admin: Display Error (i18next, ErrorModal.tsx)
    end
    Note right of DB: Queries merchants (I1), usage_records (I22), points_transactions (I3a)
    Note right of AdminService: RBAC via admin_users.metadata

%% Admin Module: Adjusting Merchant Points (Phase 1, US-AM2)
sequenceDiagram
    participant Admin
    participant AdminModule as Admin Module (React)
    participant AdminService as admin-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Admin->>AdminModule: Adjust Points (PointsAdjust.tsx, merchant_id, customer_id, points)
    AdminModule->>AdminService: gRPC /admin.v1/AdjustPoints (admin_id, customer_id, merchant_id, points, Accept-Language)
    AdminService->>DB: SELECT admin_users.metadata WHERE id = admin_id
    DB-->>AdminService: Role (e.g., superadmin)
    alt Role Authorized
        AdminService->>DB: INSERT points_transactions (customer_id, merchant_id, type="adjust", points)
        DB-->>AdminService: Transaction ID
        AdminService->>DB: UPDATE customers SET points_balance = points_balance + points
        DB-->>AdminService: Updated
        AdminService->>DB: INSERT audit_logs (admin_user_id, action="points_adjust", metadata)
        DB-->>AdminService: Log ID
        AdminService->>Cache: Update points:{customer_id}
        AdminService->>PostHog: Log points_adjusted
        AdminService-->>AdminModule: Adjustment Success (OK)
        AdminModule-->>Admin: Display Confirmation (i18next, PointsAdjust.tsx)
    else Unauthorized
        AdminService-->>AdminModule: Error (401 Unauthorized)
        AdminModule-->>Admin: Display Error (i18next, ErrorModal.tsx)
    end
    Note right of DB: Partitioned points_transactions (I3a), audit_logs (I12)
    Note right of AdminService: Uses TypeORM transaction

%% Admin Module: Managing Integration Health (Phase 2, US-AM5)
sequenceDiagram
    participant Admin
    participant AdminModule as Admin Module (React)
    participant AdminService as admin-service
    participant DB as PostgreSQL
    participant Shopify
    participant PostHog
    Admin->>AdminModule: Check Integration Health (IntegrationHealth.tsx)
    AdminModule->>AdminService: gRPC /admin.v1/GetIntegrationHealth (admin_id, Accept-Language)
    AdminService->>DB: SELECT admin_users.metadata WHERE id = admin_id
    DB-->>AdminService: Role (e.g., superadmin)
    alt Role Authorized
        AdminService->>DB: SELECT integrations (merchant_id, type, status)
        DB-->>AdminService: Integration Status
        AdminService->>Shopify: Ping API (OAuth check, GraphQL, 50 points/s)
        Shopify-->>AdminService: Status Response
        AdminService->>PostHog: Log integration_health_checked
        AdminService-->>AdminModule: Health Report (e.g., Shopify: OK) (OK)
        AdminModule-->>Admin: Display Integration Status (i18next, IntegrationHealth.tsx)
    else Unauthorized
        AdminService-->>AdminModule: Error (401 Unauthorized)
        AdminModule-->>Admin: Display Error (i18next, ErrorModal.tsx)
    end
    Note right of DB: Queries integrations (I16)
    Note right of AdminService: Handles 429 rate limits

%% Admin Module: Exporting RFM Segments (Phase 3, US-AM7)
sequenceDiagram
    participant Admin
    participant AdminModule as Admin Module (React)
    participant AnalyticsService as analytics-service
    participant DB as PostgreSQL
    participant PostHog
    Admin->>AdminModule: Export RFM Segments (RFMExport.tsx)
    AdminModule->>AnalyticsService: gRPC /analytics.v1/ExportAnalytics (admin_id, merchant_id, Accept-Language)
    AnalyticsService->>DB: SELECT admin_users.metadata WHERE id = admin_id
    DB-->>AnalyticsService: Role (e.g., superadmin)
    alt Role Authorized
        AnalyticsService->>DB: SELECT customer_segments, customers.rfm_score, rfm_segment_counts
        DB-->>AnalyticsService: Segment Data (language->>'en')
        AnalyticsService->>PostHog: Log rfm_exported
        AnalyticsService-->>AdminModule: CSV File (OK)
        AdminModule-->>Admin: Download CSV (i18next, RFMExport.tsx)
    else Unauthorized
        AnalyticsService-->>AdminModule: Error (401 Unauthorized)
        AdminModule-->>Admin: Display Error (i18next, ErrorModal.tsx)
    end
    Note right of DB: Queries customer_segments (I9), rfm_segment_counts (I24a)
    Note right of AnalyticsService: Uses idx_rfm_segment_counts_merchant_id_segment_name

%% Admin Module: Rate Limit Monitoring (Phase 2, US-AM11)
sequenceDiagram
    participant Admin
    participant AdminModule as Admin Module (React)
    participant AdminService as admin-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant Klaviyo
    participant PostHog
    Admin->>AdminModule: Monitor Rate Limits (RateLimitMonitor.tsx)
    AdminModule->>AdminService: gRPC /api/rate-limits (admin_id, merchant_id, Accept-Language)
    AdminService->>DB: SELECT admin_users.metadata WHERE id = admin_id
    DB-->>AdminService: Role (e.g., superadmin)
    alt Role Authorized
        AdminService->>DB: SELECT api_logs WHERE status_code = 429
        DB-->>AdminService: Rate Limit Violations
        AdminService->>DB: SELECT merchants.rate_limit_threshold WHERE merchant_id
        DB-->>AdminService: Threshold (e.g., {"requests_per_hour": 1000})
        AdminService->>Cache: Update rate_limit:{merchant_id}
        AdminService->>Klaviyo: Notify Admins (Bull, JSONB body, metadata: {"channel": "email"})
        AdminService->>PostHog: Log rate_limit_viewed
        AdminService-->>AdminModule: Violations Report (OK)
        AdminModule-->>Admin: Display Report (i18next, RateLimitMonitor.tsx)
    else Unauthorized
        AdminService-->>AdminModule: Error (401 Unauthorized)
        AdminModule-->>Admin: Display Error (i18next, ErrorModal.tsx)
    end
    Note right of DB: Partitioned api_logs (I11a)
    Note right of AdminService: Uses idx_api_logs_status_code, rate_limit_threshold

%% Backend Integrations: Shopify Order Sync (Phase 1, US-BI1)
sequenceDiagram
    participant Shopify
    participant PointsService as points-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Shopify-->PointsService: Webhook: orders/create (order_id, customer_id, merchant_id)
    PointsService->>Shopify: Validate HMAC (GraphQL, 50 points/s)
    Shopify-->>PointsService: Valid
    PointsService->>Cache: Check order:{order_id}
    Cache-->>PointsService: Not Found
    alt Valid Order
        PointsService->>DB: INSERT points_transactions (customer_id, merchant_id, type="earn", points)
        DB-->>PointsService: Transaction ID
        PointsService->>DB: UPDATE customers SET points_balance = points_balance + points
        DB-->>PointsService: Updated
        PointsService->>Cache: Update points:{customer_id}
        PointsService->>PostHog: Log points_earned
    else Invalid Order
        PointsService->>PostHog: Log order_failed
    else Rate Limit Exceeded
        PointsService->>PostHog: Log rate_limit_exceeded
    end
    Note right of DB: Partitioned points_transactions (I3a)
    Note right of PointsService: Handles 429 rate limits

%% Backend Integrations: Shopify Order Cancellation (Phase 1, US-CW6)
sequenceDiagram
    participant Shopify
    participant PointsService as points-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Shopify-->PointsService: Webhook: orders/cancelled (order_id, customer_id, merchant_id)
    PointsService->>Shopify: Validate HMAC (GraphQL, 50 points/s)
    Shopify-->>PointsService: Valid
    PointsService->>DB: SELECT points_transactions WHERE order_id, type="earn"
    DB-->>PointsService: Transaction Details (points)
    alt Transaction Found
        PointsService->>DB: INSERT points_transactions (customer_id, merchant_id, type="adjust", points=-points)
        DB-->>PointsService: Transaction ID
        PointsService->>DB: UPDATE customers SET points_balance = points_balance - points
        DB-->>PointsService: Updated
        PointsService->>Cache: Update points:{customer_id}
        PointsService->>PostHog: Log points_adjusted
    else No Transaction
        PointsService->>PostHog: Log no_adjustment_needed
    end
    Note right of DB: Partitioned points_transactions (I3a)
    Note right of PointsService: Uses TypeORM transaction

%% Backend Integrations: GDPR Data Request via Webhook (Phase 1, US-AM6)
sequenceDiagram
    participant Shopify
    participant AdminService as admin-service
    participant DB as PostgreSQL
    participant Klaviyo
    participant PostHog
    Shopify-->AdminService: Webhook: customers/data_request (customer_id, merchant_id)
    AdminService->>Shopify: Validate HMAC (GraphQL, 50 points/s)
    Shopify-->>AdminService: Valid
    AdminService->>DB: INSERT gdpr_requests (customer_id, merchant_id, request_type="data_request", retention_expires_at, metadata: {"origin": "webhook"})
    DB-->>AdminService: Request ID
    AdminService->>DB: SELECT customers, points_transactions, reward_redemptions WHERE customer_id
    DB-->>AdminService: Customer Data (AES-256 decrypted email)
    AdminService->>Klaviyo: Queue Data Email (Bull, JSONB body, metadata: {"channel": "email"})
    Klaviyo-->>Customer: Data Sent
    AdminService->>PostHog: Log gdpr_request_submitted
    Note right of DB: Updates gdpr_requests (I21a, partitioned, 90-day retention)
    Note right of AdminService: AES-256 encryption for email, discount_code

%% Backend Integrations: Sending Referral Notification (Phase 1, US-BI2)
sequenceDiagram
    participant ReferralsService as referrals-service
    participant DB as PostgreSQL
    participant Klaviyo
    participant Postscript
    participant Customer
    participant PostHog
    ReferralsService->>DB: SELECT email_templates (type="referral", body->>'en')
    DB-->>ReferralsService: Template Details (CHECK: en, es, fr)
    ReferralsService->>DB: SELECT customers.email, customers.phone WHERE customer_id
    DB-->>ReferralsService: Customer Contact (AES-256 decrypted)
    alt Has Email
        ReferralsService->>Klaviyo: Queue Email (Bull, JSONB body, metadata: {"channel": "email"})
        Klaviyo-->>Customer: Referral Email
    end
    alt Has Phone
        ReferralsService->>Postscript: Queue SMS (Bull)
        Postscript-->>Customer: Referral SMS
    end
    ReferralsService->>DB: INSERT email_events (event_type="sent", recipient_email, metadata)
    DB-->>ReferralsService: Event ID
    ReferralsService->>PostHog: Log referral_notification_sent
    Note right of DB: Partitioned email_events (I15a)
    Note right of ReferralsService: Multilingual body via JSONB, i18next

%% Backend Integrations: RFM Score Update (Phase 2, US-BI5)
sequenceDiagram
    participant Scheduler
    participant AnalyticsService as analytics-service
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Scheduler->>AnalyticsService: Cron Job (0 1 * * *)
    AnalyticsService->>DB: SELECT customers, points_transactions, reward_redemptions
    DB-->>AnalyticsService: Customer Data
    AnalyticsService->>DB: UPDATE customers SET rfm_score = calculate_rfm(recency=40%, frequency=30%, monetary=30%)
    DB-->>AnalyticsService: Updated
    AnalyticsService->>DB: REFRESH MATERIALIZED VIEW rfm_segment_counts
    DB-->>AnalyticsService: Refreshed
    AnalyticsService->>Cache: Update rfm:preview:{merchant_id} (Redis Stream)
    AnalyticsService->>PostHog: Log rfm_updated
    Note right of DB: Updates customers.rfm_score (I2b), rfm_segment_counts (I24a)
    Note right of AnalyticsService: Uses idx_customers_rfm_score_at_risk

%% Explanation of Sequence Diagrams
**Customer Widget (React, i18next)**:
- **Points Earning (US-CW2)**: Customer purchases, Widget calls `/points.v1/EarnPoints` via `points-service`, validates with Shopify, updates `points_transactions`, `customers`, caches in Redis, logs `points_earned` to PostHog, displays in `PointsHistory.tsx`.
- **Points Redemption (US-CW3)**: Customer selects reward in `Rewards.tsx`, calls `/points.v1/RedeemReward`, creates Shopify discount, updates `reward_redemptions`, `customers`, logs `points_redeemed`, displays in `RewardSuccess.tsx`.
- **Referral Creation and Reward (US-CW4, US-CW5, US-CW7)**: Advocate shares link via `/referrals.v1/CreateReferral` in `ReferralShare.tsx`, friend signs up via `/referrals.v1/CompleteReferral` in `ReferralSignup.tsx`, updates `referral_links`, `referrals`, `points_transactions`, sends Klaviyo notification, logs `referral_created`, `referral_completed`.
- **Referral Status (US-CW7)**: Customer views status via `/api/referral/status` in `ReferralStatus.tsx`, queries `referrals`, `referral_links`, updates `last_viewed_at`, logs `referral_status_viewed`.
- **GDPR Data Request (US-CW8)**: Customer submits form via `/api/gdpr/request` in `GDPRForm.tsx`, inserts `gdpr_requests`, sends encrypted data via Klaviyo, logs `gdpr_request_submitted`, displays in `GDPRSuccess.tsx`.
- **VIP Tier Status (US-CW9)**: Customer views tier via `/points.v1/GetVIPStatus` in `VIPTier.tsx`, queries `customers`, `vip_tiers`, logs `vip_status_viewed`.
- **Gamification (US-CW12)**: Customer completes action in `Gamification.tsx`, updates `gamification_achievements`, leaderboard in Redis, logs `badge_earned`.
- **Nudge Interaction (US-CW10)**: Customer triggers nudge in `NudgeBanner.tsx`, records in `nudge_events`, sends multilingual email via Klaviyo, logs `nudge_action`.
- **RFM Segment Preview (US-MD12)**: Customer views preview via `/analytics.v1/PreviewRFMSegments` in `RFMPreview.tsx`, queries `rfm_segment_counts`, logs `rfm_preview_viewed`, displays Chart.js.
- **Campaign Discount Redemption (US-BI4)**: Customer redeems discount via `/points.v1/RedeemReward` in `CampaignDiscount.tsx`, checks `bonus_campaigns.status`, creates Shopify discount, updates `reward_redemptions`, logs `campaign_discount_redeemed`.

**Merchant Dashboard (React, i18next)**:
- **Configuring Points Program (US-MD2)**: Merchant updates rules via `/points.v1/UpdateProgramSettings` in `PointsConfig.tsx`, saves to `program_settings`, `merchants.language`, logs `settings_updated`.
- **Viewing Analytics (US-MD5)**: Merchant views RFM data via `/analytics.v1/GetAnalytics` in `AnalyticsDashboard.tsx`, queries `customer_segments`, `rfm_segment_counts`, logs `analytics_viewed`.
- **Managing Referrals Program (US-MD3)**: Merchant configures SMS via `/referrals.v1/UpdateReferralConfig` in `ReferralConfig.tsx`, updates `program_settings`, logs `referral_config_updated`.
- **Setting Up VIP Tiers (US-MD7)**: Merchant creates tier via `/points.v1/CreateVIPTier` in `VIPTierConfig.tsx`, inserts into `vip_tiers`, logs `vip_tier_created`.
- **Creating Bonus Campaigns (US-MD10)**: Merchant sets up campaign via `/points.v1/CreateCampaign` in `CampaignConfig.tsx`, inserts into `bonus_campaigns`, logs `campaign_created`.
- **Configuring Notification Templates (US-MD8)**: Merchant updates template via `/frontend.v1/UpdateContent` in `TemplateConfig.tsx`, saves to `email_templates`, logs `template_updated`.
- **Customer Import (US-BI3)**: Merchant uploads CSV via `/api/customers/import` in `CustomerImport.tsx`, updates `customers`, `points_transactions`, `import_logs`, `audit_logs`, logs `customer_import_completed`.

**Admin Module (React, i18next)**:
- **Viewing Merchant Overview (US-AM1)**: Admin views metrics via `/admin.v1/GetOverview` in `MerchantOverview.tsx`, checks RBAC, queries `merchants`, `usage_records`, logs `overview_viewed`.
- **Adjusting Merchant Points (US-AM2)**: Admin adjusts points via `/admin.v1/AdjustPoints` in `PointsAdjust.tsx`, updates `points_transactions`, `customers`, `audit_logs`, logs `points_adjusted`.
- **Managing Integration Health (US-AM5)**: Admin checks status via `/admin.v1/GetIntegrationHealth` in `IntegrationHealth.tsx`, queries `integrations`, logs `integration_health_checked`.
- **Exporting RFM Segments (US-AM7)**: Admin exports segments via `/analytics.v1/ExportAnalytics` in `RFMExport.tsx`, queries `customer_segments`, `rfm_segment_counts`, logs `rfm_exported`.
- **Rate Limit Monitoring (US-AM11)**: Admin monitors 429 violations via `/api/rate-limits` in `RateLimitMonitor.tsx`, queries `api_logs`, `merchants.rate_limit_threshold`, logs `rate_limit_viewed`.

**Backend Integrations**:
- **Shopify Order Sync (US-BI1)**: `orders/create` webhook triggers `/points.v1/EarnPoints`, updates `points_transactions`, `customers`, logs `points_earned`.
- **Shopify Order Cancellation (US-CW6)**: `orders/cancelled` webhook triggers `/points.v1/AdjustPoints`, adjusts points, logs `points_adjusted`.
- **GDPR Data Request (US-AM6)**: `customers/data_request` webhook triggers `/api/gdpr/request`, inserts `gdpr_requests`, sends encrypted data, logs `gdpr_request_submitted`.
- **Referral Notification (US-BI2)**: Sends multilingual notifications via Klaviyo/Postscript, logs to `email_events`, `referral_notification_sent`.
- **RFM Score Update (US-BI5)**: Daily cron updates `customers.rfm_score`, refreshes `rfm_segment_counts`, logs `rfm_updated`.

**How to Use**:
- **View Diagrams**: Copy each `sequenceDiagram` block into Mermaid Live Editor (https://mermaid.live/) to visualize. Export as SVG/PNG for documentation.
- **GUI App**: Use `sequence_diagram_gui_app.py` to render diagrams in a browser or save as `.mmd` files.
  - **Dependencies**: Python 3.8–3.11, `tkinter`, `urllib.parse`, `webbrowser`.
  - Save as `sequence_diagram_gui_app.py`.
  - Run: `python sequence_diagram_gui_app.py`.
  - Paste Mermaid code, click "Render Diagram" to view, or "Save Diagram" to save.
  - Check `sequence_app.log` for errors.
- **Troubleshooting**:
  - **Syntax Errors**: Validate in Mermaid Live Editor. Diagrams tested for clarity.
  - **GUI Issues**: Ensure `tkinter` installed (`python -m tkinter`). Check `sequence_app.log`.
  - **Windows**: Run PowerShell as admin, set `Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned`.
- **Documentation**: Save to `docs/sequences/system_sequences.mmd`. Include in README.md or stakeholder presentations.

**Notes**:
- **Schema Integration**: Aligns with `schema.sql` (e.g., `gdpr_requests.metadata`, `referrals.metadata`, `merchants.rate_limit_threshold`).
- **Scalability**: Partitioned tables (`points_transactions`, `referrals`, `api_logs`, `gdpr_requests`, `import_logs`) and Redis caching (`rate_limit:{merchant_id}`, `rfm:preview:{merchant_id}`).
- **Security**: OAuth validation, RBAC (`admin_users.metadata`, `merchants.staff_roles`), AES-256 encryption (`customers.email`, `referral_links.referral_code`).
- **Multilingualism**: JSONB fields (`email_templates.body`, `customer_segments.language`) with `CHECK ?| ARRAY['en', 'es', 'fr']`, i18next integration.
- **Error Handling**: 400 (invalid input), 401 (unauthorized), 429 (rate limit) with exponential backoff.
- **Analytics**: PostHog events (e.g., `points_history_viewed`, `gdpr_request_submitted`) align with wireframes and `feature_analytics.txt`.
```