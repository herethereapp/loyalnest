To create complete user stories for the Herethere Loyalty App, I'll leverage the provided schema.sql, roadmap.txt, flowchart, wireframes, ERD, and sequence diagrams to define user stories that cover all functionalities across the Customer Widget, Merchant Dashboard, Admin Module, and backend integrations (e.g., Shopify, Twilio) for Phases 1â€“3. User stories will follow the standard format: As a [user], I want [functionality], so that [benefit]. They will address all features outlined in the roadmap, including points earning/redemption, referrals, VIP tiers, analytics, settings, and gamification, ensuring alignment with the schema's tables (e.g., customers, points_transactions, rewards) and the sequence diagrams' flows.

The user stories will be organized by component (Customer Widget, Merchant Dashboard, Admin Module) and phase (1, 2, 3), with acceptance criteria to ensure clarity and testability. They will be wrapped in a single <xaiArtifact> with a new UUID, using text/markdown as the content type for readability and structure, as this is a distinct artifact from previous ones.

################################

 Herethere Loyalty App User Stories

Customer Widget (Phase 1, 2, 3)
Phase 1: Core Loyalty Features
US-CW1: View Points Balance
As a customer,I want to view my current points balance in the Customer Widget,so that I can track my loyalty rewards and plan redemptions.Acceptance Criteria:

Display points balance (e.g., "500 Stars") in the widget.
Fetch balance from customers.points_balance via API (GET /points/status).
Show error if API call fails.
Update balance after earning or redeeming points.

US-CW2: Earn Points from Purchase
As a customer,I want to earn points automatically when I make a purchase,so that I can accumulate rewards for my loyalty.Acceptance Criteria:

Trigger POST /points/earn on order completion (Shopify webhook).
Insert record in points_transactions with type="purchase".
Update customers.points_balance and cache in Redis.
Display confirmation (e.g., "You earned 100 points!").
Handle invalid orders with error message.

US-CW3: Redeem Points for Discount
As a customer,I want to redeem points for a discount (e.g., $5 off),so that I can save money on my purchases.Acceptance Criteria:

List available rewards from rewards table in the widget.
Call POST /rewards/redeem with reward_id and customer_id.
Insert record in reward_redemptions and deduct points_spent from customers.points_balance.
Display discount code or error if insufficient points.
Update Redis cache.

US-CW4: Share Referral Link
As a customer,I want to share a referral link via SMS, email, or social media,so that I can invite friends and earn rewards.Acceptance Criteria:

Generate unique referral_code via POST /referrals/create.
Insert record in referral_links with advocate_customer_id.
Display referral link and sharing options (SMS, email, social).
Send notification via Twilio/Klaviyo for SMS/email sharing.
Show error if sharing fails.

US-CW5: Earn Referral Reward
As a customer,I want to earn points when a friend signs up using my referral link,so that I am rewarded for inviting others.Acceptance Criteria:

Friend signs up via POST /referrals/complete with referral_code.
Insert record in referrals with advocate_customer_id, friend_customer_id, reward_id.
Insert points_transactions for advocate with type="referral".
Update customers.points_balance and notify via Twilio.
Display confirmation in widget.

Phase 2: Enhanced Features
US-CW6: View VIP Tier Status
As a customer,I want to view my VIP tier status and progress,so that I can understand my benefits and strive for higher tiers.Acceptance Criteria:

Display current tier and progress (e.g., "Silver, $100/$500 to Gold") from customers.vip_tier_id and vip_tiers.
Call GET /vip-tiers/status to fetch tier details.
Show perks (e.g., early access) from vip_tiers.perks (JSONB).
Update display after tier change.

US-CW7: Receive RFM Nudges
As a customer,I want to receive nudges encouraging engagement (e.g., "Stay Active!"),so that I remain active in the loyalty program.Acceptance Criteria:

Display nudge from nudges table based on customers.rfm_score (JSONB).
Log interaction in nudge_events via POST /nudges/action.
Show nudge in widget (e.g., popup or banner).
Allow dismissal of nudge.

Phase 3: Advanced Features
US-CW8: Earn Gamification Badges
As a customer,I want to earn badges for actions (e.g., purchases, referrals),so that I feel motivated to engage with the program.Acceptance Criteria:

Trigger POST /gamification/action on qualifying action.
Insert badge in gamification_achievements table.
Display badge in widget (e.g., "Loyal Customer").
Show error if action doesn't qualify.

US-CW9: View Leaderboard Rank
As a customer,I want to view my rank on a leaderboard,so that I can compete with other customers.Acceptance Criteria:

Call GET /gamification/leaderboard to fetch rank based on points_balance.
Display rank in widget (e.g., "#5 of 100").
Update rank after points change.

US-CW10: Select Language
As a customer,I want to select my preferred language in the widget,so that I can interact in my native language.Acceptance Criteria:

Display language dropdown (e.g., from merchants.language).
Update widget UI based on selection.
Persist choice in browser session.
Support at least two languages (e.g., English, Spanish).

Merchant Dashboard (Phase 1, 2, 3)
Phase 1: Core Management
US-MD1: Complete Setup Tasks
As a merchant,I want to complete setup tasks on the Welcome Page,so that I can launch my loyalty program.Acceptance Criteria:

Display tasks (e.g., "Launch Program", "Add Widget") from program_settings.
Allow checking tasks as complete.
Save progress via POST /settings/setup.
Show congratulatory message on completion.

US-MD2: Configure Points Program
As a merchant,I want to configure earning and redemption rules,so that I can customize the loyalty program.Acceptance Criteria:

Display form for earning rules (e.g., "1 point/$") and redemptions (e.g., "$5 off: 500 points").
Save to program_settings.config (JSONB) via PUT /points-program.
Preview rewards panel branding.
Toggle program status (enable/disable).

US-MD3: Manage Referrals Program
As a merchant,I want to configure the referrals program,so that I can incentivize customer referrals.Acceptance Criteria:

Display form for SMS/email config and reward settings.
Save to program_settings.config via PUT /referrals/config.
Preview referral popup.
Toggle referral program status.

US-MD4: View Customer List
As a merchant,I want to view and search my customer list,so that I can manage customer data.Acceptance Criteria:

Display list from customers (name, email, points, RFM).
Allow search by name/email via GET /customers.
Show customer details on click.
Handle empty list with message.

US-MD5: View Basic Analytics
As a merchant,I want to view basic analytics (e.g., members, points issued),so that I can monitor program performance.Acceptance Criteria:

Display metrics from customers, points_transactions via GET /analytics.
Show bar chart (Chart.js) for RFM segments.
Handle API errors with fallback message.

US-MD6: Configure Store Settings
As a merchant,I want to configure store details and billing,so that I can manage my account.Acceptance Criteria:

Display form for store name, billing plan (e.g., Free, $29/mo).
Save to merchants (e.g., plan_id) via PUT /settings.
Validate input fields.
Show confirmation on save.

US-MD7: Customize On-Site Content
As a merchant,I want to customize loyalty page and popups,so that I can align with my brand.Acceptance Criteria:

Display editor for loyalty page, rewards panel, launcher button.
Save branding to program_settings.branding (JSONB) via PUT /content.
Preview changes in real-time.
Support post-purchase popup.

Phase 2: Enhanced Management
US-MD8: Configure VIP Tiers
As a merchant,I want to set up VIP tiers based on spending,so that I can reward loyal customers.Acceptance Criteria:

Display form for tiers (e.g., "Gold: $500") and perks.
Save to vip_tiers via POST /vip-tiers.
Preview tier structure.
Notify customers of tier changes via email_templates.

US-MD9: View Activity Logs
As a merchant,I want to view activity logs for points and referrals,so that I can track customer actions.Acceptance Criteria:

Display logs from points_transactions, referrals via GET /logs.
Filter by customer/date.
Show details (e.g., "John +200 points").
Handle empty logs with message.

US-MD10: Configure RFM Settings
As a merchant,I want to configure RFM thresholds,so that I can segment customers effectively.Acceptance Criteria:

Display wizard for recency, frequency, monetary settings.
Save to program_settings.config (JSONB) via PUT /rfm/config.
Preview segment chart.
Validate thresholds.

US-MD11: Manage Checkout Extensions
As a merchant,I want to enable points display at checkout,so that customers can see their balance during purchase.Acceptance Criteria:

Toggle checkout extensions in settings.
Save to program_settings.config via PUT /content.
Preview checkout points display.
Integrate with Shopify via integrations.

Phase 3: Advanced Features
US-MD12: Create Bonus Campaigns
As a merchant,I want to create time-sensitive bonus campaigns,so that I can boost engagement.Acceptance Criteria:

Display form for campaign type (e.g., double points), dates, multiplier.
Save to bonus_campaigns via POST /campaigns.
Schedule campaign start/end.
Show confirmation.

US-MD13: Export Advanced Reports
As a merchant,I want to export advanced analytics reports,so that I can analyze program performance.Acceptance Criteria:

Provide export button for RFM and revenue data via GET /analytics/export.
Download CSV with customer_segments, points_transactions.
Show export progress and completion.

US-MD14: Configure Sticky Bar
As a merchant,I want to enable a sticky bar for rewards,so that I can promote the loyalty program.Acceptance Criteria:

Display editor for sticky bar content.
Save to program_settings.branding via PUT /content.
Preview sticky bar.
Toggle visibility.

US-MD15: Use Developer Toolkit
As a merchant,I want to configure metafields via a developer toolkit,so that I can customize integrations.Acceptance Criteria:

Display form for metafield settings.
Save to integrations.settings (JSONB) via PUT /settings/developer.
Validate metafield inputs.
Show confirmation.

Admin Module (Phase 1, 2, 3)
Phase 1: Core Admin Functions
US-AM1: View Merchant Overview
As an admin,I want to view an overview of all merchants,so that I can monitor platform usage.Acceptance Criteria:

Display metrics (merchant count, points issued) from merchants, points_transactions via GET /admin/overview.
Show RFM chart for aggregated data.
Handle API errors with message.

US-AM2: Manage Merchant List
As an admin,I want to view and search merchants,so that I can manage their accounts.Acceptance Criteria:

Display list from merchants (ID, domain, plan) via GET /admin/merchants.
Allow search by ID/domain.
Show details on click.
Handle empty list with message.

US-AM3: Adjust Customer Points
As an admin,I want to adjust a customer's points balance,so that I can correct errors or provide bonuses.Acceptance Criteria:

Display form for points adjustment via POST /admin/points/adjust.
Insert record in points_transactions with type="admin_adjust".
Update customers.points_balance and log in audit_logs.
Show confirmation.

US-AM4: Manage Admin Users
As an admin,I want to add, edit, or delete admin users,so that I can control platform access.Acceptance Criteria:

Display list from admin_users via GET /admin/users.
Provide forms for add/edit/delete via POST/PUT/DELETE /admin/users.
Validate unique username, email.
Log actions in audit_logs.

US-AM5: View Logs
As an admin,I want to view API and audit logs,so that I can monitor platform activity.Acceptance Criteria:

Display logs from api_logs, audit_logs via GET /admin/logs.
Filter by date/user.
Show details (e.g., "Points Adjust by Admin1").
Handle empty logs with message.

Phase 2: Enhanced Admin Functions
US-AM6: Manage Merchant Plans
As an admin,I want to upgrade or downgrade merchant plans,so that I can manage billing.Acceptance Criteria:

Display current plan from merchants.plan_id via GET /admin/merchants.
Provide form to change plan via PUT /admin/plans.
Update merchants.plan_id and log in audit_logs.
Show confirmation.

US-AM7: Monitor Integration Health
As an admin,I want to check the health of integrations (e.g., Shopify, Twilio),so that I can ensure platform reliability.Acceptance Criteria:

Display status from integrations via GET /admin/integrations/health.
Show status (e.g., "Shopify: OK").
Allow manual ping to external services.
Log checks in audit_logs.

US-AM8: Manage RFM Configurations
As an admin,I want to manage RFM configurations for merchants,so that I can optimize segmentation.Acceptance Criteria:

Display RFM settings from program_settings.config via GET /admin/rfm.
Provide form to edit thresholds via PUT /admin/rfm.
Preview segment chart.
Log changes in audit_logs.

Phase 3: Advanced Admin Functions
US-AM9: Export RFM Segments
As an admin,I want to export RFM segments for merchants,so that I can analyze customer behavior.Acceptance Criteria:

Provide export button via GET /admin/rfm/export.
Download CSV with customer_segments, customers.rfm_score.
Show export progress and completion.
Log export in audit_logs.

US-AM10: Manage Advanced Integrations
As an admin,I want to configure advanced integrations (e.g., Square, Lightspeed),so that I can support new platforms.Acceptance Criteria:

Display form for integration settings via POST /admin/integrations.
Save to integrations.settings (JSONB).
Validate API keys.
Log setup in audit_logs.

Backend Integrations (Phase 1, 2, 3)
US-BI1: Sync Shopify Orders
As a system,I want to sync orders from Shopify via webhooks,so that points are awarded automatically.Acceptance Criteria:

Receive webhook (orders/create) and call POST /points/earn.
Insert record in points_transactions with type="purchase".
Update customers.points_balance and Redis cache.
Log sync in api_logs.

US-BI2: Send Referral Notifications
As a system,I want to send referral notifications via Twilio/Klaviyo,so that customers are informed of rewards.Acceptance Criteria:

Fetch template from email_templates via GET /templates.
Send notification via Twilio/Klaviyo API.
Log in email_events with event_type="sent".
Handle API failures with retry logic.

US-BI3: Import Customer Data (Phase 2)
As a system,I want to import customer data from integrations,so that merchants can onboard existing customers.Acceptance Criteria:

Call POST /data/import with customer data.
Insert records in customers and log in import_logs.
Handle failures with fail_reason in import_logs.
Log import in api_logs.

US-BI4: Apply Campaign Discounts (Phase 3)
As a system,I want to apply discounts from bonus campaigns,so that customers receive promotional rewards.Acceptance Criteria:

Check bonus_campaigns for active campaigns via Rust/Wasm function.
Apply multiplier to points in points_transactions.
Update customers.points_balance and Redis cache.
Log in api_logs.

################################

Explanation of User Stories
Customer Widget (10 stories):
Covers core loyalty (points, redemptions, referrals), Phase 2 enhancements (VIP tiers, RFM nudges), and Phase 3 features (gamification, multilingual support).
Tied to customers, points_transactions, rewards, referrals, vip_tiers, nudges, gamification_achievements.
Merchant Dashboard (15 stories):
Includes setup, points/referrals configuration, customer management, analytics, settings, and on-site content (Phase 1), plus VIP tiers, logs, RFM, checkout extensions (Phase 2), and campaigns, reports, sticky bar, toolkit (Phase 3).
Tied to program_settings, customers, points_transactions, vip_tiers, bonus_campaigns, integrations.
Admin Module (10 stories):
Covers overview, merchant/user/log management (Phase 1), plan/integration/RFM management (Phase 2), and RFM exports/advanced integrations (Phase 3).
Tied to merchants, admin_users, audit_logs, integrations, customer_segments.
Backend Integrations (4 stories):
Addresses Shopify sync, referral notifications (Phase 1), data imports (Phase 2), and campaign discounts (Phase 3).
Tied to points_transactions, email_events, import_logs, bonus_campaigns, api_logs.
Acceptance Criteria:
Specify API calls (e.g., POST /points/earn), database updates (e.g., points_transactions), and UI feedback (e.g., "Display confirmation").
Ensure testability with error handling and validation.
How to Use
Review User Stories:
Open the Markdown file in a viewer (e.g., VS Code, GitHub) to read structured stories.
Use for sprint planning, development, or testing.
Integrate with Project:
Add to your GitHub repository for documentation:
powershell

Collapse

Wrap

Copy
Copy-Item HerethereLoyaltyAppUserStories.md docs/
git add docs/HerethereLoyaltyAppUserStories.md
git commit -m "Add user stories"
git push
Link to wireframes (artifact ID: 5602c38b-b8e9-4dfa-9363-3eb49a0d0460) and sequence diagrams (artifact ID: 06d9aa65-49a8-4519-aa2c-b4f68806553c) for design and flow context.
Test with GUI App:
The Python GUI apps (flowchart_gui_app_optimized.py, sequence_diagram_gui_app.py) don't directly render Markdown. To view user stories in a GUI, you'd need a new app with Markdown rendering (e.g., using tkinter and markdown). Let me know if you want this.
Troubleshooting:
If stories miss specific features, verify against schema.sql and roadmap.txt. All tables (e.g., customers, rewards) and roadmap features (e.g., VIP tiers, gamification) are covered.
For Windows, ensure PowerShell commands run with Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned.
Notes
Completeness: The 39 user stories cover all roadmap features and schema tables, ensuring comprehensive coverage of Phases 1â€“3.
Alignment: Stories align with the ERD (artifact ID: c53b350e-4720-4850-a19f-28eedf6fd132) and sequence diagrams, referencing the same tables and APIs.
Next Steps:
Prioritize stories for sprints (e.g., Phase 1 first).
Validate with stakeholders or test against API endpoints (e.g., POST /points/earn).
If you need stories in another format (e.g., Jira tickets, CSV), or additional stories for edge cases, let me know.
Confirm if the GUI apps are working (check sequence_app.log or flowchart_app.log) to guide further integrations