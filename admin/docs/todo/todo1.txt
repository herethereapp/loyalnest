Step 3: Set Up the Vite + React Frontend

Configure Vite:
Update vite.config.ts to enable HTTPS for Shopify development:
ts

Collapse

Wrap

Copy

Step 4: Set Up PostgreSQL and Redis with Docker
Use Docker Compose to run PostgreSQL and Redis containers.

Create docker-compose.yml in the root directory:

yaml

Collapse

Wrap

Copy


Collapse

Wrap

Copy
FROM node:18-alpine AS development
WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build
CMD ["npm", "run", "start:dev"]
Update the root package.json to include scripts for both backend and frontend:

json

Collapse

Wrap

Copy
{
  "name": "shopify-nestjs-project",
  "version": "1.0.0",
  "scripts": {
    "backend:dev": "cd backend && npm run start:dev",
    "frontend:dev": "cd frontend && npm run dev",
    "docker:up": "docker-compose up -d --build",
    "docker:down": "docker-compose down"
  },
  "dependencies": {
    "@nestjs/core": "^10.0.0",
    "@nestjs/common": "^10.0.0",
    "@nestjs/platform-express": "^10.0.0",
    "@nestjs/config": "^3.0.0",
    "@nestjs/typeorm": "^10.0.0",
    "@nestjs/cache-manager": "^2.0.0",
    "typeorm": "^0.3.0",
    "pg": "^8.0.0",
    "cache-manager": "^5.0.0",
    "cache-manager-redis-store": "^3.0.0",
    "ioredis": "^5.0.0",
    "@shopify/shopify-api": "^8.0.0",
    "rxjs": "^7.0.0",
    "reflect-metadata": "^0.1.0"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "ts-node": "^10.0.0",
    "typescript": "^5.0.0"
  }
}
Create a .env file in the root directory:

env

Collapse

Wrap

Copy
# PostgreSQL
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=shopify_app

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=redis_password

# Shopify
SHOPIFY_API_KEY=your_shopify_api_key
SHOPIFY_API_SECRET=your_shopify_api_secret

# Backend
PORT=3000
Replace your_shopify_api_key and your_shopify_api_secret with credentials from your Shopify Partner Dashboard.

Step 5: Set Up Shopify CLI
Shopify CLI is used to develop Shopify apps or themes.

Install Shopify CLI globally:
bash

Collapse

Wrap

Run

Copy
npm install -g @shopify/cli @shopify/theme
Authenticate with Shopify:
bash

Collapse

Wrap

Run

Copy
shopify login
Follow the prompts to log in to your Shopify Partner account.
Create a Shopify app (if building an app):
bash

Collapse

Wrap

Run

Copy
shopify app init
Follow prompts to name your app and select a template (choose Node.js).
This creates a new app in your Shopify Partner Dashboard and generates API keys.
Link the app to your backend: Copy the API key and secret from the generated .env file in the Shopify app project to your root .env file.
Run Shopify CLI for tunneling: To expose your local app to Shopify:
bash

Collapse

Wrap

Run

Copy
shopify app tunnel
This creates a public URL (e.g., https://your-tunnel.ngrok.io) for Shopify to communicate with your app. Update your Shopify app’s configuration in the Partner Dashboard with this URL.
Step 6: Run the Application
Start Docker services:
bash

Collapse

Wrap

Run

Copy
npm run docker:up
Start the backend:
bash

Collapse

Wrap

Run

Copy
npm run backend:dev
The NestJS backend will be available at http://localhost:3000.
Start the frontend: -bash npm start
text

Collapse

Wrap

Copy
The React frontend will be available at `https://localhost:5173`.
Test the setup:
Open https://localhost:5173 in your browser to see the React app listing products from the NestJS backend.
Use a tool like Postman to test the backend API at http://localhost:3000/products.
Access PostgreSQL using a tool like pgAdmin at localhost:5432 with credentials from the .env file.
Verify Redis is running by connecting with a Redis client (e.g., redis-cli) at localhost:6379.
Test Shopify integration:
Ensure your Shopify app is installed on a development store via the Partner Dashboard.
Navigate to your app’s embedded URL in the Shopify admin to verify App Bridge functionality.
Step 7: Additional Configurations
CORS for backend: Update src/main.ts to enable CORS for the frontend:
ts

Collapse

Wrap

Copy
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import './config/shopify.config';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.enableCors({ origin: 'https://localhost:5173' });
  await app.listen(3000);
}
bootstrap();
HTTPS for local development: Since Shopify requires HTTPS, the vite-plugin-mkcert in the Vite config ensures the frontend runs over HTTPS. For the backend, you can use a self-signed certificate or a reverse proxy like ngrok:
bash

Collapse

Wrap

Run

Copy
ngrok http 3000
Environment-specific configurations:
Create .env.development and .env.production files for different environments.
Update ConfigModule in app.module.ts to load the appropriate .env file:
ts

Collapse

Wrap

Copy
ConfigModule.forRoot({
  isGlobal: true,
  envFilePath: process.env.NODE_ENV === 'production' ? '.env.production' : '.env.development',
}),
Prisma (optional): If you prefer Prisma over TypeORM, install it:
bash

Collapse

Wrap

Run

Copy
npm install @prisma/client
npm install --save-dev prisma
npx prisma init
Update prisma/schema.prisma:
prisma

Collapse

Wrap

Copy
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id    Int     @id @default(autoincrement())
  title String
  price Float
}
Set DATABASE_URL in .env:
env

Collapse

Wrap

Copy
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/shopify_app?schema=public
Generate Prisma client:
bash

Collapse

Wrap

Run

Copy
npx prisma generate
Update products.service.ts to use Prisma instead of TypeORM.
Step 8: Troubleshooting
Docker issues:
Ensure Docker is running (docker info).
Rebuild containers: docker-compose up -d --build.
Check logs: docker-compose logs.
CORS errors: Verify CORS settings in main.ts match the frontend URL.
Shopify API errors: Ensure API keys and scopes are correct in the .env file and Partner Dashboard.
Port conflicts: Change ports in .env or docker-compose.yml if 3000, 5173, 5432, or 6379 are in use.
Database connection errors: Confirm PostgreSQL/Redis credentials and host (postgres/redis in Docker network).
Step 9: Project Kickstart Checklist
✅ NestJS backend running at http://localhost:3000.
✅ Vite + React frontend running at https://localhost:5173.
✅ PostgreSQL database running in Docker, accessible at localhost:5432.
✅ Redis cache running in Docker, accessible at localhost:6379.
✅ Shopify CLI installed and authenticated.
✅ Sample product CRUD API working and integrated with the frontend.
✅ Shopify App Bridge configured for embedded app UI.
Next Steps
Implement Shopify-specific features: Use the Shopify API to fetch/store products, handle webhooks, or create app extensions.
Add authentication: Implement JWT or Shopify OAuth for secure API access.
Set up CI/CD: Use GitHub Actions or Vercel for automated deployments.
Optimize for production: Disable TypeORM’s synchronize, use a production-grade Dockerfile, and deploy to platforms like Heroku or Vercel.
For more details, refer to:

NestJS Documentation
Vite Documentation
Shopify CLI Documentation
Docker Compose Tutorial
Prisma with NestJS
If you need help with a specific feature, deployment, or run into issues, let me know, and I’ll provide tailored guidance!