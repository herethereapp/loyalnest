```mermaid
%% Sequence Diagrams for LoyalNest App
%% Aligned with updated schema.sql, ERD.txt, and Technical Specifications.txt
%% Covers Customer Widget, Merchant Dashboard, Admin Module, and Backend Integrations
%% Includes Phases 1-3 features, scalability, security, and multilingual support

%% Customer Widget: Points Earning (Phase 1)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant Cache as Redis
    participant Shopify
    participant PostHog
    Customer->>Widget: Make Purchase
    Widget->>API: POST /points/earn (customer_id, order_id, merchant_id)
    API->>Shopify: Validate Order (webhook HMAC)
    Shopify-->>API: Order Confirmed (total_price)
    API->>Cache: Check points:customer:{customer_id}
    Cache-->>API: Return points_balance
    alt Sufficient Balance
        API->>DB: INSERT points_transactions (customer_id, merchant_id, type="earn", points)
        DB-->>API: Transaction ID
        API->>DB: UPDATE customers SET points_balance = points_balance + points
        DB-->>API: Updated
        API->>Cache: Update points:customer:{customer_id}
        API->>PostHog: Log points_earned
        API-->>Widget: Points Earned (200 OK)
        Widget-->>Customer: Display Updated Balance
    else Invalid Order
        API-->>Widget: Error (400 Bad Request)
    end
    Note right of DB: Updates points_transactions, customers tables
    Note right of API: Partitioned points_transactions for scalability

%% Customer Widget: Points Redemption (Phase 1)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant Cache as Redis
    participant Shopify
    participant PostHog
    Customer->>Widget: Select Reward (e.g., 10% Discount)
    Widget->>API: POST /rewards/redeem (customer_id, reward_id, merchant_id)
    API->>Shopify: Validate OAuth Token
    Shopify-->>API: Token Valid
    API->>Cache: Check points:customer:{customer_id}
    Cache-->>API: Return points_balance
    alt Sufficient Points
        API->>DB: SELECT rewards WHERE reward_id, merchant_id
        DB-->>API: Reward Details (points_cost, type, value)
        API->>Shopify: Create Discount Code
        Shopify-->>API: Discount Code
        API->>DB: INSERT reward_redemptions (customer_id, reward_id, merchant_id, discount_code, points_spent)
        DB-->>API: Redemption ID
        API->>DB: UPDATE customers SET points_balance = points_balance - points_cost
        DB-->>API: Updated
        API->>Cache: Update points:customer:{customer_id}
        API->>PostHog: Log points_redeemed
        API-->>Widget: Discount Code Issued (200 OK)
        Widget-->>Customer: Display Discount Code
    else Insufficient Points
        API-->>Widget: Error (400 Insufficient Points)
    end
    Note right of DB: Updates reward_redemptions, customers tables
    Note right of API: Uses TypeORM transaction for atomicity

%% Customer Widget: Referral Creation and Reward (Phase 1)
sequenceDiagram
    participant Customer as Advocate
    participant Widget as Customer Widget
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant Cache as Redis
    participant Twilio
    participant PostHog
    Customer->>Widget: Share Referral Link
    Widget->>API: POST /referrals/create (advocate_customer_id, merchant_id)
    API->>Shopify: Validate OAuth Token
    Shopify-->>API: Token Valid
    API->>DB: INSERT referral_links (advocate_customer_id, merchant_id, referral_code)
    DB-->>API: Referral Link ID
    API->>Twilio: Queue SMS with Referral URL (Bull)
    Twilio-->>Customer: Referral Link Sent
    API->>PostHog: Log referral_created
    API-->>Widget: Referral Code (200 OK)
    Widget-->>Customer: Display Referral Code
    Note right of API: Friend uses referral link
    participant Friend
    Friend->>Widget: Sign Up via Referral Link
    Widget->>API: POST /referrals/complete (referral_code, friend_customer_id, merchant_id)
    API->>DB: INSERT referrals (advocate_customer_id, friend_customer_id, reward_id, merchant_id)
    DB-->>API: Referral ID
    API->>DB: INSERT points_transactions (advocate_customer_id, merchant_id, type="referral", points)
    DB-->>API: Transaction ID
    API->>DB: UPDATE customers SET points_balance = points_balance + points
    DB-->>API: Updated
    API->>Cache: Update points:customer:{advocate_customer_id}
    API->>Twilio: Queue Reward SMS (Bull)
    Twilio-->>Customer: Reward Notification
    API->>PostHog: Log referral_completed
    API-->>Widget: Referral Success (200 OK)
    Widget-->>Friend: Display Welcome Points
    Note right of DB: Updates referral_links, referrals, points_transactions, customers tables

%% Customer Widget: Viewing VIP Tier Status (Phase 2)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget
    participant API as NestJS APIs
    participant DB as PostgreSQL
    Customer->>Widget: View VIP Status
    Widget->>API: GET /vip-tiers/status (customer_id, merchant_id)
    API->>Shopify: Validate OAuth Token
    Shopify-->>API: Token Valid
    API->>DB: SELECT customers.vip_tier_id, customers.points_balance, vip_tiers (threshold_value, perks)
    DB-->>API: Tier Details
    API-->>Widget: Current Tier, Progress, Perks (200 OK)
    Widget-->>Customer: Display VIP Tier (e.g., Silver, $100/$500)
    Note right of DB: Queries customers, vip_tiers tables
    Note right of API: Multilingual perks via JSONB

%% Customer Widget: Gamification Interaction (Phase 3)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant PostHog
    Customer->>Widget: Complete Action (e.g., Purchase)
    Widget->>API: POST /gamification/action (customer_id, action_type, merchant_id)
    API->>Shopify: Validate OAuth Token
    Shopify-->>API: Token Valid
    API->>DB: INSERT gamification_achievements (customer_id, merchant_id, badge)
    DB-->>API: Achievement ID
    API->>DB: SELECT customers.points_balance, gamification_achievements
    DB-->>API: Achievements List
    API->>PostHog: Log badge_earned
    API-->>Widget: Badge Earned, Leaderboard Rank (200 OK)
    Widget-->>Customer: Display Badge, Leaderboard
    Note right of DB: Updates gamification_achievements table
    Note right of API: Uses JSONB for badge metadata

%% Customer Widget: Nudge Interaction (Phase 2)
sequenceDiagram
    participant Customer
    participant Widget as Customer Widget
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant Cache as Redis
    participant SendGrid
    Customer->>Widget: Trigger Nudge (e.g., Click Banner)
    Widget->>API: POST /nudges/trigger (customer_id, nudge_id, merchant_id)
    API->>Shopify: Validate OAuth Token
    Shopify-->>API: Token Valid
    API->>DB: SELECT nudges (type, title->'en')
    DB-->>API: Nudge Details
    API->>DB: INSERT nudge_events (customer_id, nudge_id, merchant_id, action)
    DB-->>API: Event ID
    API->>SendGrid: Queue Email Notification (Bull)
    SendGrid-->>Customer: Nudge Email
    API->>Cache: Update nudge:customer:{customer_id}
    API->>PostHog: Log nudge_triggered
    API-->>Widget: Action Recorded (200 OK)
    Widget-->>Customer: Display Confirmation
    Note right of DB: Updates nudge_events table
    Note right of API: Multilingual title via JSONB

%% Merchant Dashboard: Configuring Points Program (Phase 1)
sequenceDiagram
    participant Merchant
    participant Dashboard as Merchant Dashboard
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant Cache as Redis
    Merchant->>Dashboard: Update Points Rules (e.g., 10 points/$)
    Dashboard->>API: PUT /settings (merchant_id, config, language)
    API->>Shopify: Validate OAuth Token, Check staff_roles
    Shopify-->>API: Token Valid, Role Authorized
    API->>DB: UPDATE program_settings SET config = jsonb_set(config, '{points_per_dollar}', $1)
    DB-->>API: Updated
    API->>DB: UPDATE merchants SET language = $1
    DB-->>API: Updated
    API->>Cache: Update config:merchant:{merchant_id}
    API->>PostHog: Log settings_updated
    API-->>Dashboard: Config Saved (200 OK)
    Dashboard-->>Merchant: Display Success Message
    Note right of DB: Updates program_settings, merchants tables
    Note right of API: Uses JSONB for multilingual language

%% Merchant Dashboard: Viewing Analytics (Phase 1, 2)
sequenceDiagram
    participant Merchant
    participant Dashboard as Merchant Dashboard
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant PostHog
    Merchant->>Dashboard: View RFM Analytics
    Dashboard->>API: GET /analytics/rfm (merchant_id, start_date, end_date)
    API->>Shopify: Validate OAuth Token, Check staff_roles
    Shopify-->>API: Token Valid, Role Authorized
    API->>DB: SELECT customer_segments, customers (rfm_score)
    DB-->>API: Segment Data
    API->>PostHog: Log analytics_viewed
    API-->>Dashboard: RFM Chart Data (200 OK)
    Dashboard-->>Merchant: Display Chart.js RFM Chart
    Note right of DB: Queries customer_segments, customers tables
    Note right of API: Uses GIN index on rfm_score

%% Merchant Dashboard: Managing Referrals Program (Phase 1)
sequenceDiagram
    participant Merchant
    participant Dashboard as Merchant Dashboard
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant Cache as Redis
    Merchant->>Dashboard: Configure Referral Settings
    Dashboard->>API: PUT /referrals/config (merchant_id, sms_config)
    API->>Shopify: Validate OAuth Token, Check staff_roles
    Shopify-->>API: Token Valid, Role Authorized
    API->>DB: UPDATE program_settings SET config = jsonb_set(config, '{sms_config}', $1)
    DB-->>API: Updated
    API->>Cache: Update config:merchant:{merchant_id}
    API->>PostHog: Log referral_config_updated
    API-->>Dashboard: Config Saved (200 OK)
    Dashboard-->>Merchant: Display Success Message
    Note right of DB: Updates program_settings table

%% Merchant Dashboard: Setting Up VIP Tiers (Phase 2)
sequenceDiagram
    participant Merchant
    participant Dashboard as Merchant Dashboard
    participant API as NestJS APIs
    participant DB as PostgreSQL
    Merchant->>Dashboard: Create VIP Tier (e.g., Gold, $500)
    Dashboard->>API: POST /vip-tiers (merchant_id, threshold_value, perks)
    API->>Shopify: Validate OAuth Token, Check staff_roles
    Shopify-->>API: Token Valid, Role Authorized
    API->>DB: INSERT vip_tiers (merchant_id, name, threshold_value, perks)
    DB-->>API: Tier ID
    API->>PostHog: Log vip_tier_created
    API-->>Dashboard: Tier Created (200 OK)
    Dashboard-->>Merchant: Display Tier Details
    Note right of DB: Updates vip_tiers table
    Note right of API: Perks stored as JSONB

%% Merchant Dashboard: Creating Bonus Campaigns (Phase 3)
sequenceDiagram
    participant Merchant
    participant Dashboard as Merchant Dashboard
    participant API as NestJS APIs
    participant DB as PostgreSQL
    Merchant->>Dashboard: Create Campaign (e.g., Double Points)
    Dashboard->>API: POST /campaigns (merchant_id, multiplier, dates)
    API->>Shopify: Validate OAuth Token, Check staff_roles
    Shopify-->>API: Token Valid, Role Authorized
    API->>DB: INSERT bonus_campaigns (merchant_id, name, type, multiplier, start_date, end_date)
    DB-->>API: Campaign ID
    API->>PostHog: Log campaign_created
    API-->>Dashboard: Campaign Created (200 OK)
    Dashboard-->>Merchant: Display Campaign Details
    Note right of DB: Updates bonus_campaigns table

%% Admin Module: Viewing Merchant Overview (Phase 1)
sequenceDiagram
    participant Admin
    participant AdminModule as Admin Module
    participant API as NestJS APIs
    participant DB as PostgreSQL
    Admin->>AdminModule: View Overview
    AdminModule->>API: GET /admin/overview
    API->>DB: SELECT admin_users.metadata WHERE id = admin_id
    DB-->>API: Role (e.g., superadmin)
    alt Role Authorized
        API->>DB: SELECT merchants, usage_records, points_transactions
        DB-->>API: Metrics (merchant_count, points_issued)
        API->>PostHog: Log overview_viewed
        API-->>AdminModule: Overview Data (200 OK)
        AdminModule-->>Admin: Display Metrics
    else Unauthorized
        API-->>AdminModule: Error (401 Unauthorized)
    end
    Note right of DB: Queries merchants, usage_records, points_transactions tables
    Note right of API: RBAC via admin_users.metadata

%% Admin Module: Adjusting Merchant Points (Phase 1)
sequenceDiagram
    participant Admin
    participant AdminModule as Admin Module
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant Cache as Redis
    Admin->>AdminModule: Adjust Points (merchant_id, customer_id, points)
    AdminModule->>API: POST /admin/points/adjust
    API->>DB: SELECT admin_users.metadata WHERE id = admin_id
    DB-->>API: Role (e.g., superadmin)
    alt Role Authorized
        API->>DB: INSERT points_transactions (customer_id, merchant_id, type="adjust", points)
        DB-->>API: Transaction ID
        API->>DB: UPDATE customers SET points_balance = points_balance + points
        DB-->>API: Updated
        API->>DB: INSERT audit_logs (admin_user_id, action="points_adjust", metadata)
        DB-->>API: Log ID
        API->>Cache: Update points:customer:{customer_id}
        API->>PostHog: Log points_adjusted
        API-->>AdminModule: Adjustment Success (200 OK)
        AdminModule-->>Admin: Display Confirmation
    else Unauthorized
        API-->>AdminModule: Error (401 Unauthorized)
    end
    Note right of DB: Updates points_transactions, customers, audit_logs tables
    Note right of API: Uses TypeORM transaction

%% Admin Module: Managing Integration Health (Phase 2)
sequenceDiagram
    participant Admin
    participant AdminModule as Admin Module
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant Shopify
    Admin->>AdminModule: Check Integration Health
    AdminModule->>API: GET /admin/integrations/health
    API->>DB: SELECT admin_users.metadata WHERE id = admin_id
    DB-->>API: Role (e.g., superadmin)
    alt Role Authorized
        API->>DB: SELECT integrations (merchant_id, type, status)
        DB-->>API: Integration Status
        API->>Shopify: Ping API (OAuth check)
        Shopify-->>API: Status Response
        API->>PostHog: Log integration_health_checked
        API-->>AdminModule: Health Report (e.g., Shopify: OK) (200 OK)
        AdminModule-->>Admin: Display Integration Status
    else Unauthorized
        API-->>AdminModule: Error (401 Unauthorized)
    end
    Note right of DB: Queries integrations table

%% Admin Module: Exporting RFM Segments (Phase 3)
sequenceDiagram
    participant Admin
    participant AdminModule as Admin Module
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant PostHog
    Admin->>AdminModule: Export RFM Segments
    AdminModule->>API: GET /admin/rfm/export (merchant_id)
    API->>DB: SELECT admin_users.metadata WHERE id = admin_id
    DB-->>API: Role (e.g., superadmin)
    alt Role Authorized
        API->>DB: SELECT customer_segments, customers (rfm_score)
        DB-->>API: Segment Data
        API->>PostHog: Log rfm_exported
        API-->>AdminModule: CSV File (200 OK)
        AdminModule-->>Admin: Download CSV
    else Unauthorized
        API-->>AdminModule: Error (401 Unauthorized)
    end
    Note right of DB: Queries customer_segments, customers tables
    Note right of API: Uses GIN index on rfm_score

%% Backend Integrations: Shopify Order Sync (Phase 1)
sequenceDiagram
    participant Shopify
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Shopify-->API: Webhook: orders/create (order_id, customer_id, merchant_id)
    API->>Shopify: Validate HMAC
    Shopify-->>API: Valid
    API->>Cache: Check order:order_id
    Cache-->>API: Not Found
    alt Valid Order
        API->>DB: INSERT points_transactions (customer_id, merchant_id, type="earn", points)
        DB-->>API: Transaction ID
        API->>DB: UPDATE customers SET points_balance = points_balance + points
        DB-->>API: Updated
        API->>Cache: Update points:customer:{customer_id}
        API->>PostHog: Log points_earned
    else Invalid Order
        API->>PostHog: Log order_failed
    end
    Note right of DB: Updates points_transactions, customers tables
    Note right of API: Partitioned points_transactions for scalability

%% Backend Integrations: Shopify Order Cancellation (Phase 1)
sequenceDiagram
    participant Shopify
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant Cache as Redis
    participant PostHog
    Shopify-->API: Webhook: orders/cancelled (order_id, customer_id, merchant_id)
    API->>Shopify: Validate HMAC
    Shopify-->>API: Valid
    API->>DB: SELECT points_transactions WHERE order_id, type="earn"
    DB-->>API: Transaction Details (points)
    alt Transaction Found
        API->>DB: INSERT points_transactions (customer_id, merchant_id, type="adjust", points=-points)
        DB-->>API: Transaction ID
        API->>DB: UPDATE customers SET points_balance = points_balance - points
        DB-->>API: Updated
        API->>Cache: Update points:customer:{customer_id}
        API->>PostHog: Log points_adjusted
    else No Transaction
        API->>PostHog: Log no_adjustment_needed
    end
    Note right of DB: Updates points_transactions, customers tables
    Note right of API: Partitioned points_transactions

%% Backend Integrations: GDPR Data Request (Phase 1)
sequenceDiagram
    participant Shopify
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant SendGrid
    participant PostHog
    Shopify-->API: Webhook: customers/data_request (customer_id, merchant_id)
    API->>Shopify: Validate HMAC
    Shopify-->>API: Valid
    API->>DB: INSERT gdpr_requests (customer_id, merchant_id, request_type="data_request")
    DB-->>API: Request ID
    API->>DB: SELECT customers, points_transactions, reward_redemptions WHERE customer_id
    DB-->>API: Customer Data
    API->>SendGrid: Queue Data Email (Bull)
    SendGrid-->>Customer: Data Sent
    API->>PostHog: Log gdpr_request
    Note right of DB: Updates gdpr_requests table
    Note right of API: Encrypts customers.email

%% Backend Integrations: Sending Referral Email/SMS (Phase 1)
sequenceDiagram
    participant API as NestJS APIs
    participant DB as PostgreSQL
    participant Twilio
    participant SendGrid
    participant Customer
    participant PostHog
    API->>DB: SELECT email_templates (type="referral", body->>'en')
    DB-->>API: Template Details
    API->>DB: SELECT customers.email, customers.phone WHERE customer_id
    DB-->>API: Customer Contact
    alt Has Email
        API->>SendGrid: Queue Email (Bull)
        SendGrid-->>Customer: Referral Email
    end
    alt Has Phone
        API->>Twilio: Queue SMS (Bull)
        Twilio-->>Customer: Referral SMS
    end
    API->>DB: INSERT email_events (event_type="sent", recipient_email)
    DB-->>API: Event ID
    API->>PostHog: Log notification_sent
    Note right of DB: Updates email_events table
    Note right of API: Multilingual body via JSONB
```

**Explanation of Sequence Diagrams**

**Customer Widget**:
- **Points Earning**: Customer purchases, Widget calls `POST /points/earn`, API validates with Shopify, updates `points_transactions` and `customers`, caches in Redis, logs to PostHog.
- **Points Redemption**: Customer selects reward, Widget calls `POST /rewards/redeem`, API checks balance, creates Shopify discount, updates `reward_redemptions`, `customers`, caches, logs to PostHog.
- **Referral Creation and Reward**: Advocate shares link via `POST /referrals/create`, friend signs up via `POST /referrals/complete`, API updates `referral_links`, `referrals`, `points_transactions`, sends Twilio SMS, logs to PostHog.
- **VIP Tier Status (Phase 2)**: Customer views tier via `GET /vip-tiers/status`, API queries `customers` and `vip_tiers`, returns multilingual perks.
- **Gamification (Phase 3)**: Customer completes action, API updates `gamification_achievements`, returns badges/leaderboard, logs to PostHog.
- **Nudge Interaction (Phase 2)**: Customer triggers nudge, API records in `nudge_events`, sends multilingual email via SendGrid, logs to PostHog.

**Merchant Dashboard**:
- **Configuring Points Program**: Merchant updates rules via `PUT /settings`, API saves to `program_settings` and `merchants.language` (JSONB), caches, logs to PostHog.
- **Viewing Analytics**: Merchant requests RFM data via `GET /analytics/rfm`, API queries `customer_segments`, `customers.rfm_score`, returns Chart.js data.
- **Managing Referrals Program**: Merchant configures SMS settings via `PUT /referrals/config`, API updates `program_settings`, caches.
- **Setting Up VIP Tiers (Phase 2)**: Merchant creates tier via `POST /vip-tiers`, API inserts into `vip_tiers`.
- **Creating Bonus Campaigns (Phase 3)**: Merchant sets up campaign via `POST /campaigns`, API inserts into `bonus_campaigns`.

**Admin Module**:
- **Viewing Merchant Overview**: Admin requests metrics via `GET /admin/overview`, API checks RBAC, queries `merchants`, `usage_records`, `points_transactions`.
- **Adjusting Merchant Points**: Admin adjusts points via `POST /admin/points/adjust`, API updates `points_transactions`, `customers`, logs to `audit_logs`.
- **Managing Integration Health (Phase 2)**: Admin checks status via `GET /admin/integrations/health`, API queries `integrations`, pings Shopify.
- **Exporting RFM Segments (Phase 3)**: Admin exports segments via `GET /admin/rfm/export`, API queries `customer_segments`, `customers`, returns CSV.

**Backend Integrations**:
- **Shopify Order Sync**: `orders/create` webhook updates `points_transactions`, `customers`, caches, logs to PostHog.
- **Shopify Order Cancellation**: `orders/cancelled` webhook adjusts points in `points_transactions`, `customers`, caches, logs to PostHog.
- **GDPR Data Request**: `customers/data_request` webhook inserts into `gdpr_requests`, sends encrypted customer data via SendGrid, logs to PostHog.
- **Referral Email/SMS**: API retrieves multilingual `email_templates`, sends via Twilio/SendGrid, logs to `email_events`, PostHog.

**How to Use**:
- **View Diagrams**: Copy each `sequenceDiagram` block into Mermaid Live Editor (https://mermaid.live/) to visualize. Export as SVG/PNG for documentation.
- **GUI App**: Use the updated Python GUI app (`sequence_diagram_gui_app.py`) to render diagrams in a browser or save as `.mmd` files.
- **Run GUI App**:
  - **Dependencies**: Python 3.8–3.11, `tkinter`, `urllib.parse`, `webbrowser`.
  - Save as `sequence_diagram_gui_app.py`.
  - Run: `python sequence_diagram_gui_app.py`.
  - Paste Mermaid code, click "Render Diagram" to view in browser, or "Save Diagram" to save.
  - Check `sequence_app.log` for errors.
- **Troubleshooting**:
  - **Syntax Errors**: Validate in Mermaid Live Editor. Diagrams are tested but may need zooming for large flows.
  - **GUI Issues**: Ensure `tkinter` is installed (`python -m tkinter`). Check `sequence_app.log` for errors.
  - **Windows**: Run PowerShell as administrator, set `Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned`.

**Notes**:
- **Schema Integration**: Diagrams use updated `schema.sql` tables (e.g., `gdpr_requests`, `email_templates`).
- **Scalability**: Partitioned tables (`points_transactions`, `api_logs`) and Redis caching ensure Plus-scale performance.
- **Security**: OAuth validation, RBAC, and encrypted fields (`customers.email`) are noted.
- **Multilingualism**: JSONB fields (`email_templates.body`, `nudges.title`) support `Accept-Language`.