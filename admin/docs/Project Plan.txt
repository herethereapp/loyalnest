# Updated Project Plan: LoyalNest App for Shopify

## Objective
Develop a Shopify app delivering a customizable, user-friendly loyalty and rewards program to boost customer retention, repeat purchases, and brand loyalty, competing with Smile.io, Yotpo, and LoyaltyLion. Key differentiators include RFM segmentation in all plans, affordable pricing ($29/month for 500 orders), SMS-driven referrals via Twilio, lightweight gamification, multilingual support, and broad POS support. Deliver a production-grade TVP in 7–8 months, focusing on Must Have features (points, SMS referrals, basic RFM analytics, Shopify POS integration, checkout extensions), with Should Have and Could Have features phased in later, using AI-driven development for efficiency and addressing Shopify Plus enterprise needs.

## Phase 1: Research and Planning (4 Weeks)
### Goals
- Understand Shopify’s app ecosystem and competitors’ gaps.
- Define USPs, prioritizing Must Have features for TVP, including Shopify Plus requirements.
- Establish technical and business requirements for a scalable app.

### Tasks
- **Market Research**:
  - Analyze competitors (Smile.io, Yotpo, LoyaltyLion, BON Loyalty, Rivo, Gameball) for features, pricing, and reviews.
  - Target small (100–1,000 customers, AOV $20–$50), medium-sized (1,000–10,000 customers, AOV $50–$200), and Shopify Plus merchants (10,000+ customers, multi-store setups).
  - Identify gaps: SMS referrals (Smile.io/Yotpo weakness), affordable RFM analytics (BON/Gameball limitation), non-Shopify POS (Rivo/Gameball gap), lightweight gamification (Smile.io/BON gap), multilingual support (Smile.io/Rivo limitation), checkout extensions (LoyaltyLion strength).
  - Validate demand for Must Have features: points (purchases, signups, reviews, birthdays), SMS/email referrals, basic RFM analytics, Shopify POS, checkout extensions, automated loyalty email flows, data import from Smile.io/LoyaltyLion.
- **Technical Requirements**:
  - Use Shopify’s Polaris and App Bridge for UI consistency in merchant dashboard, customer widget, and admin module.
  - Ensure Shopify and Shopify Plus compatibility (e.g., higher API rate limits, checkout extensions); defer BigCommerce/Wix/WooCommerce to Phase 6.
  - Adopt API-first architecture with NestJS (TypeScript) for Shopify integrations (OAuth, webhooks) and core logic (points, referrals, RFM analytics).
  - Implement API versioning (/v1/api/*) for backward compatibility.
  - Use Rust/Wasm for Shopify Functions (discounts, checkout extensions, basic RFM score updates) for performance.
  - Consolidate database to PostgreSQL with JSONB for RFM/tier configs (e.g., program_settings.rfm_thresholds, vip_tiers.rfm_criteria).
  - Add Redis for caching points, referrals, RFM scores, and webhook idempotency keys to support 5,000+ customers (50,000+ for Plus).
  - Apply loyalnest_full_schema.sql with indexes on customers(email, merchant_id, rfm_score), points_transactions(customer_id), referrals(merchant_id), vip_tiers(merchant_id).
  - Deploy on a VPS (Ubuntu with Docker) using Docker Compose and GitHub Actions for CI/CD.
  - Leverage AI (GitHub Copilot, Cursor) for NestJS APIs, Rust Functions, React components, Jest/Cypress tests, and PostgreSQL index recommendations, with human review.
- **USPs**:
  - Free plan: 300 orders/month, basic RFM analytics (churn risk segments), undercutting Smile.io ($49/month).
  - SMS-driven referrals via Twilio post-purchase popups, surpassing Smile.io/Yotpo’s email-only referrals.
  - Affordable $29/month plan with full RFM configuration and checkout extensions, competing with LoyaltyLion’s $399/month.
- **Must Have Features for TVP**: Points (purchases, signups, reviews, birthdays), SMS/email referrals, basic RFM analytics (static thresholds), Shopify POS (points earning), checkout extensions (points redemption), automated loyalty email flows, data import from Smile.io/LoyaltyLion.
- **Should Have Features (Phase 3–4)**: VIP tiers (spending-based), advanced RFM configuration, exit-intent popups, Klaviyo/Mailchimp integration, multi-store point sharing, behavioral segmentation.
- **Could Have Features (Phase 6)**: Gamification (badges, leaderboards), multilingual widget (10+ languages), multi-currency discounts, non-Shopify POS (Square, Lightspeed), advanced analytics (25+ reports), developer toolkit for Shopify metafields.
- **Team Formation**:
  - Solo developer handling NestJS, React, Rust; limited experience mitigated by AI tools and clear documentation.
  - Outsource UI/UX design (Polaris-compliant mockups, $2,500) and QA (Cypress testing, $2,500) to Upwork freelancers.
  - Use AI tools (GitHub Copilot, Cursor, Grok) for code generation, testing, and VPS setup guides.
  - Engage Shopify Partners program for feedback from 5–10 merchants (including 2–3 Shopify Plus) on TVP features.
- **Budget and Timeline**:
  - Development: $60,000 (TVP, AI tools, freelancers for UI/QA, Shopify Plus features).
  - Marketing: $5,000 (website, Shopify community ads).
  - Support Infrastructure: $4,000 (VPS hosting, PostHog, support tools).
  - Contingency (15%): $10,350.
  - Total: $79,350.
  - Timeline: 4 weeks.
- **Enhancements & Best Practices**:
  - Document API contracts using OpenAPI/Swagger, including versioning (/v1/api/*).
  - Plan field-level encryption for PII (e.g., customers.email, rfm_score).
  - Implement GDPR webhook handlers for customers/data_request and customers/redact.
  - Set up basic CI pipeline (GitHub Actions) for TypeScript and Rust with rate limit testing.
- **Deliverables**:
  - Competitive analysis report highlighting gaps in SMS referrals, RFM analytics, POS support, and checkout extensions.
  - Feature list prioritizing Must Have for TVP, with Should Have and Could Have planned for Phases 3–6.
  - Pricing model: Free (300 orders, basic RFM), $29/month (500 orders, full RFM, checkout extensions), $99/month (1,500 orders, multi-store), Enterprise (custom).
  - Technical architecture diagram (NestJS, Rust, PostgreSQL, Redis, VPS).
  - Solo developer plan with freelance outsourcing for UI/QA.

## Phase 2: Design and Prototyping (5 Weeks)
### Goals
- Create intuitive, Polaris-compliant UI for merchants and customers, focusing on Must Have features, including checkout extensions.
- Design scalable architecture for 5,000+ merchants and 100,000+ users (50,000+ customers for Plus).

### Tasks
- **UI/UX Design**:
  - Develop wireframes/prototypes using Polaris and App Bridge for:
    - Merchant dashboard: Points (purchases, signups, reviews, birthdays), referrals (SMS/email), basic RFM analytics, checkout extension config, settings.
    - Customer widget: Points balance, redemption (discounts, free shipping, checkout), SMS/email referral popup.
    - Admin module: Merchant management, RFM segment views, logs, multi-user roles (Shopify Plus).
  - Design no-code RFM setup wizard with static thresholds (e.g., Recency 5: <30 days, Frequency 5: 5+ orders, Monetary 5: $250+ for AOV $50).
  - Include Must Have on-site content: SEO-friendly loyalty page, rewards panel, launcher button, points display on product/checkout pages, post-purchase/email capture popups.
  - Plan Should Have UI elements (deferred to Phase 3): VIP tier display, exit-intent popups, discount banners.
  - Outsource Polaris-compliant mockups to freelancer ($2,500).
- **Technical Architecture**:
  - Tech stack: Vite + React with Polaris, Tailwind CSS, App Bridge; NestJS for APIs; Rust/Wasm for Shopify Functions; PostgreSQL (JSONB); Redis for caching.
  - APIs: /v1/api/points (earn/redeem), /v1/api/referral (SMS/email via Twilio), /v1/api/rfm/segments (basic RFM), /v1/api/rfm/config (advanced RFM, Phase 3), /admin/* (merchant management with RBAC).
  - Schema: Use loyalnest_full_schema.sql with customers.rfm_score (JSONB), program_settings.rfm_thresholds (JSONB), merchants.staff_roles (JSONB for RBAC), and indexes.
  - Shopify integration: OAuth via @shopify/shopify-app-express, orders/create webhook for points and RFM updates, POS for points earning, Checkout UI Extensions for points redemption.
  - Use AI for NestJS API boilerplate, React components, Jest/Cypress tests, and PostgreSQL index optimization.
- **Feature Prioritization**:
  - TVP (Must Have): Points (purchases, signups, reviews, birthdays), SMS/email referrals (Twilio), basic RFM analytics (static thresholds, churn risk), Shopify POS (points earning), checkout extensions, automated loyalty email flows, data import.
  - Plan Should Have for Phase 3: VIP tiers (spending-based), advanced RFM configuration, exit-intent popups, Klaviyo/Mailchimp integration, multi-store point sharing, behavioral segmentation.
  - Plan Could Have for Phase 6: Gamification (badges, leaderboards), multilingual widget, multi-currency discounts, non-Shopify POS, advanced analytics (25+ reports), developer toolkit.
- **Prototyping**:
  - Build clickable prototype (Figma) for dashboard, widget, admin module, and checkout extensions, focusing on Must Have features.
  - Validate with 5–10 Shopify merchants (including 2–3 Shopify Plus) via Shopify Partners program, testing RFM usability, SMS referral popup effectiveness, POS integration, and checkout extension adoption.
- **Enhancements & Best Practices**:
  - Integrate PostHog for feature usage tracking (e.g., RFM wizard completion rate, checkout extension usage).
  - Include tooltips and guided onboarding in wireframes for Must Have features.
  - Document Docker Compose and Nginx configs for VPS setup.
  - Conduct early user testing on RFM wizard, SMS referral popup, and checkout extensions.
- **Deliverables**:
  - Wireframes/mockups for dashboard, widget, RFM analytics, admin module, checkout extensions.
  - Architecture diagram (NestJS, Rust, PostgreSQL, Redis, VPS).
  - Clickable prototype (Figma) with Must Have features.
  - Merchant feedback report on RFM, SMS referrals, POS, and checkout extensions.

## Phase 3: Development (19 Weeks)
### Goals
- Build production-grade TVP with Must Have features, including Shopify Plus checkout extensions.
- Develop admin module with RBAC for multi-user support.
- Ensure Shopify compliance and performance for 5,000+ customers (50,000+ for Plus).

### Tasks
- **Backend Development**:
  - **NestJS (TypeScript)**:
    - APIs: /v1/api/points (purchases, signups, reviews, birthdays), /v1/api/referral (SMS/email via Twilio), /v1/api/rfm/segments (basic RFM segments, churn risk), /v1/api/data-import (Smile.io/LoyaltyLion).
    - Shopify: OAuth via @shopify/shopify-app-express, orders/create webhook for points (1 point/$) and RFM score updates (rfm_score.r).
    - RFM: Static calculations (e.g., Recency 5: <30 days, Frequency 5: 5+ orders, Monetary 5: $250+), stored in customers.rfm_score (JSONB).
    - Admin APIs: /admin/merchants, /admin/points/adjust, /admin/referrals, /admin/rfm-segments, /admin/logs with JWT and RBAC (roles: admin:full, admin:analytics, admin:support).
    - Twilio: SMS/email referrals, storing codes in referrals table.
    - GDPR: Implement /webhooks/customers/data_request and /webhooks/customers/redact for compliance.
    - Cache points, referrals, RFM scores, and webhook idempotency keys in Redis.
    - Use AI for API boilerplate, error handlers, Jest tests; manually review for Shopify compliance.
  - **Rust/Wasm**:
    - Shopify Functions: Discount logic (amount/percentage off), checkout extensions (points redemption), basic RFM score updates.
    - Use Shopify CLI for testing; generate Rust code and tests with AI.
- **Frontend Development**:
  - Build dashboard with Vite + React, Polaris, Tailwind CSS, App Bridge:
    - WelcomePage.tsx: Setup tasks, RFM guide.
    - PointsPage.tsx: Configure purchases, signups, reviews, birthdays.
    - ReferralsPage.tsx: SMS/email config.
    - AnalyticsPage.tsx: Basic RFM segments (Chart.js bar chart).
    - SettingsPage.tsx: Store, billing, rewards panel, checkout extension customization.
  - Customer widget: Embeddable React component for points balance, redemption (discounts, free shipping, checkout), SMS/email referral popup, RFM nudges (e.g., “At-Risk”).
  - On-Site Content (Must Have): SEO-friendly loyalty page, rewards panel, launcher button, points display on product/checkout pages, post-purchase/email capture popups.
  - Admin module: Frontend for merchant management, RFM segments, analytics, logs, multi-user roles.
  - Use AI for React components and Cypress tests; outsource Polaris review ($1,000).
- **Integrations**:
  - Shopify: APIs for orders, customers, discounts; POS for points earning; Checkout UI Extensions for points redemption.
  - Twilio: SMS/email referrals.
  - Reviews: Yotpo or Judge.me for points-for-reviews.
  - Email: Basic Klaviyo/Mailchimp for automated loyalty email flows.
  - Data Import: Support Smile.io/LoyaltyLion migration.
  - Multi-store point sharing: Enable points sharing across Shopify Plus multi-store setups, storing shared points in Redis with merchant_group_id.
  - Defer Should Have (advanced Klaviyo, behavioral segmentation) and Could Have (Yotpo SMS, non-Shopify POS) to Phase 6.
- **Testing**:
  - Unit tests: Jest for NestJS APIs, cargo test for Rust Functions, Jest for RFM logic.
  - Integration tests: Shopify/Twilio/RFM/data-import/checkout extension flows (Jest).
  - E2E tests: Dashboard, widget, RFM UI, popups, checkout extensions (Cypress).
  - Load test: 5,000 customers (Shopify) and 50,000 customers (Plus) with Redis caching and PostgreSQL indexes.
  - Optimize PostgreSQL with partitioning for points_transactions and referrals tables for Plus-scale performance.
  - Outsource QA to freelancer ($2,500) for Cypress and exploratory testing.
- **Deployment**:
  - Deploy on VPS (Ubuntu with Docker) using Docker Compose for NestJS, PostgreSQL, Redis, and Vite + React frontend.
  - Use Nginx for frontend assets and reverse proxy to NestJS APIs.
  - Set up GitHub Actions for CI/CD with rate limit testing.
  - Provide Docker Compose scripts for VPS setup.
- **Enhancements & Best Practices**:
  - Integrate Grafana for monitoring API latency and database performance.
  - Implement rate-limiting middleware for Shopify API (2 req/s for Shopify, 40 req/s for Plus).
  - Use short-lived JWTs (15 minutes) with refresh tokens for admin APIs.
  - Add webhook idempotency using Redis and dead-letter queue for failures.
  - Use k6 for load testing in CI pipeline, including Plus-scale scenarios (50,000 customers, 1,000 orders/hour).
- **Deliverables**:
  - TVP with Must Have features: Points, SMS/email referrals, basic RFM analytics, Shopify POS, checkout extensions, automated email flows, data import.
  - Admin module with merchant management, RFM segments, analytics, logs, RBAC.
  - Shopify/Twilio/Yotpo/Klaviyo integrations.
  - Test reports and bug fixes.
  - VPS deployment with Docker Compose and Nginx.

## Phase 4: Beta Testing and Refinement (5.5 Weeks)
### Goals
- Validate TVP with merchants, focusing on Must Have features, including checkout extensions.
- Refine based on feedback for Shopify App Store launch.

### Tasks
- **Beta Testing**:
  - Recruit 10–15 merchants (including 2–3 Shopify Plus) via Shopify Reddit/Discord and Partners program (free 300-order plan).
  - Test Must Have features: Points (purchases, signups, reviews, birthdays), SMS/email referrals, basic RFM analytics, Shopify POS, checkout extensions, data import.
  - Collect feedback on RFM usability, referral conversion rates, POS syncing, checkout extension adoption, and setup wizard.
  - Add PostHog events for Plus-specific features (e.g., checkout_extension_used, multi_store_points_shared).
- **Refinement**:
  - Fix bugs in RFM calculations, referral popups, POS integration, checkout extensions, and data import.
  - Enhance RFM analytics with segment engagement metrics (e.g., repeat purchase rate).
  - Optimize Redis caching and PostgreSQL indexes/partitioning for performance.
  - Begin Should Have development: VIP tiers (spending-based), exit-intent popups, behavioral segmentation, multi-store point sharing.
- **Documentation and Support**:
  - Create guides/YouTube tutorials for no-code setup (RFM wizard, points, referrals, checkout extensions, VPS deployment).
  - Develop Shopify Plus onboarding guide for multi-user setup, checkout extensions, and multi-store point sharing; plan white-glove onboarding for $99/month and Enterprise plans.
  - Provide Docker Compose scripts for VPS setup.
  - Set up email support; plan live chat for paid plans.
- **Enhancements & Best Practices**:
  - Use PostHog to track feature adoption (e.g., SMS referral clicks, RFM wizard completion, checkout extension usage).
  - Conduct surveys and interviews for structured feedback.
  - Maintain a public changelog for transparency.
- **Deliverables**:
  - Beta test report (RFM usability, referral rates, POS performance, checkout extension adoption).
  - Refined TVP with bug fixes and RFM enhancements.
  - Documentation, tutorials, support portal, VPS deployment guide, Shopify Plus onboarding guide.

## Phase 5: Launch and Marketing (6 Weeks)
### Goals
- Launch on Shopify App Store with Must Have features and select Should Have features.
- Attract 100+ merchants (including 5–10 Shopify Plus) in 3 months.

### Tasks
- **Shopify App Store Submission**:
  - Ensure Polaris UI, App Bridge, GDPR compliance (encrypt customers.email, rfm_score; handle GDPR webhooks).
  - Optimize listing with demo videos highlighting RFM analytics, SMS referrals, checkout extensions, $29/month pricing, and data import.
- **Marketing Strategy**:
  - Launch website with pricing: Free (300 orders, basic RFM), $29/month (500 orders, full RFM, checkout extensions), $99/month (1,500 orders, multi-store), Enterprise (custom).
  - Promote via Shopify Reddit/Discord, social media (Facebook, Instagram), Shopify Plus agencies.
  - Highlight case studies (e.g., 15% churn reduction via RFM, 10% referral conversion, 20% checkout extension adoption for Plus).
- **Post-Launch Support**:
  - Monitor performance via admin module (audit_logs, api_logs) on VPS.
  - Offer 24/7 email support and live chat for paid plans; white-glove onboarding for Plus.
  - Add Should Have features: Multi-store point sharing, Klaviyo/Mailchimp integration, discount banners.
- **Enhancements & Best Practices**:
  - Use PostHog to monitor onboarding drop-off and feature adoption (e.g., checkout_extension_used).
  - Include screenshots and videos in merchant documentation.
  - Optimize VPS (Nginx, Docker) for low latency.
- **Deliverables**:
  - Approved Shopify App Store listing.
  - Marketing website, promotional materials.
  - Support system with onboarding guides and VPS maintenance docs.

## Phase 6: Post-Launch and Scaling (Ongoing)
### Goals
- Grow to 100+ merchants (including 5–10 Shopify Plus) in 3 months.
- Achieve Built for Shopify certification.
- Implement Should Have and Could Have features.

### Tasks
- **User Acquisition**:
  - Partner with Shopify Plus agencies and Shopify Reddit/Discord.
  - Run ads emphasizing RFM analytics, SMS referrals, checkout extensions, and $29/month pricing.
  - Publish case studies (e.g., 20% repeat purchase increase via RFM, 50% multi-store point sharing adoption).
- **Feature Expansion**:
  - **Should Have**:
    - Full RFM configuration (thresholds, tiers, adjustments) with Rust/Wasm for real-time updates.
    - VIP tiers (engagement-based perks: early access, birthday gifts).
    - Advanced Klaviyo events, Yotpo Email & SMS, Postscript integration.
    - Point calculators, checkout extensions, behavioral segmentation.
  - **Could Have**:
    - Gamification (badges, leaderboards).
    - Multilingual widget (10+ languages).
    - Multi-currency discounts.
    - Non-Shopify POS (Square, Lightspeed).
    - Advanced analytics (25+ reports, ROI dashboard).
    - Developer toolkit with webhook-based custom integrations for Shopify Plus (ERP/CRM).
- **Maintenance**:
  - Release quarterly updates (e.g., RFM tiers, gamification).
  - Monitor Shopify API changes via webhooks.
  - Optimize PostgreSQL with partitioning for points_transactions, referrals, vip_tiers.
  - Maintain Docker containers and Nginx on VPS.
- **Certification**:
  - Apply for Built for Shopify certification (4.5+ star rating after 3–6 months).
- **Enhancements & Best Practices**:
  - Scale VPS to managed DB/Redis or Kubernetes for 5,000+ merchants (50,000+ for Plus).
  - Regularly update developer/merchant documentation.
  - Monitor RFM engagement, referral conversion rates, and checkout extension adoption.
- **Deliverables**:
  - Monthly performance reports (merchant growth, RFM engagement, referral rates, checkout extension adoption).
  - Feature updates (Should Have and Could Have).
  - Built for Shopify certification application.
  - VPS maintenance and optimization guide.

## Updated Timeline
- Phase 1: 4 weeks
- Phase 2: 5 weeks
- Phase 3: 19 weeks
- Phase 4: 5.5 weeks
- Phase 5: 6 weeks
- Phase 6: Ongoing
- **Total**: 39.5 weeks (7–8 months for TVP, 12–14 months for full implementation)

### Adjustments:
- Extended Phase 3 (19 weeks) to include checkout extensions, RBAC, GDPR webhooks, multi-store point sharing, and Plus-scale load testing.
- Extended Phase 4 (5.5 weeks) for Plus-specific onboarding and PostHog events.
- Maintained total timeline within 7–8 months for TVP.

## Budget Estimate
- Development: $60,000 (TVP, AI tools, freelancers: $2,500 UI, $2,500 QA, Shopify Plus features).
- Marketing: $5,000 (website, Shopify community ads, social media).
- Support Infrastructure: $4,000 (VPS hosting, PostHog, support tools).
- Contingency (15%): $10,350.
- **Total**: $79,350.

### Adjustments:
- Increased development budget by $5,000 for Plus-specific tasks (checkout extensions, RBAC, multi-store point sharing).
- Reallocated $2,000 from marketing to development for Plus-scale QA.

## Risks and Mitigation
- **Risk**: Shopify API changes.
  - **Mitigation**: Use @shopify/shopify-app-express, monitor API updates, test webhooks in CI pipeline.
- **Risk**: High competition.
  - **Mitigation**: Emphasize free RFM analytics, SMS referrals, checkout extensions, $29/month pricing, and data import in marketing.
- **Risk**: Slow adoption.
  - **Mitigation**: Free plan (300 orders), 14-day trial, Shopify Reddit/Discord engagement, case studies.
- **Risk**: Onboarding complexity (especially for Shopify Plus).
  - **Mitigation**: RFM setup wizard, tooltips, YouTube tutorials, Plus-specific onboarding guide, white-glove onboarding.
- **Risk**: Scalability for 5,000+ merchants (50,000+ for Plus).
  - **Mitigation**: Redis caching, PostgreSQL indexes/partitioning, Rust for RFM updates, Dockerized VPS, Plus-scale load testing.
- **Risk**: AI code quality.
  - **Mitigation**: Manual review, Jest/Cypress tests, freelance QA, load testing.
- **Risk**: Solo developer bandwidth.
  - **Mitigation**: Leverage AI for code/tests, outsource UI/QA, prioritize Must Have features for TVP.

## Success Metrics
- **TVP (Phase 3–4)**: 90%+ merchant satisfaction, 80% RFM wizard completion rate, 5%+ SMS referral conversion, 85%+ checkout extension adoption for Plus merchants.
- **Launch (Phase 5)**: 100+ merchants (including 5–10 Plus merchants) in 3 months, 4.5+ star rating in 6 months.
- **Post-Launch (Phase 6)**: 20% repeat purchase increase, 10%+ RFM tier engagement, 50%+ multi-store point sharing adoption for Plus merchants, Built for Shopify certification in 12 months.

## Key Improvements
- **Feature Clarity**: Integrated Must Have (points, SMS/email referrals, basic RFM, Shopify POS, checkout extensions, email flows, data import), Should Have (VIP tiers, advanced RFM, Klaviyo, popups, multi-store point sharing), and Could Have (gamification, multilingual, non-Shopify POS, advanced analytics, developer toolkit) into phases.
- **Task Optimization**: Streamlined tasks, prioritized Must Have features for TVP, moved multi-store point sharing to Phase 3 for Plus merchants, deferred Could Have to Phase 6.
- **API Design**: Added versioning (/v1/api/*), modular endpoints (/rfm/segments, /rfm/config), rate limiting (Shopify vs. Plus), webhook idempotency, and RBAC for admin APIs.
- **Shopify Plus**: Added checkout extensions, RBAC, multi-store point sharing, Plus-scale load testing, and dedicated onboarding guide.
- **Risk Mitigation**: Included GDPR webhooks, PostHog for Plus feature tracking, freelance QA, and Docker Compose scripts.
- **Timeline/Budget**: Adjusted for Plus features (+1.5 weeks, +$3,450) while maintaining TVP timeline.