To create an Entity-Relationship Diagram (ERD) for the LoyalNest App based on the updated `schema.sql`, I’ve analyzed the PostgreSQL schema to include all tables, columns, constraints, and relationships, with enhancements for RFM (`RFM.txt`) and Internal Admin Module (`Internal Admin Module.txt`). The ERD is presented in Mermaid `erDiagram` syntax, wrapped in an `<xaiArtifact>` tag, with improvements for scalability, security, and multilingual support.

**Schema Analysis**

**Tables and Columns**:
- **merchants**: `merchant_id` (PK), `shopify_domain` (UK), `plan_id` (FK to `plans`), `billing_cycle_start`, `api_token` (encrypted), `status` (CHECK: `'active', 'suspended', 'trial'`), `created_at`, `updated_at`, `brand_settings` (JSONB), `language` (JSONB), `features_enabled` (JSONB), `staff_roles` (JSONB).
- **customers**: `customer_id` (PK), `merchant_id` (FK to `merchants`), `shopify_customer_id`, `email` (encrypted), `first_name`, `last_name`, `points_balance`, `vip_tier_id` (FK to `vip_tiers`), `rfm_score` (JSONB, e.g., `{"recency": 5, "frequency": 4, "monetary": 3}`), `referral_url`, `state`, `birthday`, `email_preferences` (JSONB), `created_at`, `updated_at`, `phone`, `total_points_earned`, `total_points_redeemed`, `redeemed_rewards_count`.
- **points_transactions**: `transaction_id` (PK), `customer_id` (FK to `customers`), `merchant_id` (FK to `merchants`), `type` (CHECK: `'earn', 'redeem', 'expire', 'adjust'`), `points`, `source`, `order_id`, `created_at`.
- **rewards**: `reward_id` (PK), `merchant_id` (FK to `merchants`), `type`, `points_cost`, `value`, `is_combinable`, `created_at`, `updated_at`, `category`, `is_public` (CHECK: `true, false`), `platform`.
- **reward_redemptions**: `redemption_id` (PK), `customer_id` (FK to `customers`), `reward_id` (FK to `rewards`), `merchant_id` (FK to `merchants`), `discount_code`, `points_spent`, `status`, `issued_at`, `expires_at`, `metadata` (JSONB).
- **referrals**: `referral_id` (PK), `merchant_id` (FK to `merchants`), `advocate_customer_id` (FK to `customers`), `friend_customer_id` (FK to `customers`), `status`, `reward_id` (FK to `rewards`), `order_id`, `created_at`, `updated_at`, `source`, `campaign_id`.
- **referral_links**: `referral_link_id` (PK), `advocate_customer_id` (FK to `customers`), `merchant_id` (FK to `merchants`), `referral_code` (UK), `created_at`.
- **vip_tiers**: `vip_tier_id` (PK), `merchant_id` (FK to `merchants`), `name`, `threshold_type`, `threshold_value`, `earning_multiplier`, `entry_reward_id` (FK to `rewards`), `perks` (JSONB), `created_at`, `updated_at`, `tier_level`.
- **program_settings**: `merchant_id` (PK, FK to `merchants`), `points_currency_singular`, `points_currency_plural`, `expiry_days`, `allow_guests`, `branding` (JSONB), `config` (JSONB, e.g., `{"rfm": {"recency": "..."}`).
- **integrations**: `integration_id` (PK), `merchant_id` (FK to `merchants`), `type`, `api_key` (encrypted), `status`, `prebuilt_flows` (JSONB), `created_at`, `updated_at`, `settings` (JSONB).
- **customer_segments**: `segment_id` (PK), `merchant_id` (FK to `merchants`), `name`, `rules` (JSONB, e.g., `{"recency": ">=4"}`), `created_at`.
- **bonus_campaigns**: `campaign_id` (PK), `merchant_id` (FK to `merchants`), `name`, `type`, `multiplier`, `start_date`, `end_date`, `conditions` (JSONB), `created_at`.
- **nudges**: `nudge_id` (PK), `merchant_id` (FK to `merchants`), `type`, `title` (JSONB, e.g., `{"en": "Welcome!", "es": "¡Bienvenido!"}`), `description` (JSONB), `icon_url`, `is_enabled`, `created_at`, `updated_at`.
- **nudge_events**: `event_id` (PK), `customer_id` (FK to `customers`), `merchant_id` (FK to `merchants`), `nudge_id` (FK to `nudges`), `action`, `created_at`.
- **email_templates**: `template_id` (PK), `merchant_id` (FK to `merchants`), `type`, `group`, `sub_type`, `subject`, `body` (JSONB, e.g., `{"en": "...", "es": "..."}`), `is_enabled`, `banner_image`, `created_at`, `updated_at`.
- **emails**: `id` (PK), `subject`, `body`, `sent_at`, `recipient_count`, `status`.
- **email_events**: `event_id` (PK), `email_id` (FK to `emails`), `recipient_email` (encrypted), `event_type`, `event_time`, `metadata` (JSONB).
- **api_logs**: `id` (PK), `merchant_id` (FK to `merchants`), `route`, `method`, `status_code`, `timestamp`, `created_at`.
- **audit_logs**: `id` (PK), `admin_user_id` (FK to `admin_users`), `action`, `target_table`, `target_id`, `timestamp`, `created_at`, `metadata` (JSONB).
- **admin_users**: `id` (PK), `username` (UK), `password`, `email` (UK, encrypted), `metadata` (JSONB, e.g., `{"role": "superadmin"}`), `created_at`.
- **shopify_sessions**: `id` (PK), `session_id` (UK), `shop`, `state`, `is_online`, `scope`, `access_token`, `expires_at`, `online_access_info` (JSONB), `created_at`, `updated_at`.
- **usage_records**: `id` (PK), `merchant_id` (FK to `merchants`), `period_start`, `period_end`, `order_count`, `created_at`.
- **plans**: `plan_id` (PK), `name`, `order_limit`, `base_price`, `additional_order_rate`, `features` (JSONB).
- **gdpr_requests**: `request_id` (PK), `merchant_id` (FK to `merchants`), `customer_id` (FK to `customers`), `request_type` (CHECK: `'data_request', 'redact'`), `status` (CHECK: `'pending', 'completed', 'failed'`), `created_at`.

**Relationships**:
- `merchants` owns: `customers`, `points_transactions`, `rewards`, `reward_redemptions`, `referrals`, `referral_links`, `vip_tiers`, `program_settings`, `integrations`, `customer_segments`, `bonus_campaigns`, `nudges`, `nudge_events`, `email_templates`, `api_logs`, `usage_records` (one-to-many).
- `customers` belongs to: `vip_tiers` (many-to-one); earns/redeems: `points_transactions`, `reward_redemptions`; generates: `referral_links`; participates in: `referrals` (as advocate or friend); receives: `nudge_events` (one-to-many).
- `rewards` used in: `reward_redemptions`, `referrals`, `vip_tiers` (entry reward).
- `nudges` triggers: `nudge_events`.
- `emails` triggers: `email_events`.
- `admin_users` performs: `audit_logs`.
- `merchants.plan_id` references: `plans.plan_id`.
- `gdpr_requests` references: `merchants`, `customers`.

**Key Considerations**:
- `merchants` is central, linked to most tables via `merchant_id`.
- JSONB fields (e.g., `rfm_score`, `email_templates.body`) store dynamic data (e.g., RFM scores, multilingual content).
- Partitioned tables (`points_transactions`, `customer_segments`, `api_logs`) ensure Plus-scale performance.
- Encrypted columns (`email`, `api_token`) ensure GDPR/CCPA compliance.
- `__diesel_schema_migrations` is excluded as it’s for migrations.

**Mermaid ERD Syntax**

```mermaid
erDiagram
    merchants ||--o{ customers : "owns customers"
    merchants ||--o{ points_transactions : "owns transactions"
    merchants ||--o{ rewards : "defines rewards"
    merchants ||--o{ reward_redemptions : "manages redemptions"
    merchants ||--o{ referrals : "manages referrals"
    merchants ||--o{ referral_links : "generates links"
    merchants ||--o{ vip_tiers : "defines tiers"
    merchants ||--o{ program_settings : "configures settings"
    merchants ||--o{ integrations : "uses integrations"
    merchants ||--o{ customer_segments : "defines segments"
    merchants ||--o{ bonus_campaigns : "runs campaigns"
    merchants ||--o{ nudges : "defines nudges"
    merchants ||--o{ nudge_events : "tracks events"
    merchants ||--o{ email_templates : "customizes templates"
    merchants ||--o{ api_logs : "logs API calls"
    merchants ||--o{ usage_records : "tracks usage"
    merchants ||--o{ gdpr_requests : "handles GDPR"
    merchants }o--o| plans : "subscribes to"

    customers ||--o{ points_transactions : "earns/redeems points"
    customers ||--o{ reward_redemptions : "redeems rewards"
    customers ||--o{ referrals : "as advocate"
    customers ||--o{ referrals : "as friend"
    customers ||--o{ referral_links : "generates links"
    customers ||--o{ nudge_events : "receives nudges"
    customers ||--o{ gdpr_requests : "requests GDPR"
    customers }o--o| vip_tiers : "belongs to tier"

    rewards ||--o{ reward_redemptions : "used in redemptions"
    rewards ||--o{ referrals : "awarded by referrals"
    rewards ||--o{ vip_tiers : "as entry reward"

    nudges ||--o{ nudge_events : "triggers events"

    emails ||--o{ email_events : "triggers events"

    admin_users ||--o{ audit_logs : "performs actions"

    merchants {
        text merchant_id PK
        text shopify_domain UK
        text plan_id FK
        text api_token "encrypted"
        varchar status CHECK
        jsonb brand_settings
        jsonb language
        jsonb features_enabled
        jsonb staff_roles
    }
    customers {
        text customer_id PK
        text merchant_id FK
        text shopify_customer_id
        text email "encrypted"
        integer points_balance
        text vip_tier_id FK
        jsonb rfm_score
        text referral_url
        jsonb email_preferences
    }
    points_transactions {
        text transaction_id PK
        text customer_id FK
        text merchant_id FK
        text type CHECK
        integer points
        text source
        text order_id
    }
    rewards {
        text reward_id PK
        text merchant_id FK
        text type
        integer points_cost
        numeric value
        boolean is_combinable
        boolean is_public CHECK
    }
    reward_redemptions {
        text redemption_id PK
        text customer_id FK
        text reward_id FK
        text merchant_id FK
        text discount_code
        integer points_spent
        text status
    }
    referrals {
        text referral_id PK
        text merchant_id FK
        text advocate_customer_id FK
        text friend_customer_id FK
        text status
        text reward_id FK
        text order_id
    }
    referral_links {
        text referral_link_id PK
        text advocate_customer_id FK
        text merchant_id FK
        text referral_code UK
    }
    vip_tiers {
        text vip_tier_id PK
        text merchant_id FK
        text name
        text threshold_type
        numeric threshold_value
        text entry_reward_id FK
        jsonb perks
        integer tier_level
    }
    program_settings {
        text merchant_id PK,FK
        text points_currency_singular
        text points_currency_plural
        integer expiry_days
        boolean allow_guests
        jsonb branding
        jsonb config
    }
    integrations {
        text integration_id PK
        text merchant_id FK
        text type
        text api_key "encrypted"
        text status
        jsonb prebuilt_flows
        jsonb settings
    }
    customer_segments {
        text segment_id PK
        text merchant_id FK
        text name
        jsonb rules
    }
    bonus_campaigns {
        text campaign_id PK
        text merchant_id FK
        text name
        text type
        numeric multiplier
        timestamp start_date
        timestamp end_date
        jsonb conditions
    }
    nudges {
        text nudge_id PK
        text merchant_id FK
        text type
        jsonb title
        jsonb description
        text icon_url
        boolean is_enabled
    }
    nudge_events {
        text event_id PK
        text customer_id FK
        text merchant_id FK
        text nudge_id FK
        text action
    }
    email_templates {
        text template_id PK
        text merchant_id FK
        text type
        text group
        text sub_type
        text subject
        jsonb body
        boolean is_enabled
    }
    emails {
        integer id PK
        text subject
        text body
        timestamp sent_at
        integer recipient_count
        text status
    }
    email_events {
        text event_id PK
        integer email_id FK
        text recipient_email "encrypted"
        text event_type
        jsonb metadata
    }
    api_logs {
        text id PK
        text merchant_id FK
        text route
        text method
        integer status_code
        timestamp timestamp
    }
    audit_logs {
        uuid id PK
        integer admin_user_id FK
        text action
        text target_table
        uuid target_id
        jsonb metadata
    }
    admin_users {
        integer id PK
        text username UK
        text password
        text email UK, "encrypted"
        jsonb metadata
    }
    shopify_sessions {
        integer id PK
        text session_id UK
        text shop
        text scope
        text access_token
        jsonb online_access_info
    }
    usage_records {
        integer id PK
        text merchant_id FK
        date period_start
        date period_end
        integer order_count
    }
    plans {
        text plan_id PK
        text name
        integer order_limit
        numeric base_price
        jsonb features
    }
    gdpr_requests {
        text request_id PK
        text merchant_id FK
        text customer_id FK
        text request_type CHECK
        text status CHECK
        timestamp created_at
    }
```

**Explanation of ERD**

**Entities**: Each table is an entity with key columns, including PK, FK, UK, and notable fields (e.g., JSONB like `rfm_score`, encrypted columns marked with "encrypted"). The `plans` and `gdpr_requests` tables are added for completeness.

**Relationships**:
- `merchants` is central, owning most entities via `merchant_id` (one-to-many).
- `customers` links to `vip_tiers` (many-to-one), `points_transactions`, `reward_redemptions`, `referrals`, `referral_links`, `nudge_events`, `gdpr_requests` (one-to-many).
- `rewards` connects to `reward_redemptions`, `referrals`, `vip_tiers`.
- `nudges`, `emails`, `admin_users`, and `plans` have specific relationships.
- `gdpr_requests` links to `merchants` and `customers`.

**Mermaid Syntax**:
- `||--o{` for one-to-many (e.g., `merchants` owns `customers`).
- `}o--o|` for many-to-one (e.g., `customers` belongs to `vip_tiers`).
- Attributes include data types, constraints, and encryption notes.

**Exclusions**: `__diesel_schema_migrations` is omitted as it’s for migrations.

**How to Use**

- **View ERD**: Paste the Mermaid code into Mermaid Live Editor (https://mermaid.live/) to visualize. Export as SVG/PNG for documentation.
- **GUI Integration**: The Python GUI app (`flowchart_gui_app_optimized.py`, artifact ID: 771be54f-50b6-4072-ad61-ba3d5ec1e6da) requires modification to support `erDiagram`. Use Mermaid.js in a web canvas (I can provide code if needed).
- **Verify Schema**: The ERD matches the updated `schema.sql`, including new columns (`rfm_score`, `status`, `staff_roles`) and tables (`plans`, `gdpr_requests`).
- **Troubleshooting**:
  - Check Mermaid syntax in Live Editor if rendering fails.
  - For simplified ERD, focus on core tables (`merchants`, `customers`, `points_transactions`, `vip_tiers`, `rewards`).
  - Install Graphviz for Windows (`dot -V`) if extending GUI app.

**Next Steps**
- Test ERD in Mermaid Live Editor.
- Request Python GUI app modification for `erDiagram` support.
- Request simplified ERD or alternative formats (e.g., SchemaSpy PNG).
- Share feedback or logs (`flowchart_app.log`) if integrating with GUI app.