# Purpose of the Internal Admin Module

The internal admin module is a centralized, standalone dashboard for the Herethere Loyalty developer team to:
- Monitor and manage all merchants, including Shopify Plus (50,000+ customers, 1,000 orders/hour).
- View aggregated platform analytics (e.g., merchant count, orders, points, RFM segments).
- Perform administrative actions (e.g., suspend accounts, adjust points, manage plans).
- Troubleshoot issues via API and audit logs.
- Ensure GDPR/CCPA compliance and support internal operations without Shopify admin panel reliance.

The module is hosted outside the Shopify embedded app context (e.g., `admin.herethere.com`) with secure authentication (JWT, MFA) and is distinct from the merchant-facing dashboard.

# Advice for Designing the Internal Admin Module

## 1. Key Features

### Overview Dashboard
- **Metrics**: 
  - Total merchants (`merchants` count).
  - Active merchants (orders or points in last 30 days).
  - Total orders (`usage_records.order_count` sum).
  - Points issued/redeemed (`points_transactions` sum).
  - Revenue (`plans.base_price` sum).
  - Plus merchant count (50,000+ customers).
- **Charts**: Visualize trends (merchant growth, points activity, RFM segments) with Chart.js.
- **Recent Activity**: Show merchant signups, API errors (`api_logs`), audit events (`audit_logs`), integration health (Shopify, Klaviyo).
- **Success Metrics**: 90%+ query performance under 1s, 80%+ admin interaction rate.
- **Implementation**: Cache metrics in Redis (`metrics:overview:{period}`), track via PostHog (`overview_viewed`).

### Merchants Management
- **List Merchants**: Table with:
  - `merchant_id`, `shopify_domain`, `plan_id` (joined with `plans.name`), `order_count`, `status` (`active`, `suspended`, `trial`), `created_at`, `updated_at`, RBAC roles (`staff_roles`), customer count.
- **Search/Filter**: By domain, email, plan, status, language, integration type.
- **View Merchant Details**:
  - Store details (`brand_settings`, `language` as JSONB).
  - Customer count (`customers` per `merchant_id`).
  - Points transactions (`points_transactions` summary).
  - RFM segments (`customer_segments`).
  - Integrations (`integrations.status`).
  - API logs (`api_logs`).
  - GDPR compliance status (webhook logs).
- **Manage Merchants**:
  - Activate/suspend (update `merchants.status`).
  - Upgrade/downgrade plans (`merchants.plan_id`).
  - Reset API token (`merchants.api_token`, encrypted).
  - Adjust points (`customers.points_balance` via `points_transactions`).
  - GDPR data export/delete (`customers/data_request`, `customers/redact`).
  - Bulk actions (e.g., suspend multiple merchants).
- **Implementation**: Partition `points_transactions`, `customer_segments` by `merchant_id`, use RBAC (`staff_roles`).

### Admin Users Management
- **List Admins**: Table with `admin_users.username`, `email` (encrypted), `metadata` (roles), `created_at`, last login.
- **Manage Admins**: Add/edit/delete accounts, update passwords (bcrypt), enable MFA (TOTP via Auth0).
- **Role-Based Access**: Granular roles (e.g., `{"role": "analytics", "permissions": ["view_metrics"]}`) in `admin_users.metadata`.
- **Implementation**: Enforce password policies (12+ chars, 90-day rotation), track via PostHog (`admin_created`).

### Audit and Logs
- **Audit Logs**: View `audit_logs.action`, `target_table`, `target_id`, filter by action type (e.g., `merchant_suspended`).
- **API Logs**: Monitor `api_logs.route`, `status_code`, `timestamp`, partitioned by `merchant_id`.
- **Import Logs**: Track `import_logs.success_count`, `fail_reason`, including GDPR failures.
- **Implementation**: Append-only `audit_logs` with triggers, partition `api_logs` by `merchant_id`.

### Platform Settings
- **Global Configurations**: Manage `plans`, points expiry (`program_settings.expiry_days`), feature flags (LaunchDarkly).
- **Email Templates**: Edit `email_templates.body` (JSONB, e.g., `{"en": {...}, "es": {...}}`).
- **Integrations**: Monitor health for Shopify (`/admin/api/2025-07/shop.json`), Klaviyo, Twilio, Square (`/v2/payments`), Lightspeed (`/api/2.0/sales`) with 3 retries.
- **Implementation**: Cache settings in Redis, support multilingual templates.

## 2. Implementation Approach
- **Separation**: Host at `admin.herethere.com`, separate from Shopify app.
- **Authentication**: JWT (1-hour expiry, refresh tokens), MFA for superadmins, bcrypt passwords.
- **Tech Stack**:
  - **Backend**: NestJS with GraphQL client (`@shopify/shopify-api`), PostgreSQL (partitioned tables), Redis.
  - **Frontend**: Vite + React, TypeScript, Tailwind CSS, Chart.js.
  - **Database**: Add `merchants.status` (CHECK: `'active', 'suspended', 'trial'`), partition `points_transactions`, `api_logs`, `customer_segments`.
- **Scalability**:
  - Cache metrics in Redis (`metrics:overview:{period}`).
  - Partition tables by `merchant_id` for 10,000+ merchants.
  - Paginate lists for large datasets.
- **Monitoring**: Sentry (errors), Prometheus (performance), PostHog (usage).
- **Security**: IP whitelisting, rate limiting (100 req/min), immutable `audit_logs`, encrypt `api_token`, `email`.
- **Deployment**: Docker Compose, Nginx, feature flags (LaunchDarkly), rollback plan.
- **Deliverable**: Scalable, secure admin module with OpenAPI docs.

## 3. Integration with Existing Stack
- **NestJS Backend**: Add `/api/admin/*` endpoints with GraphQL:
  ```graphql
  query {
    shop { id, name, primaryDomain { url } }
    customers(first: 100) { edges { node { id, email, ordersCount } } }
  }
  ```
- **Frontend**: Share table/chart components, use Storefront API for customer data previews.
- **Database**: Reuse tables, add `merchants.status`, encrypt sensitive fields.
- **Deployment**: Separate containers for admin frontend/backend, route via Nginx.
- **Integrations**: Support Shopify, Klaviyo, Twilio, Square, Lightspeed with retry policies.
- **Deliverable**: Integrated module with Storefront API and additional platforms.

## 4. Security Considerations
- **Authentication**: JWT (1-hour expiry), refresh tokens, MFA via Auth0.
- **Authorization**: Granular roles in `admin_users.metadata`.
- **Audit Trail**: Immutable `audit_logs` with triggers, log data access.
- **API Security**: Rate limit (100 req/min), sanitize inputs, GDPR webhooks (`customers/data_request`, `customers/redact`).
- **Data Privacy**: Encrypt `merchants.api_token`, `customers.email`, mask in UI.
- **Deliverable**: GDPR-compliant, secure module.

## 5. User Experience
- **Simplicity**: Table-heavy UI with multilingual labels, search, filters, pagination.
- **Non-Technical Access**: Docker Compose setup, one-click deployment scripts.
- **Advanced Features**: “Login as merchant” with RBAC, CSV/Excel exports with multilingual headers.
- **Documentation**: Multilingual user guide, GDPR workflows, FAQs.
- **Deliverable**: Multilingual, user-friendly UI.

## 6. Potential Challenges
- **Learning Curve**: Mitigated by AI-generated code, modular NestJS services.
- **Data Volume**: Addressed with partitioning, Redis, pagination for 10,000+ merchants.
- **Security**: Ensured with JWT, MFA, immutable logs.
- **Maintenance**: Simplified with feature flags, automated backups, rollback plan.
- **Deliverable**: Mitigated challenges with Plus-scale testing.

## 7. Documentation & Onboarding
- **User Guide**: Multilingual, with screenshots, GDPR workflows, FAQs (e.g., “How to suspend a merchant”).
- **OpenAPI Docs**: For `/api/admin/*` endpoints.
- **Support**: FAQs for common tasks, troubleshooting scripts.
- **Deliverable**: Comprehensive, multilingual documentation.

## 8. Compliance & Privacy
- **GDPR/CCPA**: Support data export/delete via API, handle Shopify GDPR webhooks.
- **Encryption**: Field-level encryption for `api_token`, `email`.
- **Access Logging**: Log all sensitive data access in `audit_logs`.
- **Deliverable**: GDPR/CCPA-compliant module.

## Summary Table of Key Suggestions
| Area           | Suggestion                                                                 |
|----------------|---------------------------------------------------------------------------|
| Auth/Security  | JWT expiry/refresh, MFA, password policy, rate limiting (100 req/min), immutable logs, encryption |
| Monitoring     | Sentry, Prometheus, PostHog, integration health checks                    |
| UX             | Multilingual UI, bulk actions, login as merchant, CSV/Excel exports        |
| Maintenance    | Feature flags, modular code, automated backups, rollback plan             |
| Docs           | Multilingual guide, OpenAPI docs, GDPR workflows, FAQs                    |
| Compliance     | GDPR/CCPA webhooks, data encryption, access logging                      |