# Roadmap
Herethere Loyalty App

## Phase 1: TVP Development + Internal Admin Module (7 Months)

### Goal
Build a production-grade TVP with **Must Have** features: points earning/redemption, SMS/email referrals, basic RFM analytics (churn risk), Shopify POS integration, checkout extensions (points redemption), automated loyalty email flows, customer data import, and a simplified admin module with multi-user RBAC for Shopify Plus.

### Enhancements & Best Practices
- Generate OpenAPI/Swagger docs for NestJS REST APIs (`/v1/api/*`) and GraphQL schema for Shopify Admin/Storefront APIs.
- Integrate centralized logging (Loki/Grafana) and monitoring (Prometheus, Grafana) on VPS.
- Add health checks and alerting for NestJS, Rust, Redis, PostgreSQL, Nginx.
- Schedule weekly PostgreSQL/Redis backups and quarterly disaster recovery drills.
- Conduct manual exploratory and accessibility (a11y) testing for dashboard, widget, checkout extensions, and admin UI.
- Integrate PostHog for feature usage tracking (e.g., RFM wizard completion, referral popup clicks, checkout extension usage).
- Implement guided onboarding (in-app tooltips, checklists) for merchants, including Shopify Plus-specific workflows (e.g., multi-user setup, checkout extensions).
- Conduct early usability testing of RFM setup wizard, SMS referral popup, and checkout extensions with 5–10 merchants (including 2–3 Shopify Plus).
- Review security practices (OAuth, JWT with refresh tokens, GDPR webhooks, field-level encryption for `customers.email`, `rfm_score`, webhook signature verification) bi-monthly.
- Audit npm, cargo, and Docker dependencies monthly.
- Document infrastructure as code (Docker Compose, Nginx) in GitHub.
- Allocate 10% buffer time for freelancer coordination and AI code review.
- Maintain developer and merchant documentation with screenshots and 1–2 minute videos for key flows (e.g., RFM setup, points configuration, checkout extensions).
- Monitor Shopify API changelogs for versioning updates.

### TVP Features
1. **Welcome Page**:
   - Setup tasks (launch program, add widget to theme, configure points, basic RFM, checkout extensions).
   - Congratulatory messages (e.g., first redemption, first referral).
2. **Program - Points**:
   - Earn: Purchases (1 point/$), signups (200 points), reviews (100 points), birthdays (200 points).
   - Redeem: Discounts (500 points for $5), free shipping (1,000 points), free products (1,500 points), coupons at checkout.
   - Branding: Customizable rewards panel, launcher button, points currency (e.g., "Stars").
   - Status: Enable/disable program.
3. **Program - Referrals**:
   - SMS/email referral popup via Twilio, rewarding referrer/friend (10% off).
   - Dedicated referral page with incentives for both.
   - Track codes in `referrals` table (pending, completed, expired).
4. **Customers**:
   - List with name, email, points balance, RFM segment (e.g., "At-Risk").
   - Search by name/email with pagination.
5. **Analytics**:
   - Metrics: Program members, points transactions, referral ROI, RFM-based churn risk (static thresholds: Recency <90 days, Frequency 1–2, Monetary <$50 for AOV $50).
   - Chart: Bar chart for RFM segments in `AnalyticsPage.tsx` (Chart.js).
6. **On-Site Content**:
   - SEO-friendly loyalty page, rewards panel, launcher button, points display on product/checkout pages.
   - Nudges: Post-purchase prompts, email capture popups.
   - Launchers: Embedded in Shopify checkout and customer accounts.
7. **Settings**:
   - Store details, billing (Free: 300 orders, $29/month: 500 orders, $99/month: 1,500 orders, Enterprise: custom).
   - Branding: Rewards panel customization.
   - RFM: Static thresholds (e.g., Recency 5: <30 days) in `program_settings.rfm_thresholds` (JSONB).
8. **Shopify Integration**:
   - OAuth via `@shopify/shopify-app-express`, GraphQL Admin API for customer/order/discount management, Storefront API for widget features (e.g., points balance, redemption).
   - Webhooks: `orders/create` for points/RFM updates with signature verification.
   - POS: Points earning (1 point/$) via POS API.
   - Checkout UI Extensions: Points redemption at checkout for Shopify Plus.
9. **Other**:
   - Automated loyalty email flows (points earned, redemption reminders) via Twilio/Klaviyo.
   - Data import from Smile.io, LoyaltyLion.
10. **Customer Widget**:
    - React component for points balance, redemption (discounts, free shipping, checkout), SMS/email referral popup, RFM nudges, using Storefront API with locale support.
11. **Internal Admin Module**:
    - Overview: Merchant count, points issued/redeemed, referral ROI, RFM segments (Chart.js).
    - Merchants: List (ID, domain, plan), search, view details, adjust points.
    - Admin Users: Add/edit/delete admins in `admin_users` (bcrypt, JWT with RBAC: admin:full, admin:analytics, admin:support).
    - Logs: View `api_logs`, `audit_logs` for debugging, RFM changes.

### Database Schema
- Tables:
  - `merchants` (with `staff_roles`, `language` JSONB for RBAC and multilingual support)
  - `customers` (with `rfm_score`, `points_balance`, `total_points_earned`, `total_points_redeemed` JSONB)
  - `points_transactions` (with `transaction_id`, `type`, `points`, `source`, `order_id`)
  - `referrals` (with `referral_id`, `advocate_customer_id`, `friend_customer_id`, `status`)
  - `referral_links` (with `referral_link_id`, `referral_code`, `advocate_customer_id`)
  - `rewards` (with `reward_id`, `type`, `points_cost`, `value`)
  - `reward_redemptions` (with `redemption_id`, `customer_id`, `reward_id`, `points_spent`, `discount_code`, `status`)
  - `program_settings` (with `rfm_thresholds`, `config`, `branding`, `points_currency_singular`, `points_currency_plural` JSONB)
  - `shopify_sessions`, `customer_segments` (with `rules` JSONB)
  - `admin_users`, `api_logs`, `audit_logs`, `email_templates`, `email_events`, `import_logs`
- Indexes: `customers(email, merchant_id, rfm_score)`, `points_transactions(customer_id)`, `referrals(merchant_id)`, `referral_links(referral_code)`, `merchants(staff_roles, language)`, `reward_redemptions(customer_id)`
- Partition `points_transactions`, `referrals` for Plus-scale performance.
- Use PostgreSQL with JSONB for configurations; defer MongoDB to Phase 4.

### Tasks
1. **Backend (NestJS/TypeScript)**:
   - APIs:
     - `/v1/api/points/earn`: Award points for actions (purchases, signups, reviews, birthdays).
     - `/v1/api/rewards/redeem`: Redeem points for rewards, issue discount codes.
     - `/v1/api/referrals/create`, `/v1/api/referrals/complete`: Manage referral links and completions.
     - `/v1/api/rfm/segments`: Basic RFM segments, churn risk.
     - `/v1/api/data-import`: Import from Smile.io, LoyaltyLion.
     - `/v1/api/settings/setup`, `/v1/api/points-program`, `/v1/api/referrals/config`, `/v1/api/content`: Merchant configurations.
     - `/v1/api/customers`, `/v1/api/analytics`: Customer management, analytics.
   - GraphQL APIs:
     - Query customers, orders, discounts via Admin API.
     - Query points balance, rewards via Storefront API.
   - Shopify: OAuth, GraphQL Admin API for customers/orders/discounts, Storefront API for widget, `orders/create` webhook with signature verification.
   - Twilio/Klaviyo: SMS/email referrals, notifications via `/v1/api/notifications/send`.
   - GDPR: Implement `/webhooks/customers/data_request`, `/webhooks/customers/redact` with signature verification.
   - Admin APIs: `/admin/overview`, `/admin/merchants`, `/admin/points/adjust`, `/admin/users`, `/admin/logs` with JWT and RBAC.
   - Implement rate-limiting middleware with exponential backoff (2 req/s for REST Admin API, 40 req/s for Plus, 1–4 req/s for Storefront API).
   - Cache points, referrals, RFM scores, webhook idempotency keys in Redis.
   - Use AI (GitHub Copilot, Cursor) for API boilerplate, error handlers, Jest tests; manually review for Shopify compliance.
2. **Backend (Rust/Wasm)**:
   - Shopify Functions: Discounts (amount/percentage off), checkout extensions (points redemption), basic RFM score updates.
   - Use Shopify CLI for testing; generate Rust code and `cargo test` cases with AI.
3. **Frontend (Vite + React)**:
   - Components: `WelcomePage.tsx` (setup tasks, messages), `PointsPage.tsx` (configure earning/redemption), `ReferralsPage.tsx` (SMS/email config), `CustomersPage.tsx` (list, search, pagination), `AnalyticsPage.tsx` (RFM chart), `SettingsPage.tsx` (store, billing, branding, checkout extensions), `CustomerWidget.tsx` (points, referrals, nudges, Storefront API with locale support).
   - On-Site Content: SEO-friendly loyalty page, rewards panel, launcher button, points display, popups, checkout extensions.
   - Admin frontend: Dashboard, merchants, logs, multi-user roles.
   - Use AI for components, Cypress tests; outsource Polaris compliance review ($1,000).
4. **Database**:
   - Apply `herethere_full_schema.sql` with JSONB for `rfm_score`, `rfm_thresholds`, `staff_roles`, `language`, `branding`.
   - Add indexes and partition `points_transactions`, `referrals` for Plus-scale performance.
   - Use AI for SQL optimization.
5. **Deployment**:
   - VPS (Ubuntu with Docker) using Docker Compose for NestJS, PostgreSQL, Redis, Vite + React frontend.
   - Nginx for frontend assets and reverse proxy to NestJS APIs.
   - GitHub Actions for CI/CD with rate limit testing and Shopify API version checks.
   - Provide Docker Compose scripts for VPS setup.
6. **Testing**:
   - Unit: Jest for NestJS APIs, `cargo test` for Rust Functions, Jest for RFM logic.
   - Integration: Shopify (GraphQL Admin/Storefront APIs, POS, checkout extensions), Twilio/Klaviyo, RFM, data import flows (Jest).
   - E2E: Dashboard, widget, popups, RFM UI, checkout extensions (Cypress).
   - Load test: 5,000 customers (Shopify) and 50,000 customers (Plus) with Redis/PostgreSQL.
   - Outsource QA to freelancer ($2,500) for Cypress and exploratory testing.
7. **Shopify App Store**:
   - Optimize listing with demo videos (RFM analytics, SMS referrals, checkout extensions, $29/month pricing, data import).
   - Ensure Polaris, App Bridge, GDPR compliance (encrypt `customers.email`, `rfm_score`, handle GDPR webhooks).

### Timeline
- Month 1–2: Schema, OAuth, GraphQL Admin/Storefront APIs, Points/Referral/RFM REST APIs, webhook signature verification, setup wizard.
- Month 3–4: Vite + React dashboard, widget (Storefront API), admin frontend, RFM chart, on-site content (loyalty page, popups, checkout extensions).
- Month 5–7: POS integration, checkout extensions, Rust Functions, data import, rate limiting, testing, VPS deployment.

### Deliverables
- TVP with **Must Have** features: points earning/redemption, SMS/email referrals, basic RFM analytics, Shopify POS, checkout extensions, email flows, data import.
- Admin module with merchant overview, management, points adjustment, user management, logs, RBAC.
- Shopify (GraphQL Admin/Storefront APIs, POS, checkout extensions), Twilio/Klaviyo integrations.
- Test suite, VPS deployment with Docker and Nginx.
- Merchant documentation with setup guides, videos, and Plus-specific onboarding.

## Phase 2: Core Feature Expansion + Admin Enhancements (4 Months)

### Goal
Add **Should Have** features: VIP tiers, advanced RFM configuration, exit-intent popups, Klaviyo/Mailchimp integration, multi-store point sharing, behavioral segmentation, RFM nudges, activity logs, checkout extensions, and enhance admin module with plan management, integration health, and RFM configuration.

### Enhancements & Best Practices
- Conduct bi-weekly feedback sessions with beta testers (surveys, interviews, PostHog analytics).
- Maintain public changelog for transparency.
- Implement i18n framework with Storefront API locale support for multilingual preparation.
- Add k6 load testing to CI/CD for RFM, VIP tiers, multi-store point sharing, checkout extensions.
- Monitor metrics: RFM wizard completion (80%+), referral conversion (5%+), RFM segment movement (10%+ to higher tiers), checkout extension adoption (85%+ for Plus).
- Define acceptance criteria for outsourced UI/QA work.
- Add PostHog events for Plus-specific features (e.g., `checkout_extension_used`, `multi_store_points_shared`, `rfm_nudge_action`).
- Monitor Shopify API changelogs for versioning updates.

### Features
1. **Program - Referrals**:
   - Configure rewards for referrer/friend (e.g., points, 10% off).
   - Add social sharing (Facebook, Instagram) via referral links.
   - Status toggle (active/disable).
2. **Program - VIP Tiers**:
   - Thresholds: Spending or engagement-based (e.g., Silver: $100+, Gold: $500+).
   - Perks: Early product access, birthday gifts, exclusive discounts, earning multipliers.
   - Track tier changes in `vip_tiers` (with `rfm_criteria` JSONB), notify via email.
3. **Program - Activity**:
   - Display points, referrals, VIP tier changes in logs with customer/date filters.
4. **Analytics**:
   - Reports: Loyalty-driven revenue, redemption rate, RFM tier engagement, repeat purchase rate.
   - Chart.js visualizations for tier engagement.
5. **On-Site Content**:
   - Exit-intent popups, discount banners, point calculators, checkout extensions.
   - Launchers: Apple/Google Wallet integration.
6. **Settings**:
   - Advanced RFM configuration: Thresholds (Recency, Frequency, Monetary), tiers, adjustment frequency (daily/weekly).
   - Setup wizard with pre-filled thresholds (e.g., Recency 5: <30 days, Monetary 5: $250+ for AOV $50).
   - Chart.js preview for segment sizes.
7. **Integrations**:
   - Klaviyo/Mailchimp (REST/GraphQL) for advanced events, email campaigns.
   - Email templates for points, rewards, VIP tiers, referrals.
8. **Other**:
   - Multi-store point sharing for Shopify Plus, using GraphQL Admin API.
   - Behavioral segmentation (e.g., purchase frequency, churn risk).
   - RFM Nudges: Display nudges (e.g., "Stay Active!") in widget based on RFM segments, log interactions in `nudge_events`.
9. **Admin Module Enhancements**:
   - Plan upgrades/downgrades, integration health checks, RFM config management.
   - Admin roles (superadmin, support, analytics) in `admin_users.metadata` and `merchants.staff_roles` (JSONB).

### Database Schema
- Add:
  - `vip_tiers` (with `vip_tier_id`, `threshold_value`, `earning_multiplier`, `perks`, `entry_reward_id` JSONB)
  - `nudges` (with `nudge_id`, `type`, `title`, `description` JSONB, `is_enabled`)
  - `nudge_events` (with `event_id`, `customer_id`, `nudge_id`, `action`)
  - `email_templates` (with `template_id`, `type`, `subject`, `body`)
  - `email_events`, `integrations`
- Indexes: `vip_tiers(merchant_id)`, `email_templates(merchant_id)`, `nudges(merchant_id)`, `nudge_events(customer_id)`
- Sync RFM configs to `customer_segments`, `vip_tiers`.
- Partition `points_transactions`, `referrals`, `vip_tiers` for Plus-scale performance.

### Tasks
1. **Backend (NestJS/TypeScript)**:
   - APIs:
     - `/v1/api/referrals` (social sharing), `/v1/api/vip-tiers`, `/v1/api/vip-tiers/status`, `/v1/api/vip-tiers/update`
     - `/v1/api/rfm/config`, `/v1/api/nudges`, `/v1/api/nudges/action`
     - `/v1/api/activity`, `/v1/api/analytics` (advanced reports)
     - `/v1/api/content` (exit-intent popups, checkout extensions)
   - GraphQL APIs: Multi-store point sharing, RFM updates via Admin API.
   - Integrations: Klaviyo/Mailchimp/Yotpo APIs for RFM notifications, email campaigns.
   - Cache VIP tiers, RFM configs, nudges, webhook idempotency keys in Redis.
   - Use AI for code, Jest tests; manually review.
2. **Backend (Rust/Wasm)**:
   - Shopify Functions: VIP multipliers, real-time RFM tier updates, checkout extensions.
   - Generate Rust code, `cargo test` cases with AI.
3. **Frontend (Vite + React)**:
   - Pages: `ReferralsPage.tsx` (social sharing), `VIPPage.tsx` (tiers), `RFMConfigPage.tsx` (thresholds, wizard), `ActivityPage.tsx`, `IntegrationsPage.tsx`, `CheckoutExtensions.tsx`.
   - Update `AnalyticsPage.tsx` with RFM tier reports, segment previews.
   - On-Site Content: Exit-intent popups, discount banners, point calculators, checkout extensions.
   - Admin frontend: Plan management, RFM config view, integration health, multi-user roles.
   - Use AI for components, Cypress tests; outsource Polaris review ($1,000).
4. **Database**:
   - Add tables for VIP tiers, nudges, email templates, integrations.
   - Optimize indexes for RFM, VIP, nudge queries; partition tables for Plus-scale performance.
   - Use AI for SQL optimization.
5. **Testing**:
   - Unit: Jest for APIs, RFM/VIP/nudge logic.
   - Integration: Klaviyo/Mailchimp/Yotpo, RFM tier updates, checkout extensions, multi-store point sharing.
   - E2E: RFM UI, popups, admin roles, checkout extensions, nudges (Cypress).
   - Load test: 5,000+ customers (Shopify) and 50,000+ customers (Plus) with Redis caching.
   - Outsource QA to freelancer ($2,500) for Cypress and exploratory testing.
6. **Deployment**:
   - Optimize Redis caching for RFM, VIP, analytics, nudges, webhook idempotency on VPS.
   - Plan AWS ECS migration for future scaling.

### Timeline
- Month 8–9: Social referrals, VIP tiers, Klaviyo/Mailchimp integration, multi-store point sharing, RFM nudges.
- Month 10–11: Advanced RFM config, activity logs, exit-intent popups, checkout extensions, admin enhancements.

### Deliverables
- **Should Have** features: Social referrals, VIP tiers, advanced RFM, Klaviyo/Mailchimp, exit-intent popups, behavioral segmentation, multi-store point sharing, RFM nudges, activity logs, checkout extensions.
- Enhanced admin module with RFM config, plan management, integration health, RBAC.
- Updated test suite, VPS deployment with Docker and Nginx.
- Merchant documentation with RFM setup, integration, and Plus-specific onboarding guides.

## Phase 3: Advanced Features and Integrations + Admin Polish (4 Months)

### Goal
Add **Could Have** features: bonus campaigns, gamification, multilingual support, non-Shopify POS, advanced analytics, developer toolkit with webhook-based integrations, sticky bar, advanced reports export, and finalize admin module.

### Enhancements & Best Practices
- Implement load balancer and stateless services for horizontal scaling.
- Overlap testing with Phase 2 feedback to iterate on RFM, referrals, checkout extensions, and nudges.
- Set go/no-go milestone: TVP must achieve 90% merchant satisfaction, 5%+ referral conversion, 85%+ checkout extension adoption for Plus.
- Monitor API latency, error rates, and database performance with Grafana dashboards.
- Conduct accessibility (a11y) and localization testing for widget and dashboard, leveraging Storefront API locale support.
- Monitor Shopify API changelogs for versioning updates.

### Features
1. **Bonus Campaigns**:
   - Types: Time-sensitive promotions, goal spend, points multipliers, limited-time bonuses.
   - Conditions: Scheduled via no-code dashboard, tied to purchases.
2. **Gamification**:
   - Badges, leaderboards in widget, using Storefront API.
3. **On-Site Content**:
   - Rewards Sticky Bar, checkout extensions, point calculators.
4. **Integrations**:
   - Non-Shopify POS: Square (Payments API), Lightspeed (Retail API) for points earning/redemption.
   - Gorgias (REST), Yotpo Reviews & UGC (REST/GraphQL), Postscript (REST), Shopify Flow.
   - Webhook-based custom integrations for Shopify Plus (ERP/CRM).
5. **Settings**:
   - Multilingual widget (10+ languages with customizable text, synced with `merchants.language` via Storefront API).
   - Multi-currency discounts.
   - Developer toolkit for Shopify metafields.
6. **Analytics**:
   - Advanced reports (25+ metrics: ROI, customer behavior, redemption rates).
   - Comparisons with similar stores.
   - Export RFM segments, revenue data as CSV.
7. **Admin Module**:
   - Platform settings, integration health, RFM segment export.
   - Advanced analytics dashboard (Chart.js).

### Database Schema
- Add:
  - `bonus_campaigns` (with `campaign_id`, `type`, `multiplier`, `start_date`, `end_date`, `conditions` JSONB)
  - `gamification_achievements` (with `achievement_id`, `customer_id`, `badge`, `created_at`)
  - `nudges`, `nudge_events`
- Indexes: `bonus_campaigns(merchant_id)`, `nudges(merchant_id)`, `nudge_events(customer_id)`, `gamification_achievements(customer_id)`
- Update `merchants.language` for multilingual support.
- Partition `points_transactions`, `referrals`, `vip_tiers` for Plus-scale performance.

### Tasks
1. **Backend (NestJS/TypeScript)**:
   - APIs:
     - `/v1/api/campaigns`, `/v1/api/campaigns/apply`
     - `/v1/api/gamification/action`, `/v1/api/gamification/leaderboard`
     - `/v1/api/nudges`, `/v1/api/nudges/action`
     - `/v1/api/integrations`, `/v1/api/settings/developer`, `/v1/api/analytics/export`
   - Integrations: Gorgias, Yotpo, Postscript, Square (Payments API), Lightspeed (Retail API), webhook-based ERP/CRM.
   - Use AI for code, Jest tests.
2. **Backend (Rust/Wasm)**:
   - Shopify Functions: Campaign discounts, gamification rewards, checkout extensions.
3. **Frontend (Vite + React)**:
   - Pages: `CampaignsPage.tsx`, `GamificationPage.tsx`, `SettingsPage.tsx` (multilingual, developer tools), `AnalyticsPage.tsx` (advanced reports, export).
   - On-Site Content: Sticky Bar, checkout extensions, point calculators.
   - Admin frontend: Integration health, RFM export, multi-user roles.
   - Use Storefront API for multilingual widget content, language dropdown.
   - Use AI for components, Cypress tests; outsource Polaris review ($1,000).
4. **Testing**:
   - Unit: Jest for APIs, campaign/gamification/nudge logic.
   - Integration: Non-Shopify POS (Square, Lightspeed), Gorgias/Yotpo, webhook-based integrations.
   - E2E: Multilingual widget, advanced analytics, checkout extensions, sticky bar (Cypress).
   - Load test: 10,000 customers (Shopify) and 50,000 customers (Plus).
5. **Deployment**:
   - VPS with Docker, Nginx, Cloudflare CDN for multilingual content.
   - Optimize PostgreSQL with partitioning for `points_transactions`, `referrals`, `vip_tiers`.

### Timeline
- Month 12–13: Bonus campaigns, gamification, sticky bar, webhook-based integrations.
- Month 14–15: Non-Shopify POS, multilingual support, advanced analytics, developer toolkit, RFM export.

### Deliverables
- **Could Have** features: Bonus campaigns, gamification, multilingual widget, non-Shopify POS, advanced analytics, developer toolkit, sticky bar, RFM export.
- Polished admin module with integration health, RFM export, RBAC.
- Updated test suite, VPS deployment with CDN.
- Merchant documentation with multilingual, campaign, and Plus-specific guides.

## Phase 4: Optimization and Scaling (3 Months)

### Goal
Scale for 5,000+ merchants (50,000+ customers for Plus), achieve Built for Shopify certification, iterate based on feedback.

### Enhancements & Best Practices
- Test against Shopify API sandbox to catch breaking changes.
- Monitor Shopify developer changelogs and webhooks for API versioning updates.
- Maintain runbook for Docker, Nginx, Redis restarts on VPS.
- Validate PostgreSQL/Redis backups monthly.
- Iterate on RFM usability, SMS referrals, checkout extensions, gamification, and nudges based on PostHog analytics (e.g., `checkout_extension_used`, `multi_store_points_shared`, `rfm_nudge_action`).

### Tasks
1. **Optimization**:
   - NestJS: Optimize APIs with async/await for concurrency, GraphQL for complex queries.
   - Rust: Transition RFM analytics to Rust for performance.
   - Redis: Cache points, referrals, RFM, gamification, nudges, webhook idempotency keys.
   - PostgreSQL: Partition `points_transactions`, `referrals`, `vip_tiers`.
2. **Analytics Enhancements**:
   - RFM reports (tier engagement, redemption rate, churn reduction) with Chart.js.
3. **Shopify Certification**:
   - Ensure Polaris, GDPR compliance, load test for 5,000+ customers (50,000+ for Plus).
4. **User Feedback**:
   - Iterate on RFM wizard, SMS referrals, checkout extensions, gamification, nudges with 20–30 merchants (including 5–7 Plus).
5. **Marketing**:
   - Promote via Shopify Reddit/Discord, ads, case studies (e.g., 15% churn reduction, 10% referral conversion, 20% checkout extension adoption).
6. **VPS Maintenance**:
   - Monitor Docker containers, Nginx, Redis performance.
   - Update Docker Compose scripts for new features.

### Timeline
- Month 16–18: Optimization, certification, feedback iteration.

### Deliverables
- Scalable infrastructure for 5,000+ merchants (50,000+ customers for Plus) on VPS.
- Advanced RFM analytics with detailed reports.
- Built for Shopify certification application.
- Marketing strategy for 100+ merchants (including 5–10 Plus).
- Updated VPS maintenance and Plus-specific onboarding guides.

## Full Roadmap Timeline
- Phase 1: 7 months
- Phase 2: 4 months
- Phase 3: 4 months
- Phase 4: 3 months
- **Total**: 18 months

## Success Metrics
- **Phase 1**: 90% merchant satisfaction in beta, 80% RFM wizard completion, 5%+ SMS referral conversion, 85%+ checkout extension adoption for Plus.
- **Phase 2**: 10%+ RFM tier engagement, 5%+ social referral conversion, 50%+ multi-store point sharing adoption, 10%+ nudge interaction rate for Plus.
- **Phase 3**: 20%+ repeat purchase increase, 15%+ gamification engagement, 80%+ multilingual widget adoption.
- **Phase 4**: 100+ merchants (including 5–10 Plus) in 6 months, 4.5+ star rating, Built for Shopify certification in 12 months.

## Next Steps
- **Month 1 Sprint**:
  - Set up PostgreSQL with `herethere_full_schema.sql` (JSONB fields, indexes, partitioning).
  - Implement Shopify OAuth using `@shopify/shopify-app-express` and GraphQL Admin/Storefront APIs in NestJS.
  - Generate `/v1/api/points/earn`, `/v1/api/rewards/redeem`, `/v1/api/referrals/create`, `/v1/api/referrals/complete`, `/v1/api/rfm/segments`, `/v1/api/settings/setup` APIs, GraphQL queries, and Jest tests with AI; review manually.
  - Implement webhook signature verification for `orders/create`, GDPR webhooks (`/webhooks/customers/data_request`, `/webhooks/customers/redact`).
  - Join Shopify Reddit/Discord to recruit 5–10 beta testers (including 2–3 Plus).
  - Set up VPS with Docker, Nginx, GitHub Actions for CI/CD.
- **Seek Feedback**: Share TVP prototype with 3–5 merchants (including 1–2 Plus) by Month 3, focusing on RFM usability, SMS referral effectiveness, checkout extension adoption, and setup wizard experience.
- **Learning Plan**: Complete 2-hour NestJS (e.g., NestJS Crash Course), Vite + React (e.g., freeCodeCamp), and Shopify GraphQL API (e.g., Shopify Dev Tutorials) tutorials in Week 1 to understand AI-generated code.

## Ongoing Best Practices & Metrics
- Maintain up-to-date developer and merchant documentation with videos, including Plus-specific guides.
- Publish public changelog for transparency.
- Monitor API latency, error rates, database performance via Grafana.
- Review Shopify security/API best practices and changelogs monthly for versioning updates.
- Plan for Kubernetes migration as merchant count exceeds 5,000.
- Track PostHog metrics: RFM wizard completion, referral conversion, tier engagement, checkout extension adoption, nudge interactions.
- Optimize PostgreSQL (partitioning) and Redis (cache invalidation).
- Document infrastructure as code (Docker Compose, Nginx).
- Set up Grafana dashboards for real-time monitoring.
- Conduct monthly security/dependency audits.
- Ensure accessibility (a11y) and localization for all user-facing features, leveraging Storefront API.
- Maintain runbook for VPS operations (e.g., Docker restarts, Redis failover).