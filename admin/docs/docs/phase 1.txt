```
Phase 1 Task Plan for LoyalNest App

## Overview
This 6-week plan builds a Minimum Viable Product (MVP) for the LoyalNest App, a Shopify loyalty app supporting 100–50,000+ customers and 1,000 orders/hour. It covers points earning/redemption, referrals, merchant dashboard, customer widget, admin module basics, GDPR/CCPA compliance, and multilingual support (`en`, `es`, `fr`). The plan aligns with `Technical Specifications.markdown` (artifact_id: `c2cd4d95-b4f0-4dab-b340-97fed28c6c1f`), `docker.txt` (artifact_id: `9aec6427-8e3c-463a-a0ae-96c57bc2e576`), `Wireframes.txt` (artifact_id: `f9d79d8e-fed3-4baa-8b3f-559f91b29ec2`), `schema.txt` (artifact_id: `11afb340-73c5-4e4c-81e1-f6e37ff2d6c5`), `RFM.txt` (artifact_id: `751121e8-8fa6-4888-9904-7313c14683db`), `feature_analytics.txt` (artifact_id: `d4980eb7-0599-4917-a9f3-da81f747f3b8`), `user_stories.markdown` (artifact_id: `87a844dd-d902-4a1f-963f-4e31cf00ccd6`), `Flow Diagram.txt` (artifact_id: `5613982f-eae0-48e0-a0fc-36c27415e8a3`), `ERD.txt` (artifact_id: `bf6eb50c-fa5a-40a9-8981-788f175dd68f`), and `Sequence Diagrams.txt` (artifact_id: `1bdfbb54-f9f3-4a6d-9697-3fecd54da1b0`). Designed for a solo beginner developer using Docker, Git, VS Code, and AI assistance (Grok, GitHub Copilot).

**Features**:
- **Merchant Dashboard**: Welcome Page (US-MD1), Points Program (US-MD2), Referrals Program (US-MD3), Customers (US-MD4), Analytics (US-MD5), Settings (US-MD6), Notification Templates (US-MD8), Rate Limits (US-AM11).
- **Customer Widget**: Points balance/redemption (US-CW1–CW2), referral status/popup (US-CW5, US-CW7), GDPR form (US-CW8).
- **Admin Module**: Overview, Merchants, Admin Users, Logs, Rate Limits (US-AM1–AM5, US-AM11).
- **Backend**: Points earning (10 points/$), redemption (500 points for $5 off, campaign discounts US-BI4), referrals (US-BI2, US-CW7), customer import (US-BI3), RFM preview (US-MD12), Shopify OAuth, webhooks (orders/create, customers/data_request, customers/redact), GDPR compliance (US-AM6).
- **Tech Stack**: NestJS (microservices: Points, Referrals, Analytics, Admin, Auth, Frontend), Vite + React, Shopify Polaris, Tailwind CSS, PostgreSQL (`schema.sql`, `pgx`), Redis (caching, Streams), Bull (queues), Klaviyo/Postscript, PostHog, Shopify App Bridge, Docker, gRPC.

**Goals**:
- Deploy functional MVP on Ubuntu VPS.
- Validate with 1–2 beta merchants.
- Prepare for Shopify App Store submission.
- Minimize technical debt for a beginner.

**Duration**: 6 weeks (20–30 hours/week), with weekly sprints.

**Tools**:
- Git (GitHub) for version control.
- Docker (`docker-compose.yml`) for local/VPS deployment.
- VS Code with TypeScript, Prettier, ESLint.
- Trello/Notion for task tracking.

## 6-Week Task Breakdown

### Week 1: Project Setup and Database
**Goal**: Set up repository, microservices structure, Docker, and PostgreSQL.
**Tasks**:
1. **Set Up Repository**:
   - Initialize: `git init LoyalNest-app`.
   - Create folders: `points/`, `referrals/`, `analytics/`, `admin/`, `auth/`, `frontend/`, `docs/`.
   - Add `.gitignore`: Ignore `node_modules`, `.env`, `dist`.
   - Push to GitHub: `git push origin main`.
2. **Set Up Docker**:
   - Follow `docker.txt` (artifact_id: `9aec6427-8e3c-463a-a0ae-96c57bc2e576`) to install Docker/Docker Compose.
   - Create `.env` with Shopify, Klaviyo, Postscript, PostHog, JWT keys.
   - Create minimal `docker-compose.yml` with PostgreSQL, Redis, Bull.
   - Test: `docker-compose up --build`, verify containers.
3. **Set Up PostgreSQL**:
   - Apply `schema.sql` with `CREATE EXTENSION pgcrypto` and tables (`merchants`, `customers`, `points_transactions`, `rewards`, `referral_links`, `program_settings`, `email_templates`, `gdpr_requests`, `rfm_segment_counts`).
   - Add indexes: `idx_customers_email`, `idx_points_transactions_customer_id`, `idx_referrals_notification_status`, `idx_rfm_segment_counts`.
   - Add `init.sql` for `rfm_segment_counts` materialized view.
   - Test: Connect via `psql`, insert test data (`INSERT INTO merchants (merchant_id, shopify_domain) VALUES ('m1', 'test.myshopify.com');`).
4. **Set Up Microservices**:
   - Initialize NestJS projects: `npx @nestjs/cli new points`, `referrals`, `analytics`, `admin`, `auth`.
   - Install dependencies: `npm i @nestjs/typeorm typeorm pgx @nestjs/config @nestjs/grpc @shopify/shopify-app-express klaviyo-sdk postscript-sdk posthog-node bull`.
   - Configure TypeORM and gRPC in each microservice’s `app.module.ts`.
   - Test: Run `npm run start:dev` in `points/`, verify `/health` endpoint.
5. **Set Up Frontend**:
   - Initialize Vite: `npm create vite@latest frontend -- --template react-ts`.
   - Install: `npm i @shopify/polaris @shopify/app-bridge-react tailwindcss postcss autoprefixer react-i18next`.
   - Configure Tailwind CSS and i18next in `frontend/src/index.css`.
   - Test: Run `npm run dev`, verify `http://localhost:5173`.
6. **Document Setup**:
   - Save in `docs/setup.md`.
   - Update `README.md` with setup instructions.

**Deliverables**:
- GitHub repository with microservices and frontend.
- Running Docker containers (PostgreSQL, Redis, Bull).
- Initialized microservices and frontend.
- `schema.sql`, `init.sql` applied with test data.

**AI Assistance**:
- Request: “Generate NestJS `app.module.ts` for TypeORM and gRPC.”
- Request: “Set up i18next for Vite + React with `en`, `es`, `fr`.”

### Week 2: Shopify Integration and Points Microservice
**Goal**: Implement Shopify OAuth, webhooks, and Points microservice APIs.
**Tasks**:
1. **Shopify OAuth (Auth Microservice)**:
   - Configure `@shopify/shopify-app-express` in `auth/src/app.module.ts`.
   - Implement `AuthController` with `/auth/login`, `/auth/callback` (gRPC: `/auth.v1/Login`).
   - Store sessions in `shopify_sessions` table.
   - Test: Authenticate with test store (`test.myshopify.com`).
2. **Webhooks (Points Microservice)**:
   - Register webhooks (`orders/create`, `customers/data_request`, `customers/redact`) via Shopify CLI.
   - Create `WebhookController` for `orders/create` (gRPC: `/points.v1/HandleOrderWebhook`).
   - Example:
     ```typescript
     @Post('webhooks/orders/create')
     async handleOrderWebhook(@Body() body: { id: string; total_price: string; customer: { id: string } }) {
       const points = parseFloat(body.total_price) * 10;
       await this.pointsService.create({ customer_id: body.customer.id, points, type: 'earn' });
       await this.posthog.capture('points_earned', { customer_id: body.customer.id, points });
       return { status: 'success' };
     }
     ```
   - Test: Simulate webhook, verify `points_transactions` insert.
3. **Points APIs (Points Microservice)**:
   - Create `PointsController` with `POST /api/points/earn`, `POST /api/points/redeem` (gRPC: `/points.v1/EarnPoints`, `/points.v1/RedeemPoints`).
   - Support campaign discounts (`US-BI4`).
   - Example:
     ```typescript
     @Post('redeem')
     async redeemPoints(@Body() body: { customer_id: string; reward_id: string; campaign_id?: string }) {
       const customer = await this.customerService.findOne(body.customer_id);
       const reward = await this.rewardService.findOne(body.reward_id);
       if (customer.points_balance < reward.points_cost) throw new HttpException('Insufficient points', 400);
       await this.typeOrm.query('BEGIN');
       await this.pointsService.create({ customer_id: body.customer_id, points: -reward.points_cost, type: 'redeem' });
       await this.rewardRedemptionService.create({ customer_id: body.customer_id, reward_id: body.reward_id, campaign_id: body.campaign_id });
       await this.typeOrm.query('COMMIT');
       await this.posthog.capture('points_redeemed', { customer_id: body.customer_id, reward_type: reward.type });
       return { discount_code: 'LOYALTY_abc123' };
     }
     ```
   - Test: Use Postman, verify `points_transactions`, `reward_redemptions`.
4. **Redis Caching**:
   - Cache points balances (`points:{customer_id}`), settings (`config:{merchant_id}`).
   - Example:
     ```typescript
     async getPoints(customerId: string) {
       const cached = await this.redis.get(`points:${customerId}`);
       if (cached) return parseInt(cached);
       const customer = await this.customerService.findOne(customerId);
       await this.redis.set(`points:${customerId}`, customer.points_balance, 'EX', 3600);
       return customer.points_balance;
     }
     ```
5. **Unit Tests**:
   - Write Jest tests for `PointsController`.
   - Example:
     ```typescript
     it('should throw 400 for insufficient points', async () => {
       await expect(controller.redeemPoints({ customer_id: 'c1', reward_id: 'r1' }))
         .rejects.toThrow('Insufficient points');
     });
     ```
6. **Document APIs**:
   - Update `docs/api.md` with `/api/points/*` endpoints.

**Deliverables**:
- Shopify OAuth and webhooks in Auth/Points microservices.
- Functional `PointsController` with gRPC.
- Redis caching for points/settings.
- Jest tests for Points APIs.
- Updated `docs/api.md`.

**AI Assistance**:
- Request: “Generate NestJS `AuthController` for Shopify OAuth.”
- Request: “Write Jest tests for `/points.v1/RedeemPoints`.”

### Week 3: Merchant Dashboard (Core Pages)
**Goal**: Build Merchant Dashboard with Welcome, Points, Settings, Notification Templates, and Rate Limits.
**Tasks**:
1. **Welcome Page (`WelcomePage.tsx`)**:
   - Use Polaris `FormLayout`, `Checkbox` for setup tasks (launch program, add widget, configure points).
   - Reference `Wireframes.txt` (Welcome Page).
   - Example:
     ```jsx
     import { Page, FormLayout, Checkbox } from '@shopify/polaris';
     import { useTranslation } from 'react-i18next';
     const WelcomePage = () => {
       const { t } = useTranslation();
       return (
         <Page title={t('welcome')}>
           <FormLayout>
             <Checkbox label={t('launch_program')} aria-label={t('launch_program')} />
             <Checkbox label={t('add_widget')} aria-label={t('add_widget')} />
           </FormLayout>
         </Page>
       );
     };
     ```
   - Test: Run `npm run dev`, verify UI.
2. **Points Program (`PointsPage.tsx`)**:
   - Use Polaris `TextField`, `Button` for earning rules (10 points/$) and redemption options (500 points for $5 off, campaign discounts).
   - Call `/api/points/settings` (gRPC: `/points.v1/UpdateSettings`).
   - Reference `Wireframes.txt` (Points Program).
3. **Settings (`SettingsPage.tsx`)**:
   - Use Polaris `Form` for store details and branding.
   - Reference `Wireframes.txt` (Settings).
4. **Notification Templates (`NotificationTemplatePage.tsx`, US-MD8)**:
   - Use Polaris `TextField` for multilingual templates (`en`, `es`, `fr`).
   - Call `/api/notifications/template` (gRPC: `/admin.v1/UpdateNotificationTemplate`).
   - Example:
     ```jsx
     import { Card, TextField, Button } from '@shopify/polaris';
     import { useTranslation } from 'react-i18next';
     const NotificationTemplatePage = ({ template }) => {
       const { t } = useTranslation();
       const [body, setBody] = useState(template.body.en);
       const handleSave = async () => {
         await axios.post('/api/notifications/template', { type: template.type, body: { en: body } });
         posthog.capture('template_edited', { template_type: template.type });
       };
       return (
         <Card sectioned>
           <TextField
             label={t('template_body')}
             value={body}
             onChange={setBody}
             aria-label={t('template_body')}
           />
           <Button onClick={handleSave} aria-label={t('save_template')}>
             {t('save')}
           </Button>
         </Card>
       );
     };
     ```
5. **Rate Limits (`RateLimitPage.tsx`, US-AM11)**:
   - Use Polaris `Text` to display Shopify API, Klaviyo, Postscript rate limits.
   - Call `/api/rate-limits` (gRPC: `/admin.v1/GetRateLimits`).
   - Reference `Wireframes.txt` (Rate Limits).
6. **Shopify App Bridge**:
   - Integrate App Bridge with i18next for `en`, `es`, `fr`.
   - Example:
     ```jsx
     import { Provider } from '@shopify/app-bridge-react';
     import i18n from 'i18next';
     import { initReactI18next } from 'react-i18next';
     i18n.use(initReactI18next).init({ resources: { en: {}, es: {}, fr: {} }, lng: 'en' });
     const App = () => (
       <Provider config={{ apiKey: import.meta.env.VITE_SHOPIFY_API_KEY, host: new URLSearchParams(window.location.search).get('host') }}>
         <WelcomePage />
       </Provider>
     );
     ```
7. **Cypress Tests**:
   - Test UI interactions (checkboxes, form submissions).
   - Example:
     ```javascript
     describe('Points Page', () => {
       it('saves points settings', () => {
         cy.visit('/points');
         cy.get('[aria-label="Points per dollar"]').type('10');
         cy.get('[aria-label="Save"]').click();
         cy.get('.success-message').should('contain', 'Settings saved');
       });
     });
     ```
8. **Document Frontend**:
   - Update `docs/frontend.md` with component details.

**Deliverables**:
- Functional `WelcomePage.tsx`, `PointsPage.tsx`, `SettingsPage.tsx`, `NotificationTemplatePage.tsx`, `RateLimitPage.tsx`.
- App Bridge and i18next integration.
- Cypress tests for UI.
- Updated `docs/frontend.md`.

**AI Assistance**:
- Request: “Generate Polaris-compliant `NotificationTemplatePage.tsx` with i18next.”
- Request: “Write Cypress tests for Points Page.”

### Week 4: Customer Widget and Referrals Microservice
**Goal**: Build Customer Widget with points, referrals, GDPR form, and Referrals microservice.
**Tasks**:
1. **Customer Widget (`CustomerWidget.tsx`)**:
   - Use Tailwind CSS for points balance, redemption, referral status, GDPR form.
   - Reference `Wireframes.txt` (Customer Widget).
   - Example:
     ```jsx
     import { Button, Modal } from '@shopify/polaris';
     import { useTranslation } from 'react-i18next';
     const CustomerWidget = ({ points, referrals }) => {
       const { t } = useTranslation();
       return (
         <div className="sm:p-4 md:p-6 bg-white rounded shadow" aria-label={t('customer_widget')}>
           <h2>{t('points_balance')}: {points} {t('points')}</h2>
           <Button onClick={() => axios.post('/api/points/redeem')} aria-label={t('redeem_500_points')}>
             {t('redeem')} $5 Off
           </Button>
           <Button onClick={() => axios.get('/api/referral/status')} aria-label={t('view_referrals')}>
             {t('referrals')}
           </Button>
         </div>
       );
     };
     ```
2. **Referral APIs (Referrals Microservice)**:
   - Create `ReferralController` with `POST /api/referral` (gRPC: `/referrals.v1/CreateReferral`), `GET /api/referral/status` (gRPC: `/referrals.v1/GetReferralStatus`).
   - Use Bull queue for Klaviyo/Postscript notifications (`US-BI2`).
   - Example:
     ```typescript
     @Post('referral')
     async createReferral(@Body() body: { customer_id: string; merchant_id: string }) {
       const referral = await this.referralService.create(body);
       const queue = this.bullQueue('notifications');
       await queue.add('referral', { customer_id: body.customer_id, method: 'sms' });
       await this.posthog.capture('referral_created', { customer_id: body.customer_id });
       return { referral_code: referral.referral_code };
     }
     ```
3. **Referral Popup and Status**:
   - Add `ReferralPopup.tsx` and `ReferralStatus.tsx` for SMS/email invites and status (`US-CW7`).
   - Example:
     ```jsx
     import { Modal } from '@shopify/polaris';
     import { useTranslation } from 'react-i18next';
     const ReferralStatus = ({ referrals }) => {
       const { t } = useTranslation();
       return (
         <div className="p-4" aria-label={t('referral_status')}>
           {referrals.map(r => (
             <p key={r.referral_code}>{r.referral_code}: {t(r.status)}</p>
           ))}
         </div>
       );
     };
     ```
4. **GDPR Form (`GDPRRequestForm.tsx`, US-CW8)**:
   - Add form for data/redaction requests.
   - Call `/api/gdpr/request` (gRPC: `/admin.v1/SubmitGDPRRequest`).
   - Example:
     ```jsx
     import { Button } from '@shopify/polaris';
     import { useTranslation } from 'react-i18next';
     const GDPRRequestForm = () => {
       const { t } = useTranslation();
       const handleSubmit = async (type) => {
         await axios.post('/api/gdpr/request', { request_type: type });
         posthog.capture('gdpr_request_submitted', { request_type: type });
       };
       return (
         <div className="p-4" aria-label={t('gdpr_request')}>
           <Button onClick={() => handleSubmit('data_request')} aria-label={t('request_data')}>
             {t('request_data')}
           </Button>
         </div>
       );
     };
     ```
5. **Accessibility**:
   - Add ARIA labels, keyboard navigation, high-contrast mode via Tailwind.
6. **Cypress Tests**:
   - Test widget interactions (redemption, referral popup, GDPR form).
   - Example:
     ```javascript
     describe('Customer Widget', () => {
       it('submits GDPR request', () => {
         cy.visit('/widget');
         cy.get('[aria-label="Request data"]').click();
         cy.get('.success-message').should('contain', 'Request submitted');
       });
     });
     ```
7. **Document Widget**:
   - Update `docs/frontend.md` with widget components.

**Deliverables**:
- Functional `CustomerWidget.tsx`, `ReferralPopup.tsx`, `ReferralStatus.tsx`, `GDPRRequestForm.tsx`.
- `ReferralController` with Klaviyo/Postscript integration.
- Accessibility features (ARIA, high-contrast).
- Cypress tests for widget.
- Updated `docs/frontend.md`.

**AI Assistance**:
- Request: “Generate Tailwind-styled `GDPRRequestForm.tsx` with i18next.”
- Request: “Write a NestJS `ReferralController` with Bull queue.”

### Week 5: Admin and Analytics Microservices
**Goal**: Build Admin/Analytics microservices with RFM preview, customer import, and GDPR compliance.
**Tasks**:
1. **Admin Module (`AdminOverview.tsx`, `AdminMerchants.tsx`, `RateLimitPage.tsx`)**:
   - Use Polaris for Overview (merchant count, points issued), Merchants (list with ID, domain, plan), Rate Limits (`US-AM11`).
   - Reference `Wireframes.txt` (Admin Overview, Merchants, Rate Limits).
   - Example:
     ```jsx
     import { Page, DataTable } from '@shopify/polaris';
     import { useTranslation } from 'react-i18next';
     const AdminMerchants = ({ merchants }) => {
       const { t } = useTranslation();
       return (
         <Page title={t('merchants')}>
           <DataTable
             columnContentTypes={['text', 'text', 'text']}
             headings={[t('id'), t('domain'), t('plan')]}
             rows={merchants.map(m => [m.id, m.domain, m.plan])}
           />
         </Page>
       );
     };
     ```
2. **RBAC (Auth Microservice)**:
   - Implement RBAC in `AuthController` using `merchants.staff_roles` JSONB (gRPC: `/auth.v1/CheckAccess`).
   - Example:
     ```typescript
     @Get('admin')
     @UseGuards(RBACGuard)
     async getAdminData(@Req() req: Request) {
       return this.adminService.getOverview(req.user);
     }
     ```
3. **GDPR Webhooks (Admin Microservice)**:
   - Implement `WebhookController` for `customers/data_request`, `customers/redact` (gRPC: `/admin.v1/HandleGDPRWebhook`).
   - Store in `gdpr_requests` with `retention_expires_at` (90 days).
   - Example:
     ```typescript
     @Post('webhooks/gdpr')
     async handleGDPRWebhook(@Body() body: { topic: string; customer_id: string }) {
       await this.gdprService.createRequest({ customer_id: body.customer_id, type: body.topic.split('/')[1], retention_expires_at: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000) });
       await this.posthog.capture('gdpr_request_submitted', { customer_id: body.customer_id });
       return { status: 'success' };
     }
     ```
4. **Customer Import (Admin Microservice, US-BI3)**:
   - Implement `POST /api/customers/import` (gRPC: `/admin.v1/ImportCustomers`).
   - Parse CSV, insert into `customers` with `pgcrypto` for `email`.
   - Example:
     ```typescript
     @Post('customers/import')
     async importCustomers(@Body() body: { file: string }) {
       const customers = parseCSV(body.file);
       await this.typeOrm.query('BEGIN');
       for (const c of customers) {
         await this.customerService.create({ email: await this.encrypt(c.email), ...c });
       }
       await this.typeOrm.query('COMMIT');
       await this.posthog.capture('customer_import_initiated', { count: customers.length });
       return { imported_count: customers.length };
     }
     ```
5. **RFM Analytics (Analytics Microservice, US-MD12)**:
   - Implement `GET /api/admin/analytics` (gRPC: `/analytics.v1/GetAnalytics`) with `rfm_segment_counts`.
   - Cache in Redis Streams (`rfm:preview:{merchant_id}`).
   - Example:
     ```typescript
     @Get('analytics')
     async getAnalytics(@Query() query: { start_date: string; end_date: string }) {
       const segments = await this.typeOrm.query('SELECT * FROM rfm_segment_counts');
       await this.redis.xadd(`rfm:preview:${query.merchant_id}`, '*', 'segments', JSON.stringify(segments));
       await this.posthog.capture('analytics_viewed', { merchant_id: query.merchant_id });
       return segments;
     }
     ```
6. **Unit Tests**:
   - Write Jest tests for GDPR, RBAC, customer import, RFM analytics.
   - Example:
     ```typescript
     it('imports customers from CSV', async () => {
       await controller.importCustomers({ file: 'email1@example.com\nemail2@example.com' });
       const customers = await customerService.findAll();
       expect(customers.length).toBe(2);
     });
     ```
7. **Document Admin/Analytics**:
   - Update `docs/admin.md`, `docs/analytics.md`.

**Deliverables**:
- Functional `AdminOverview.tsx`, `AdminMerchants.tsx`, `RateLimitPage.tsx`.
- RBAC, GDPR webhooks, customer import, RFM analytics APIs.
- Jest tests for admin/analytics logic.
- Updated `docs/admin.md`, `docs/analytics.md`.

**AI Assistance**:
- Request: “Generate Polaris-compliant `RateLimitPage.tsx` with i18next.”
- Request: “Write a NestJS `WebhookController` for GDPR with gRPC.”

### Week 6: Testing, Deployment, and Beta Feedback
**Goal**: Test MVP, deploy to VPS, gather beta feedback, prepare Shopify App Store submission.
**Tasks**:
1. **End-to-End Testing**:
   - Run Cypress tests for Merchant Dashboard, Customer Widget.
   - Test OAuth, points redemption, referral flows, GDPR form.
2. **Load Testing**:
   - Use k6 for 100 users on `/api/points/earn`, `/api/referrals` (1,000 orders/hour).
   - Example:
     ```javascript
     import http from 'k6/http';
     export let options = { vus: 100, duration: '1m' };
     export default function () {
       http.post('https://herethere.dev/api/points/earn', JSON.stringify({ customer_id: 'c1', order_amount: 100 }), {
         headers: { 'Authorization': 'Bearer test-token' }
       });
     }
     ```
3. **Accessibility Testing**:
   - Use axe-core with Cypress.
   - Example:
     ```javascript
     import 'cypress-axe';
     describe('Customer Widget', () => {
       it('is accessible', () => {
         cy.visit('/widget');
         cy.injectAxe();
         cy.checkA11y();
       });
     });
     ```
4. **Deploy to VPS**:
   - Follow `docker.txt`: `docker-compose up -d --build`, `docker-compose run --rm certbot`.
   - Verify: `https://herethere.dev`, check `docker-compose logs`.
5. **Beta Merchant Feedback**:
   - Share `https://herethere.dev` with 1–2 merchants.
   - Collect feedback on UX (e.g., “Is the GDPR form intuitive?”).
   - Log in `docs/feedback.md`.
6. **Shopify App Store Submission**:
   - Create demo video (OAuth, points, referrals, GDPR).
   - Update `README.md` with setup/usage instructions.
7. **Monitor Deployment**:
   - Access Grafana (`http://your-vps-ip:3001`) for API/Redis/queue metrics.
   - Set up PostgreSQL backup:
     ```bash
     echo "0 2 * * * docker exec herethere_postgres_1 pg_dump -U user herethere > /backups/backup-$(date +%F).sql" | crontab -
     ```
8. **Document MVP**:
   - Finalize `docs/api.md`, `docs/frontend.md`, `docs/admin.md`, `docs/analytics.md`.

**Deliverables**:
- Tested MVP with Cypress, k6, axe-core.
- Deployed app with SSL.
- Beta feedback in `docs/feedback.md`.
- Shopify App Store demo video, updated `README.md`.

**AI Assistance**:
- Request: “Generate k6 script for `/api/referrals`.”
- Request: “Create Shopify App Store demo script.”

## Tips to Avoid Failure
- **Git Branches**: Use `git checkout -b week1-setup`, `week2-points`, etc.
- **Test Early**: Run Jest/Cypress/axe-core after each task.
- **Leverage AI**: Ask for code snippets, tests, or explanations (e.g., “Explain gRPC in NestJS”).
- **Engage Merchants**: Validate UX in Week 6 to avoid rework.
- **Monitor Progress**: Use Trello/Notion for task tracking.
- **Backup Regularly**: Set up PostgreSQL/Redis backups.

## AI Assistance Options
- Generate Trello board JSON for this plan.
- Provide code (e.g., `ReferralController`, `GDPRRequestForm.tsx`).
- Create Jest/Cypress/k6/axe-core tests.
- Debug issues (e.g., share `api.log`, `flowchart_app.log`).
- Draft Shopify App Store checklist.

## Next Steps
1. Set up repository and Docker (Week 1).
2. Implement Points/Auth microservices (Week 2).
3. Build Merchant Dashboard with i18next (Week 3).
4. Develop Customer Widget and Referrals microservice (Week 4).
5. Build Admin/Analytics microservices (Week 5).
6. Test, deploy, gather feedback, prepare App Store submission (Week 6).
7. Share errors (e.g., `api.log`) or request specific code (e.g., GDPR webhook).

Would you like a Trello board JSON, specific code snippet, test case, Shopify App Store checklist, or troubleshooting help?
```