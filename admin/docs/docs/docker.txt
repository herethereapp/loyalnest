```
Docker Instructions for LoyalNest App

## Overview
Docker containerizes the LoyalNest App’s microservices (Points, Referrals, Analytics, Admin, Auth, Frontend), PostgreSQL, Redis, Bull (queue), Nginx, Prometheus, and Grafana for deployment on an Ubuntu VPS. This guide ensures scalability (50,000+ customers, 1,000 orders/hour), security (Let’s Encrypt SSL, pgcrypto, RBAC), GDPR/CCPA compliance, and multilingual support (`en`, `es`, `fr`). It aligns with `Technical Specifications.markdown` (artifact_id: `c2cd4d95-b4f0-4dab-b340-97fed28c6c1f`), `Wireframes.txt` (artifact_id: `f9d79d8e-fed3-4baa-8b3f-559f91b29ec2`), `schema.txt` (artifact_id: `11afb340-73c5-4e4c-81e1-f6e37ff2d6c5`), `RFM.txt` (artifact_id: `751121e8-8fa6-4888-9904-7313c14683db`), `feature_analytics.txt` (artifact_id: `d4980eb7-0599-4917-a9f3-da81f747f3b8`), `user_stories.markdown` (artifact_id: `87a844dd-d902-4a1f-963f-4e31cf00ccd6`), `Flow Diagram.txt` (artifact_id: `5613982f-eae0-48e0-a0fc-36c27415e8a3`), and `Sequence Diagrams.txt` (artifact_id: `1bdfbb54-f9f3-4a6d-9697-3fecd54da1b0`).

This guide provides Dockerfiles for microservices, a complete `docker-compose.yml`, and instructions for deployment, testing, and monitoring, tailored for a solo beginner developer.

## Prerequisites
- **VPS**: Ubuntu 22.04+, SSH access, domain (e.g., herethere.dev).
- **Tools**: Git, Node.js (local development), VS Code.
- **Project Setup**: Repository with microservices (`/points`, `/referrals`, `/analytics`, `/admin`, `/auth`, `/frontend`), `schema.sql`.
- **API Keys**: Shopify App credentials, Klaviyo/Postscript API keys, PostHog API key, JWT secret.

## Step 1: Install Docker and Docker Compose on VPS
```bash
ssh user@your-vps-ip
sudo apt update && sudo apt upgrade -y
sudo apt install docker.io -y
sudo systemctl start docker
sudo systemctl enable docker
sudo usermod -aG docker $USER
# Log out and back in
sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker --version
docker-compose --version
```

## Step 2: Set Up Project Structure
```text
LoyalNest-app/
├── points/                 # Points microservice
│   ├── src/
│   ├── package.json
│   ├── Dockerfile
├── referrals/             # Referrals microservice
│   ├── src/
│   ├── package.json
│   ├── Dockerfile
├── analytics/             # Analytics microservice
│   ├── src/
│   ├── package.json
│   ├── Dockerfile
├── admin/                 # Admin microservice
│   ├── src/
│   ├── package.json
│   ├── Dockerfile
├── auth/                  # Auth microservice
│   ├── src/
│   ├── package.json
│   ├── Dockerfile
├── frontend/              # Vite + React frontend
│   ├── src/
│   ├── package.json
│   ├── Dockerfile
├── docker-compose.yml     # Docker Compose configuration
├── nginx/
│   ├── nginx.conf        # Nginx configuration
├── prometheus/
│   ├── prometheus.yml    # Prometheus configuration
├── schema.sql             # PostgreSQL schema
├── init.sql               # Database initialization
```

## Step 3: Create Dockerfiles
### Points Microservice (`points/Dockerfile`)
```dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build
EXPOSE 3001
CMD ["npm", "run", "start:prod"]
```

### Referrals Microservice (`referrals/Dockerfile`)
```dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build
EXPOSE 3002
CMD ["npm", "run", "start:prod"]
```

### Analytics Microservice (`analytics/Dockerfile`)
```dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build
EXPOSE 3003
CMD ["npm", "run", "start:prod"]
```

### Admin Microservice (`admin/Dockerfile`)
```dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build
EXPOSE 3004
CMD ["npm", "run", "start:prod"]
```

### Auth Microservice (`auth/Dockerfile`)
```dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build
EXPOSE 3005
CMD ["npm", "run", "start:prod"]
```

### Frontend (`frontend/Dockerfile`)
```dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
RUN npm install react-i18next
COPY . .
RUN npm run build
EXPOSE 3000
CMD ["npm", "run", "preview"]
```

## Step 4: Configure Docker Compose
Create `docker-compose.yml` in the project root:
```yaml
version: '3.8'
services:
  points:
    build: ./points
    ports:
      - "3001:3001"
    environment:
      - DATABASE_URL=postgres://user:pass@postgres:5432/herethere
      - REDIS_URL=redis://redis:6379
      - SHOPIFY_CLIENT_ID=${SHOPIFY_CLIENT_ID}
      - SHOPIFY_CLIENT_SECRET=${SHOPIFY_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - ACCEPT_LANGUAGE=en,es,fr
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  referrals:
    build: ./referrals
    ports:
      - "3002:3002"
    environment:
      - DATABASE_URL=postgres://user:pass@postgres:5432/herethere
      - REDIS_URL=redis://redis:6379
      - KLAVIYO_API_KEY=${KLAVIYO_API_KEY}
      - POSTSCRIPT_API_KEY=${POSTSCRIPT_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ACCEPT_LANGUAGE=en,es,fr
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  analytics:
    build: ./analytics
    ports:
      - "3003:3003"
    environment:
      - DATABASE_URL=postgres://user:pass@postgres:5432/herethere
      - REDIS_URL=redis://redis:6379
      - POSTHOG_API_KEY=${POSTHOG_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ACCEPT_LANGUAGE=en,es,fr
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  admin:
    build: ./admin
    ports:
      - "3004:3004"
    environment:
      - DATABASE_URL=postgres://user:pass@postgres:5432/herethere
      - REDIS_URL=redis://redis:6379
      - SHOPIFY_CLIENT_ID=${SHOPIFY_CLIENT_ID}
      - JWT_SECRET=${JWT_SECRET}
      - ACCEPT_LANGUAGE=en,es,fr
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  auth:
    build: ./auth
    ports:
      - "3005:3005"
    environment:
      - DATABASE_URL=postgres://user:pass@postgres:5432/herethere
      - REDIS_URL=redis://redis:6379
      - SHOPIFY_CLIENT_ID=${SHOPIFY_CLIENT_ID}
      - SHOPIFY_CLIENT_SECRET=${SHOPIFY_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - ACCEPT_LANGUAGE=en,es,fr
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=https://herethere.dev/api
      - VITE_SHOPIFY_API_KEY=${SHOPIFY_CLIENT_ID}
    depends_on:
      - points
      - referrals
      - analytics
      - admin
      - auth
    networks:
      - app-network

  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=herethere
    volumes:
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:6
    volumes:
      - redis-data:/data
    networks:
      - app-network

  bull:
    image: redis:6
    command: redis-server --appendonly yes
    volumes:
      - bull-data:/data
    networks:
      - app-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./letsencrypt:/etc/letsencrypt
    depends_on:
      - frontend
      - points
      - referrals
      - analytics
      - admin
      - auth
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    volumes:
      - ./letsencrypt:/etc/letsencrypt
    command: certonly --webroot -w /etc/letsencrypt -d herethere.dev --email support@herethere.dev --agree-tos --non-interactive
    depends_on:
      - nginx
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3001"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - app-network

volumes:
  postgres-data:
  redis-data:
  bull-data:

networks:
  app-network:
    driver: bridge
```

## Step 5: Configure Nginx for SSL
Create `nginx/nginx.conf`:
```nginx
server {
    listen 80;
    server_name herethere.dev;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name herethere.dev;

    ssl_certificate /etc/letsencrypt/live/herethere.dev/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/herethere.dev/privkey.pem;

    location / {
        proxy_pass http://frontend:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/points/ {
        proxy_pass http://points:3001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/referrals/ {
        proxy_pass http://referrals:3002;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/analytics/ {
        proxy_pass http://analytics:3003;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/admin/ {
        proxy_pass http://admin:3004;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/auth/ {
        proxy_pass http://auth:3005;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
```

## Step 6: Configure Prometheus
Create `prometheus/prometheus.yml`:
```yaml
scrape_configs:
  - job_name: 'points'
    static_configs:
      - targets: ['points:3001']
  - job_name: 'referrals'
    static_configs:
      - targets: ['referrals:3002']
  - job_name: 'analytics'
    static_configs:
      - targets: ['analytics:3003']
  - job_name: 'admin'
    static_configs:
      - targets: ['admin:3004']
  - job_name: 'auth'
    static_configs:
      - targets: ['auth:3005']
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx:80']
```

## Step 7: Initialize Database
Create `init.sql`:
```sql
CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE MATERIALIZED VIEW rfm_segment_counts AS
SELECT merchant_id, segment_name, COUNT(*) as customer_count, NOW() as last_refreshed
FROM customers
GROUP BY merchant_id, segment_name
WITH DATA;
REFRESH MATERIALIZED VIEW CONCURRENTLY rfm_segment_counts;
```

## Step 8: Set Up Environment Variables
Create `.env`:
```text
SHOPIFY_CLIENT_ID=your-shopify-client-id
SHOPIFY_CLIENT_SECRET=your-shopify-client-secret
KLAVIYO_API_KEY=your-klaviyo-api-key
POSTSCRIPT_API_KEY=your-postscript-api-key
POSTHOG_API_KEY=your-posthog-api-key
JWT_SECRET=your-jwt-secret
VITE_API_BASE_URL=https://herethere.dev/api
VITE_SHOPIFY_API_KEY=your-shopify-client-id
ACCEPT_LANGUAGE=en,es,fr
```

## Step 9: Deploy the Application
```bash
git clone https://github.com/your-repo/LoyalNest-app.git
cd LoyalNest-app
cp .env.example .env
nano .env  # Add API keys
docker-compose up -d --build
docker-compose run --rm certbot
```

Access:
- App: https://herethere.dev
- Grafana: http://your-vps-ip:3001 (login: admin/admin)
- APIs: https://herethere.dev/api/{points,referrals,analytics,admin,auth}/*

Verify logs:
```bash
docker-compose logs points
docker-compose logs frontend
```

## Step 10: Test the Deployment
### Unit/Integration Tests
Backend (Jest):
```bash
cd points
npm test
```

Frontend (Cypress):
```bash
cd frontend
npm run cypress:run
```

### Load Testing
Use k6:
```bash
k6 run load-test.js
```

`load-test.js`:
```javascript
import http from 'k6/http';
import { sleep } from 'k6';

export let options = {
  vus: 100,
  duration: '1m',
};

export default function () {
  http.post('https://herethere.dev/api/points/earn', JSON.stringify({
    customer_id: 'test-customer',
    order_amount: 100,
  }), {
    headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer test-token' },
  });
  sleep(1);
}
```

### Accessibility Testing
Use axe-core:
```javascript
import 'cypress-axe';

describe('Customer Widget', () => {
  it('is accessible', () => {
    cy.visit('https://herethere.dev');
    cy.injectAxe();
    cy.checkA11y();
  });
});
```

## Step 11: Monitor and Maintain
- **Grafana**: Access http://your-vps-ip:3001, add Prometheus data source, monitor API latency, Redis hits, PostgreSQL query performance, and Bull queue latency.
- **Logs**:
```bash
docker-compose logs --tail=100
```
- **Backup Database**:
```bash
docker exec -it herethere_postgres_1 pg_dump -U user herethere > backup.sql
```
- **Renew SSL**:
```bash
docker-compose run --rm certbot renew
```

## Step 12: Integrate with CI/CD
Create `.github/workflows/deploy.yml`:
```yaml
name: Deploy to VPS
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to VPS
        run: |
          ssh user@your-vps-ip << 'EOF'
            cd ~/LoyalNest-app
            git pull
            docker-compose down
            docker-compose up -d --build
            docker-compose run --rm certbot renew
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
```

## Notes
- **Scalability**:
  - PostgreSQL partitioning (`points_transactions`, `referrals`, `reward_redemptions`) via `schema.sql`.
  - Redis caching (`points:{customer_id}`, `rfm:preview:{merchant_id}`, `leaderboard:{merchant_id}`).
  - Bull queues for notifications (`US-BI2`).
- **Security**:
  - `pgcrypto` for `customers.email`, `merchants.api_token`, `reward_redemptions.discount_code`.
  - RBAC via `merchants.staff_roles` (JSONB).
  - Shopify OAuth for Merchant Dashboard/Customer Widget.
- **Multilingualism**:
  - `ACCEPT_LANGUAGE` in microservices.
  - JSONB fields (`email_templates.body`, `program_settings.config`) with `CHECK ?| ARRAY['en', 'es', 'fr']`.
  - i18next in frontend for translations.
- **Accessibility**:
  - ARIA labels in frontend components (`US-CW1–CW12`, `US-MD1–MD16`).
  - High-contrast mode via Tailwind CSS.
  - axe-core for accessibility testing.
- **Shopify Compliance**:
  - `@shopify/shopify-app-express` for OAuth/webhooks.
  - Polaris for Merchant Dashboard UI.
- **Troubleshooting**:
  - Check `docker-compose logs {service}` for errors.
  - Verify `schema.sql` includes `CREATE EXTENSION pgcrypto` and `rfm_segment_counts`.
  - Share `api.log` or `flowchart_app.log` for issues.

## How to Use
- **Development**: Run `docker-compose up --build` locally, test APIs with Postman (e.g., `POST https://localhost/api/points/earn`), develop React with Vite HMR (`npm run dev` in `frontend/`).
- **Demo**: Share https://herethere.dev with beta merchants, include `Wireframes.txt` screenshots in Shopify App Store submission.
- **Documentation**: Save in `docs/docker/docker.txt` and `docker-compose.yml`. Update `README.md`.

## If You Want More
- Request sample code (e.g., NestJS GDPR webhook controller, React GDPR component).
- Ask for Shopify Flow script for RFM nudges (`US-MD12`).
- Request Grafana dashboard for Bull queue latency or Redis hits.
- Share `flowchart_app.log` for Python GUI app issues.

## Next Steps
1. Set up VPS (Step 1).
2. Create Dockerfiles, `nginx.conf`, `prometheus.yml`, `init.sql`, `.env` (Steps 3–8).
3. Deploy with `docker-compose up -d --build` and `certbot` (Step 9).
4. Test with Jest, Cypress, k6, axe-core (Step 10).
5. Monitor via Grafana (Step 11).
6. Share feedback or logs for troubleshooting.
```