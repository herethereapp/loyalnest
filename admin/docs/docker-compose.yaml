```yaml
version: '3.8'
services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgres://user:password@postgres:5432/herethere
      - REDIS_URL=redis://redis:6379
      - SHOPIFY_CLIENT_ID=${SHOPIFY_CLIENT_ID}
      - SHOPIFY_CLIENT_SECRET=${SHOPIFY_CLIENT_SECRET}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - POSTHOG_API_KEY=${POSTHOG_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: always

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - VITE_SHOPIFY_API_KEY=${SHOPIFY_CLIENT_ID}
      - VITE_API_BASE_URL=http://backend:3000
    networks:
      - app-network
    restart: always

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/dist:/usr/share/nginx/html
      - certbot-data:/etc/letsencrypt
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: always

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=herethere
    volumes:
      - ./schema.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always

  redis:
    image: redis:7
    networks:
      - app-network
    restart: always

  bull:
    image: redis:7
    command: redis-server --appendonly yes
    networks:
      - app-network
    restart: always

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network
    restart: always

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - app-network
    restart: always

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-data:/etc/letsencrypt
    entrypoint: certbot certonly --webroot --webroot-path=/etc/letsencrypt --email your-email@example.com --agree-tos --no-eff-email -d herethere.example.com
    depends_on:
      - nginx
    networks:
      - app-network

volumes:
  postgres-data:
  certbot-data:

networks:
  app-network:
    driver: bridge
```