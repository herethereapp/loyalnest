# System Architecture and Technical Specifications: LoyalNest Shopify App

## 1. Overview
The LoyalNest Shopify app is a loyalty and rewards platform designed to enhance customer retention and repeat purchases for Shopify merchants, competing with Smile.io, Yotpo, and LoyaltyLion. It targets small (100–1,000 customers, AOV $20–$50), medium (1,000–10,000 customers, AOV $50–$200), and Shopify Plus merchants (10,000+ customers, multi-store setups). The system employs a microservices architecture in an Nx monorepo for modularity, scalability, and independent deployments, supporting 5,000+ merchants and 50,000+ customers for Plus, with Black Friday surges (10,000 orders/hour). It leverages NestJS (TypeScript) for APIs, Rust/Wasm for Shopify Functions, Vite + React for the frontend, PostgreSQL with JSONB and range partitioning for data storage, Redis Cluster with Streams for caching, Kafka for event-driven processing, and Loki + Grafana for logging and monitoring, deployed on a VPS with Docker Compose and Nginx. Must Have features for the TVP (7–8 months, Phase 3 by February 2026) include points (purchases, signups, reviews, birthdays), SMS/email referrals, basic RFM analytics (Recency, Frequency, Monetary), Shopify POS with offline mode, checkout extensions, GDPR/CCPA request form, referral status with progress bar, notification templates with live preview and fallback language, customer import, campaign discounts, rate limit monitoring with alerts, usage thresholds, upgrade nudges, gamified onboarding, and merchant feedback integration. The system ensures GDPR/CCPA compliance, Shopify App Store requirements, multilingual support (English, Spanish, French, Arabic with RTL), and disaster recovery with Backblaze B2.

## 2. System Objectives
- **Scalability**: Support 5,000+ merchants, with Plus merchants handling 50,000+ customers and 10,000 orders/hour during peak events (e.g., Black Friday).
- **Modularity**: Utilize microservices (Core, Auth, Points, Referrals, RFM Analytics, Event Tracking, AdminCore, AdminFeatures, Campaign, Gamification, Frontend, Products) for independent development and deployment, managed via Nx monorepo.
- **Shopify Compliance**: Adhere to Shopify APIs (2025-01), OAuth, webhooks (`orders/create`, GDPR), POS with offline mode, Checkout UI Extensions, and Shopify Flow templates (Phase 5).
- **GDPR/CCPA Compliance**: Encrypt PII (`customers.email`, `rfm_score`) with AES-256 via `pgcrypto`, handle GDPR webhooks (`customers/data_request`, `customers/redact`) with retries, and enforce 90-day retention (`gdpr_requests.retention_expires_at`).
- **Performance**: Achieve API responses <200ms using Redis Cluster caching, PostgreSQL range partitioning, and circuit breakers; coordinate Shopify API rate limits (2 req/s standard, 40 req/s Plus).
- **Developer Efficiency**: Leverage AI tools (GitHub Copilot, Cursor, Grok) for a solo developer, with in-house UI/UX and QA, using Nx monorepo, Docker Compose, and an enhanced `dev.sh` script for mock data, RFM simulation, rate limit simulation, and audit log replay.
- **Reliability**: Implement disaster recovery with `pg_dump`, Redis snapshotting, and Backblaze B2 backups (90-day retention, RTO: 4 hours, RPO: 1 hour), plus centralized logging with Loki + Grafana and Chaos Mesh for resilience testing.
- **Merchant Engagement**: Support gamified onboarding, merchant referral program, Slack community (“LoyalNest Collective”), and Typeform feedback integration for adoption.

## 3. System Architecture
The system is built on a microservices architecture, orchestrated with Docker Compose and deployed on a VPS (Ubuntu, Nginx with gRPC proxy). It uses REST APIs for UI-facing endpoints, gRPC for inter-service communication, Kafka for async events, WebSocket for real-time updates, and a combination of PostgreSQL, Redis Cluster, and Loki for data storage, caching, and logging.

### 3.1 Microservices
The system comprises twelve microservices, each built with NestJS (TypeScript) and Rust/Wasm for Shopify Functions, managed in an Nx monorepo:
1. **Core Service**:
   - **Purpose**: Centralizes core business logic, configuration management, and inter-service coordination, including global settings, plan enforcement (freemium-to-Plus funnel), and usage thresholds.
   - **Endpoints**: `/v1/api/core/settings`, `/v1/api/core/usage`, `/v1/api/core/plan`.
   - **Tech**: NestJS, PostgreSQL (`program_settings`, `merchant_plans`), Redis Cluster (`config:{merchant_id}`, `usage:{merchant_id}`), Kafka (event publishing).
   - **Interactions**: Provides centralized configuration to all services, publishes `plan_limit_warning` to Kafka, and coordinates upgrade nudges via WebSocket.
2. **Auth Service**:
   - **Purpose**: Manages Shopify OAuth, JWT authentication (15-minute expiry, revocation list in Redis), MFA via Auth0, and RBAC (`admin:full`, `admin:analytics`, `admin:support`, `admin:points`).
   - **Endpoints**: `/v1/api/auth/login`, `/v1/api/auth/refresh`, `/v1/api/auth/roles`, `/v1/api/auth/mfa`, `/admin/v1/auth/revoke`.
   - **Tech**: NestJS, `@shopify/shopify-app-express`, Redis Cluster (`jwt:{merchant_id}`, `revoked_jti:{token_id}`), PostgreSQL (`merchants.staff_roles: JSONB`).
   - **Interactions**: Validates tokens for dashboard and admin module, uses gRPC to fetch roles from Core Service, supports MFA and revocation for Shopify Plus.
3. **Points Service**:
   - **Purpose**: Manages points earning/redemption, Shopify POS with offline mode, checkout extensions, campaign discounts, and real-time streaming.
   - **Endpoints**: `/v1/api/points/earn`, `/v1/api/points/redeem`, `/v1/api/points/adjust`, `/v1/api/rewards`, `/v1/api/points/sync`, `/api/points/stream` (WebSocket).
   - **Tech**: NestJS, Rust/Wasm (Shopify Functions for discounts), PostgreSQL (`points_transactions`, `reward_redemptions`), Redis Cluster (`points:customer:{id}`), `socket.io`/`ws`.
   - **Interactions**: Processes `orders/create` webhooks, syncs POS data via SQLite queue, applies checkout extensions, streams updates, and publishes `points.earned` to Kafka.
4. **Referrals Service**:
   - **Purpose**: Manages SMS/email referrals, referral status with progress bar, and error handling with fallback to AWS SES.
   - **Endpoints**: `/v1/api/referrals/create`, `/v1/api/referrals/complete`, `/v1/api/referrals/status`, `/v1/api/referrals/progress`.
   - **Tech**: NestJS, Klaviyo/Postscript (SMS/email, 5s timeout, 3 retries), AWS SES (fallback), Bull queues, PostgreSQL (`referrals`), Redis Streams (`referral:{code}`, `referral:status:{id}`).
   - **Interactions**: Generates referral links, sends notifications, tracks conversion (7%+ target), handles errors, logs fallback events to PostHog, and publishes `referral.created` to Kafka.
5. **RFM Analytics Service**:
   - **Purpose**: Provides basic RFM analytics with time-weighted recency, lifecycle stages, and visualizations (e.g., Recency vs. Monetary scatter plot).
   - **Endpoints**: `/v1/api/rfm/segments`, `/v1/api/rfm/segments/preview`, `/v1/api/rfm/nudges`, `/api/rfm/visualizations`, gRPC (`/analytics.v1/GetSegments`, `/analytics.v1/PreviewRFMSegments`, `/analytics.v1/GetNudges`).
   - **Tech**: NestJS, Rust/Wasm (real-time RFM updates), PostgreSQL (`customers.rfm_score: JSONB`, `rfm_segment_counts`, `rfm_segment_deltas`, `rfm_score_history`), Redis Streams (`rfm:customer:{id}`, `rfm:preview:{merchant_id}`).
   - **Interactions**: Calculates RFM scores, refreshes daily (`0 1 * * *`) and incrementally on `orders/create`, caches in Redis Streams.
6. **Event Tracking Service**:
   - **Purpose**: Tracks feature usage and events for analytics and merchant engagement.
   - **Endpoints**: `/v1/api/events`.
   - **Tech**: NestJS, PostHog, Kafka.
   - **Interactions**: Captures events (e.g., `points_earned`, `referral_clicked`, `gdpr_request_submitted`) and sends to PostHog via Kafka.
7. **AdminCore Service**:
   - **Purpose**: Manages merchant accounts, GDPR requests, and audit logs.
   - **Endpoints**: `/admin/merchants`, `/admin/logs`, gRPC (`/admin.v1/GetMerchants`, `/admin.v1/GetAuditLogs`, `/admin.v1/HandleGDPRRequest`).
   - **Tech**: NestJS, PostgreSQL (`gdpr_requests`, `audit_logs`, `merchants`), Redis Streams (logs, `audit_logs:{merchant_id}`), Kafka (async logging), `socket.io`/`ws`, Nginx (IP allowlisting, HMAC).
   - **Interactions**: Handles GDPR webhooks with retries, RBAC with IP allowlisting, real-time log streaming, and Typeform feedback integration.
8. **AdminFeatures Service**:
   - **Purpose**: Manages points adjustments, referrals, RFM segments, customer imports, notification templates, rate limits, integration health, onboarding, multi-currency settings, and feedback.
   - **Endpoints**: `/admin/points/adjust`, `/admin/referrals`, `/admin/rfm-segments`, `/admin/rfm/export`, `/admin/notifications/template`, `/admin/rate-limits`, `/admin/customers/import`, `/v1/api/plan/usage`, `/admin/setup/stream`, `/admin/settings/currency`, `/admin/integrations/square/sync`, `/admin/v1/feedback`, gRPC (`/admin.v1/UpdateNotificationTemplate`, `/admin.v1/GetRateLimits`, `/admin.v1/ImportCustomers`, `/admin.v1/SyncSquarePOS`).
   - **Tech**: NestJS, PostgreSQL (`email_templates: JSONB`, `integrations`, `setup_tasks`, `merchant_settings`), Redis Streams (rate limits, `setup_tasks:{merchant_id}`), Bull queues (imports, exports, rate limit throttling), `socket.io`/`ws`, Nginx (IP allowlisting, HMAC).
   - **Interactions**: Manages rate limit queues, async CSV imports, notification templates, integration health, onboarding progress, and SLO dashboard.
9. **Campaign Service**:
   - **Purpose**: Manages Shopify Discounts API campaigns.
   - **Endpoints**: `/api/campaigns`, `/api/campaigns/{id}`, gRPC (`/campaign.v1/CreateCampaign`, `/campaign.v1/GetCampaign`).
   - **Tech**: NestJS, Rust/Wasm (Shopify Functions), PostgreSQL (`campaigns: JSONB`), Redis Cluster (`campaign:{campaign_id}`).
   - **Interactions**: Creates/applies campaign discounts and publishes `campaign_created` to Kafka.
10. **Gamification Service**:
    - **Purpose**: Manages badge awards and leaderboards (Phase 6).
    - **Endpoints**: `/api/gamification/badges`, `/api/gamification/leaderboard`, gRPC (`/gamification.v1/AwardBadge`, `/gamification.v1/GetLeaderboard`).
    - **Tech**: NestJS, PostgreSQL (`customer_badges`, `leaderboard_rankings`), Redis Cluster (`badge:{customer_id}:{badge_id}`, `leaderboard:{merchant_id}:{page}`).
    - **Interactions**: Awards badges, ranks customers, caches data in Redis, and publishes `badge_awarded` to Kafka.
11. **Frontend Service**:
    - **Purpose**: Hosts the merchant dashboard, customer widget, and admin module as a single-page app, ensuring Shopify compliance and accessibility.
    - **Endpoints**: `/`, `/customer`, `/admin`, WebSocket (`/admin/v1/setup/stream`).
    - **Tech**: Vite + React, Polaris, Tailwind CSS, App Bridge, `i18next` (multilingual with RTL for Arabic and Hebrew, fallback: English).
    - **Interactions**: Communicates with Core, Auth, Points, Referrals, RFM Analytics, and AdminFeatures via REST and WebSocket for real-time updates (e.g., onboarding progress, referral status).
12. **Products Service**:
    - **Purpose**: Manages product-related data, including product-level RFM analytics (Phase 6), campaign eligibility, and integration with Shopify Product API for dynamic discounts.
    - **Endpoints**: `/v1/api/products`, `/v1/api/products/rfm`, `/v1/api/products/campaigns`, gRPC (`/products.v1/GetProductRFM`, `/products.v1/ApplyCampaign`).
    - **Tech**: NestJS, PostgreSQL (`products`, `product_rfm_scores`), Redis Cluster (`product:{product_id}:rfm`), Shopify Product API.
    - **Interactions**: Fetches product data, calculates product-level RFM scores, integrates with Campaign Service for discounts, and publishes `product_rfm_updated` to Kafka.

### 3.2 Data Storage
- **PostgreSQL**:
  - Schema: `loyalnest_full_schema.sql`.
  - Key Tables: `merchants`, `customers` (email, merchant_id, `rfm_score: JSONB`), `points_transactions`, `referrals` (referral_link_id), `reward_redemptions` (campaign_id), `program_settings` (`rfm_thresholds: JSONB`), `gdpr_requests` (retention_expires_at), `rfm_segment_counts`, `rfm_segment_deltas`, `audit_logs`, `email_templates` (`body: JSONB`), `bonus_campaigns` (`conditions: JSONB`), `products`, `product_rfm_scores`.
  - Indexes: `customers(email, merchant_id, rfm_score)`, `points_transactions(customer_id)`, `referrals(merchant_id, referral_link_id)`, `gdpr_requests(retention_expires_at)`, `rfm_segment_counts(merchant_id, last_refreshed)`, `audit_logs(merchant_id)`, `products(product_id)`.
  - Partitioning: Range partitioning on `created_at` for `points_transactions`, `referrals`, `reward_redemptions`, `rfm_segment_counts`, `audit_logs`.
  - Encryption: PII (`customers.email`, `rfm_score`) with AES-256 via `pgcrypto`, quarterly key rotation via AWS KMS.
  - Refresh: Incremental refresh for `rfm_segment_counts` via `rfm_segment_deltas` (daily, `0 1 * * *`) and real-time on `orders/create`.
- **Redis Cluster**:
  - Caches: Points balances (`points:customer:{id}`), referral codes (`referral:{code}`), rate limits (`shopify_api_rate_limit:{merchant_id}`), notification templates, RFM previews (`rfm:preview:{merchant_id}`), badges, leaderboards, setup tasks, SLO metrics, product RFM scores (`product:{product_id}:rfm`).
  - Streams: Real-time logs (`logs:{merchant_id}`), queue monitoring, RFM caching.
  - Dead-letter queue for GDPR webhook retries (3 retries).
- **Backblaze B2**:
  - Stores daily backups (`pg_dump`, Redis snapshots) with 90-day retention, validated weekly via `restore.sh` script.

### 3.3 Event Processing
- **Kafka**:
  - Handles async events: `points.earned`, `referral.created`, `referral_fallback_triggered`, `gdpr_request_submitted`, `campaign_created`, `plan_limit_warning`, `product_rfm_updated`.
  - Ensures decoupling and reliable delivery with retries.
- **PostHog**:
  - Tracks events: `points_earned`, `referral_clicked`, `gdpr_request_submitted`, `template_edited`, `customer_import_initiated`, `rate_limit_viewed`, `product_rfm_viewed`.

### 3.4 Integrations
- **Shopify**: APIs (Orders, Customers, Discounts, Products), webhooks (`orders/create`, GDPR), POS offline mode, Checkout UI Extensions, Flow templates (Phase 5).
- **Klaviyo/Postscript**: SMS/email referrals, notification templates, A/B testing for RFM nudges, fallback to AWS SES.
- **Yotpo/Judge.me**: Points for reviews.
- **Square**: POS integration with health checks and manual sync.

### 3.5 Deployment
- **VPS**: Ubuntu with Docker Compose, Nginx (reverse proxy, gRPC proxy, frontend assets, IP allowlisting, HMAC signatures), and circuit breakers (`nestjs-circuit-breaker`).
- **CI/CD**: GitHub Actions with change detection, Jest/Cypress/k6 tests, Lighthouse CI, OWASP ZAP, Chaos Mesh (nightly resilience tests), daily backups, weekly validation, and Slack alerts.
- **Local Development**: `dev.sh` script starts Docker containers, seeds mock data (Faker), simulates RFM scores, rate limits, and audit log replay.
- **Disaster Recovery**: `pg_dump`, Redis snapshotting, Backblaze B2 backups with 90-day retention, RTO: 4 hours, RPO: 1 hour.
- **Feature Flags**: `feature-flags.json` for gradual rollouts (e.g., product-level RFM), canary routing via Nginx.

### 3.6 Monitoring and Logging
- **Loki + Grafana**: Centralized logging with structured tags, monitors API latency (<200ms), rate limits (alerts at 80%), integration health, and SLOs.
- **PostHog**: Tracks feature adoption (80%+ RFM wizard completion, 7%+ SMS referral conversion), merchant engagement, and campaign performance.

### 3.7 Feature Prioritization Matrix
| **Feature**                     | **Priority** | **Phase** | **Merchant Value**                     | **Complexity** |
|---------------------------------|--------------|-----------|----------------------------------------|----------------|
| Points (purchases, signups, reviews, birthdays) | Must Have    | 3         | High (20%+ redemption rate)            | Medium         |
| SMS/Email Referrals             | Must Have    | 3         | High (7%+ SMS conversion)              | Medium         |
| Basic RFM Analytics             | Must Have    | 3         | High (10%+ repeat purchase uplift)     | High           |
| Shopify POS (offline mode)      | Must Have    | 3         | Medium (POS adoption)                  | High           |
| Checkout Extensions             | Must Have    | 3         | High (85%+ adoption)                   | Medium         |
| GDPR Request Form               | Must Have    | 3         | Medium (50%+ usage)                    | Low            |
| Referral Status (Progress Bar)  | Must Have    | 3         | Medium (60%+ engagement)               | Low            |
| Notification Templates          | Must Have    | 3         | High (80%+ usage)                      | Medium         |
| Customer Import                 | Must Have    | 3         | High (90%+ success rate)               | Medium         |
| Campaign Discounts              | Must Have    | 3         | High (10%+ redemption)                 | Medium         |
| Rate Limit Monitoring           | Must Have    | 3         | Medium (operational reliability)       | Low            |
| Usage Thresholds                | Must Have    | 3         | Medium (upgrade funnel)                | Low            |
| Upgrade Nudges                  | Must Have    | 3         | Medium (freemium-to-Plus conversion)   | Low            |
| Gamified Onboarding             | Must Have    | 3         | High (80+ completion)                  | Medium         |
| Product-Level RFM               | Should Have  | 4–5       | Medium (targeted campaigns)            | High           |
| VIP Tiers                       | Should Have  | 4–5       | Medium (tier engagement)               | Medium         |
| Multi-Store Point Sharing       | Should Have  | 4–5       | High (Shopify Plus adoption)           | High           |
| Shopify Flow Templates          | Should Have  | 4–5       | Medium (automation adoption)           | Medium         |

## 4. Data Flow
1. **Merchant Authentication**: Merchant logs in via Shopify OAuth, Auth Service issues JWT, Core Service enforces plan limits.
2. **Points and Rewards**: `orders/create` triggers Points Service, Products Service checks campaign eligibility, streams updates.
3. **Referrals**: Referrals Service generates links, sends notifications, tracks status.
4. **RFM Analytics**: RFM Analytics Service calculates scores, Products Service adds product-level insights.
5. **GDPR Compliance**: AdminCore Service handles GDPR webhooks, encrypts PII.
6. **Admin Operations**: AdminFeatures Service manages imports, templates, and Square sync, Frontend Service displays updates.

## 5. API Endpoints
- **GET /api/customer/points**: Retrieves points balance and RFM score (Points Service).
- **POST /api/redeem**: Redeems points for rewards or discounts (Points Service).
- **POST /api/settings**: Updates program settings (Core Service).
- **POST /api/rewards**: Adds a new reward (Points Service).
- **POST /api/referral**: Creates a referral link (Referrals Service).
- **GET /api/referral/status**: Retrieves referral status (Referrals Service).
- **POST /api/gdpr/request**: Submits GDPR request (AdminCore Service).
- **POST /api/notifications/template**: Configures templates (AdminFeatures Service).
- **POST /api/customers/import**: Imports customers (AdminFeatures Service).
- **GET /api/rate-limits**: Monitors rate limits (AdminFeatures Service).
- **GET /api/admin/analytics**: Retrieves analytics (RFM Analytics Service).
- **GET /api/nudges**: Retrieves RFM nudges (RFM Analytics Service).
- **POST /api/admin/replay**: Replays actions (AdminFeatures Service).
- **POST /api/admin/rfm/simulate**: Simulates RFM transitions (AdminFeatures Service).
- **POST /api/admin/square/sync**: Syncs Square POS (AdminFeatures Service).
- **GET /api/products**: Retrieves product data (Products Service).
- **GET /api/products/rfm**: Gets product-level RFM (Products Service).

## 6. Webhooks
- **orders/create**: Awards points (Points Service).
- **orders/cancelled**: Adjusts points (Points Service).
- **customers/data_request**: Handles GDPR requests (AdminCore Service).
- **customers/redact**: Handles redaction (AdminCore Service).
- **pos/offline_sync**: Syncs POS transactions (Points Service).

## 7. Notifications
- **Klaviyo/Postscript**: Triggers for points, referrals, GDPR, with AWS SES fallback.
- **Logic**: Queues via Bull, logs to PostHog.

## 8. Shopify Functions (Rust/Wasm)
- **calculate_points**: Computes points at checkout (Points Service).
- **update_rfm_score**: Updates RFM scores (RFM Analytics Service).

## 9. Frontend Components
- **Customer Widget**: `PointsBalance`, `RedeemForm`, `ReferralStatus`, `GDPRRequestForm` (Frontend Service).
- **Merchant Dashboard**: `SettingsPage`, `NotificationTemplatePage`, `RateLimitPage`, `CustomerImportPage`, `ActionReplayPage`, `RFMSimulationPage`, `SquareSyncPage` (Frontend Service).

## 10. Deployment
- **Docker Compose**: Configures Core, Auth, Points, Referrals, RFM Analytics, Event Tracking, AdminCore, AdminFeatures, Campaign, Gamification, Frontend, Products, db, redis, nginx services.
- **Kubernetes**: Horizontal Pod Autoscaling for Plus merchants.

## 11. Security
- **Authentication**: JWTs with MFA, RBAC, IP allowlisting, HMAC.
- **Encryption**: AES-256 for PII via `pgcrypto`.
- **GDPR/CCPA**: Webhook handlers with retries, 90-day retention.

## 12. Testing
- **Unit Tests**: Jest for Core, Points, Products services.
- **E2E Tests**: Cypress for Frontend Service.
- **Performance Tests**: k6 for load testing.
- **Accessibility**: Lighthouse CI (90+ scores).

## 13. Risks and Mitigations
- **Solo Developer Bandwidth**: Leverage AI tools (30–40% efficiency gain), prioritize Must Have features.
- **Shopify API Rate Limits**: Use Redis tracking, Bull queues, simulate limits.
- **GDPR/CCPA Complexity**: Use Redis retries, automate tests.
- **Multilingual Accuracy**: Engage native speakers via Slack.
- **Integration Reliability**: Implement fallbacks, health checks.
- **Black Friday Scalability**: Use partitioning, load tests, capacity upgrades.

## 14. Future Considerations (Phase 6)
- **Should Have Features**: Product-level RFM, VIP tiers, multi-store sharing, Flow templates.
- **Could Have Features**: Gamification, multilingual widget, AI reward suggestions.
- **Scaling**: Migrate to Kubernetes, ElasticSearch.
- **Certification**: Built for Shopify (4.5+ stars).

## 15. Assumptions and Constraints
- **Assumptions**: Shopify API stability, AI efficiency, VPS support, feedback from Shopify Partners.
- **Constraints**: Solo developer, $91,912.50 budget, 39.5-week timeline.

### Implementation Steps
1. **Update File**:
   - Replace `E:\loyalnest\system_architecture_and_specifications.md` with the content above.
2. **Apply Changes**:
   - Commit to your Nx monorepo.
3. **Test Integration**:
   - Use `npx nx test` to verify microservices.
4. **Commit Changes**:
   ```powershell
   git add system_architecture_and_specifications.md
   git commit -m "Update system architecture and specifications with Core, Frontend, and Products microservices"
   ```

### Final Answer
The updated `system_architecture_and_specifications.md` now includes the `core-service`, `frontend`, and `products-service` microservices, aligning with the current architecture and TVP timeline as of 09:02 PM JST on July 22, 2025. Apply the changes, test the integration, and commit the updates.

Let me know if further refinements are needed!