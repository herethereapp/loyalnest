Flow Diagram for Points-Earning Process

graph TD
    %% Main Sections
    A[Customer] -->|Interacts with| B[Customer Widget]
    C[Merchant] -->|Manages via| D[Merchant Dashboard]
    E[Admin] -->|Manages via| F[Admin Module]
    G[Backend] -->|Supports| B[Customer Widget]
    G[Backend] -->|Supports| D[Merchant Dashboard]
    G[Backend] -->|Supports| F[Admin Module]
    H[Integrations] -->|Connects to| G[Backend]
    I[Database] -->|Stores/Retrieves| G[Backend]
    J[Cache: Redis] -->|Optimizes| G[Backend]

    %% Customer Widget (Phase 1, 2, 3)
    subgraph Customer Widget
        B[Customer Widget] --> B1[Points Balance]
        B[Customer Widget] --> B2[Redemption]
        B[Customer Widget] --> B3[Referral Popup]
        B[Customer Widget] --> B4[RFM Nudges]
        B[Customer Widget] --> B5[VIP Tiers]
        B[Customer Widget] --> B6[Gamification]
        B[Customer Widget] --> B7[Multilingual Support]
        B2[Redemption] --> B2a[Discounts]
        B2[Redemption] --> B2b[Free Shipping]
        B2[Redemption] --> B2c[Free Products]
        B2[Redemption] --> B2d[Coupons]
        B3[Referral Popup] --> B3a[SMS/Email Referral]
        B3[Referral Popup] --> B3b[Social Sharing]
        B6[Gamification] --> B6a[Badges]
        B6[Gamification] --> B6b[Leaderboards]
    end

    %% Merchant Dashboard (Phase 1, 2, 3)
    subgraph Merchant Dashboard
        D[Merchant Dashboard] --> D1[Welcome Page]
        D[Merchant Dashboard] --> D2[Points Program]
        D[Merchant Dashboard] --> D3[Referrals Program]
        D[Merchant Dashboard] --> D4[Customers]
        D[Merchant Dashboard] --> D5[Analytics]
        D[Merchant Dashboard] --> D6[Settings]
        D[Merchant Dashboard] --> D7[On-Site Content]
        D[Merchant Dashboard] --> D8[VIP Tiers]
        D[Merchant Dashboard] --> D9[Activity Logs]
        D[Merchant Dashboard] --> D10[Bonus Campaigns]
        D1[Welcome Page] --> D1a[Setup Tasks]
        D1[Welcome Page] --> D1b[Congratulatory Messages]
        D2[Points Program] --> D2a[Earn: Purchases, Signups]
        D2[Points Program] --> D2b[Redeem: Discounts, Shipping]
        D2[Points Program] --> D2c[Branding: Rewards Panel]
        D2[Points Program] --> D2d[Status: Enable/Disable]
        D3[Referrals Program] --> D3a[SMS/Email Config]
        D3[Referrals Program] --> D3b[Social Sharing Config]
        D3[Referrals Program] --> D3c[Status Toggle]
        D4[Customers] --> D4a[List: Name, Email, Points]
        D4[Customers] --> D4b[Search: Name/Email]
        D5[Analytics] --> D5a[Metrics: Members, Points]
        D5[Analytics] --> D5b[RFM Chart]
        D5[Analytics] --> D5c[Advanced Reports]
        D6[Settings] --> D6a[Store Details, Billing]
        D6[Settings] --> D6b[Branding]
        D6[Settings] --> D6c[RFM Config]
        D6[Settings] --> D6d[Developer Toolkit]
        D7[On-Site Content] --> D7a[Loyalty Page]
        D7[On-Site Content] --> D7b[Rewards Panel]
        D7[On-Site Content] --> D7c[Launcher Button]
        D7[On-Site Content] --> D7d[Points Display]
        D7[On-Site Content] --> D7e[Popups: Post-Purchase]
        D7[On-Site Content] --> D7f[Checkout Extensions]
        D7[On-Site Content] --> D7g[Sticky Bar]
        D8[VIP Tiers] --> D8a[Thresholds: Spending]
        D8[VIP Tiers] --> D8b[Perks: Early Access]
        D9[Activity Logs] --> D9a[Points, Referrals, VIP]
        D10[Bonus Campaigns] --> D10a[Promotions]
        D10[Bonus Campaigns] --> D10b[Goal Spend]
    end

    %% Admin Module (Phase 1, 2, 3)
    subgraph Admin Module
        F[Admin Module] --> F1[Overview]
        F[Admin Module] --> F2[Merchants]
        F[Admin Module] --> F3[Admin Users]
        F[Admin Module] --> F4[Logs]
        F[Admin Module] --> F5[Plan Management]
        F[Admin Module] --> F6[Integration Health]
        F[Admin Module] --> F7[RFM Config Management]
        F[Admin Module] --> F8[RFM Segment Export]
        F1[Overview] --> F1a[Merchant Count, Points]
        F2[Merchants] --> F2a[List: ID, Domain, Plan]
        F2[Merchants] --> F2b[Adjust Points]
        F3[Admin Users] --> F3a[Add/Edit/Delete Admins]
        F4[Logs] --> F4a[API Logs, Audit Logs]
    end

    %% Integrations (Phase 1, 2, 3)
    subgraph Integrations
        H[Integrations] --> H1[Shopify]
        H[Integrations] --> H2[Twilio]
        H[Integrations] --> H3[Klaviyo]
        H[Integrations] --> H4[Mailchimp]
        H[Integrations] --> H5[Yotpo]
        H[Integrations] --> H6[Square]
        H[Integrations] --> H7[Lightspeed]
        H[Integrations] --> H8[Gorgias]
        H[Integrations] --> H9[Postscript]
        H[Integrations] --> H10[Shopify Flow]
        H1[Shopify] --> H1a[OAuth]
        H1[Shopify] --> H1b[Orders/Create Webhook]
        H1[Shopify] --> H1c[POS Points]
    end

    %% Database (Phase 1, 2, 3)
    subgraph Database: PostgreSQL
        I[Database] --> I1[merchants]
        I[Database] --> I2[customers]
        I[Database] --> I3[points_transactions]
        I[Database] --> I4[referrals]
        I[Database] --> I5[rewards]
        I[Database] --> I6[reward_redemptions]
        I[Database] --> I7[program_settings]
        I[Database] --> I8[shopify_sessions]
        I[Database] --> I9[customer_segments]
        I[Database] --> I10[admin_users]
        I[Database] --> I11[api_logs]
        I[Database] --> I12[audit_logs]
        I[Database] --> I13[vip_tiers]
        I[Database] --> I14[email_templates]
        I[Database] --> I15[email_events]
        I[Database] --> I16[integrations]
        I[Database] --> I17[bonus_campaigns]
        I[Database] --> I18[gamification_achievements]
        I[Database] --> I19[nudges]
        I[Database] --> I20[nudge_events]
    end

    %% Backend (Phase 1, 2, 3, 4)
    subgraph Backend
        G[Backend] --> G1[NestJS APIs]
        G[Backend] --> G2[Rust/Wasm Shopify Functions]
        G1[NestJS APIs] --> G1a[Points APIs]
        G1[NestJS APIs] --> G1b[Referral APIs]
        G1[NestJS APIs] --> G1c[Analytics APIs]
        G1[NestJS APIs] --> G1d[Data Import APIs]
        G1[NestJS APIs] --> G1e[Admin APIs]
        G1[NestJS APIs] --> G1f[VIP Tiers APIs]
        G1[NestJS APIs] --> G1g[RFM Config APIs]
        G1[NestJS APIs] --> G1h[Activity APIs]
        G1[NestJS APIs] --> G1i[Campaign APIs]
        G1[NestJS APIs] --> G1j[Gamification APIs]
        G1[NestJS APIs] --> G1k[Nudges APIs]
        G2[Rust/Wasm Shopify Functions] --> G2a[Discounts]
        G2[Rust/Wasm Shopify Functions] --> G2b[RFM Updates]
        G2[Rust/Wasm Shopify Functions] --> G2c[VIP Multipliers]
        G2[Rust/Wasm Shopify Functions] --> G2d[Campaign Discounts]
    end

    %% Data Flow
    A[Customer] -->|Earns/Redeems| I3[points_transactions]
    A[Customer] -->|Refers| I4[referrals]
    B[Customer Widget] -->|Fetches/Saves| J[Cache: Redis]
    J[Cache: Redis] -->|Caches| G[Backend]
    G[Backend] -->|Queries| I[Database]
    D[Merchant Dashboard] -->|Configures| I7[program_settings]
    D[Merchant Dashboard] -->|Views| I9[customer_segments]
    F[Admin Module] -->|Manages| I1[merchants]
    F[Admin Module] -->|Views| I11[api_logs]
    F[Admin Module] -->|Views| I12[audit_logs]
    H[Integrations] -->|Sends Data| G[Backend]
    I2[customers] -->|Stores RFM| I9[customer_segments]
    I13[vip_tiers] -->|Stores VIP Data| I2[customers]
    I7[program_settings] -->|Stores RFM Thresholds| D6[Settings]








Explanation of the Flow Diagram
	• Customer Purchase: The process starts when a customer completes a $100 purchase on the Shopify store.
	• Shopify Webhook: Shopify sends an orders/create webhook to the NestJS backend with details (total_price: 100, customer.id, shop_id).
	• Webhook Validation: The WebhookController validates the webhook's HMAC signature using Shopify's API library to ensure authenticity.
	• Points Calculation: 
		○ Fetches the merchant's points_per_dollar (e.g., 10) from the loyalty_config table's JSONB field.
		○ Calculates points: 100 * 10 = 1000.
	• Database Updates: 
		○ Inserts a transaction into points_transactions (shopify_customer_id, points_earned: 1000, action_type: PURCHASE, order_id, timestamp).
		○ Updates users.points_balance by adding 1000 points.
	• Caching: Stores the updated points_balance in Redis with a key like points:customer:{customer_id} for fast access.
	• Reward Check: Checks if the new balance (e.g., 1000) meets any reward thresholds (e.g., 200 points for a 10% discount) in loyalty_config.config.rewards.
	• Notifications: If eligible, sends an SMS via Twilio and/or an email via SendGrid with the customer's updated points balance.
	• Error Handling: Invalid webhooks are logged and rejected to prevent unauthorized updates.
How to Use the Diagram
	• Documentation: Add this Mermaid code to your project's docs/flows/points_earning.mmd file or README.md. Render it in GitHub, VS Code (with Mermaid plugin), or a tool like Mermaid Live Editor (mermaid.live).
	• Demo: Include the rendered diagram in presentations for beta merchants or Shopify reviewers to show how the points program works.
	• Development: Use it to guide implementation of the WebhookController, PointsService, and database queries in NestJS.
Additional Notes
	• Rust/Wasm: For high-traffic stores, you could offload the points calculation (step G) to a Shopify Function written in Rust/Wasm for performance, but I kept it in NestJS for simplicity in the MVP.
	• Caching: Redis caching (step J) reduces database load for frequent balance checks (e.g., in the customer widget).
	• Error Handling: The diagram includes basic error handling (step P); you can expand it with retry logic for Shopify API rate limits.
	• Scalability: Use a queue (e.g., Bull with Redis) for notifications (steps M/N) to handle high volumes asynchronously.
If You Want More
If you want a diagram for a different process (e.g., points redemption, SMS referrals) or more detail (e.g., specific API endpoints, SQL queries), please specify:
	• The exact process (e.g., “redeeming 200 points for a 10% discount”).
	• Whether to include more technical details (e.g., API payloads, Rust/Wasm logic).
	• Any additional components (e.g., PostHog analytics, Shopify POS integration). Alternatively, I can generate a sequence diagram or wireframe to complement this flowchart. Let me know your preference!
